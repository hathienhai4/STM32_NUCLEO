
PROJECT_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e30  08004e30  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e30  08004e30  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e34  08004e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000009c  08004ed4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08004ed4  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cc8  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdf  00000000  00000000  00035d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00038d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00039dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d3d  00000000  00000000  0003acf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a09  00000000  00000000  00054a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e32a  00000000  00000000  0006a43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8768  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  000f87bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d74 	.word	0x08004d74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08004d74 	.word	0x08004d74

0800014c <clearLed>:
 *  Created on: Nov 14, 2024
 *      Author: admin
 */
#include <RYG_LED.h>

void clearLed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	displayLed(-1);
 8000150:	f04f 30ff 	mov.w	r0, #4294967295
 8000154:	f000 f806 	bl	8000164 <displayLed>
	displayLed2(-1);
 8000158:	f04f 30ff 	mov.w	r0, #4294967295
 800015c:	f000 f848 	bl	80001f0 <displayLed2>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <displayLed>:

void displayLed(int state){
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	switch(state){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f240 124d 	movw	r2, #333	; 0x14d
 8000172:	4293      	cmp	r3, r2
 8000174:	d020      	beq.n	80001b8 <displayLed+0x54>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 800017c:	da27      	bge.n	80001ce <displayLed+0x6a>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b6f      	cmp	r3, #111	; 0x6f
 8000182:	d003      	beq.n	800018c <displayLed+0x28>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2bde      	cmp	r3, #222	; 0xde
 8000188:	d00b      	beq.n	80001a2 <displayLed+0x3e>
 800018a:	e020      	b.n	80001ce <displayLed+0x6a>
		case RED:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2108      	movs	r1, #8
 8000190:	4816      	ldr	r0, [pc, #88]	; (80001ec <displayLed+0x88>)
 8000192:	f001 ff4e 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	2120      	movs	r1, #32
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <displayLed+0x88>)
 800019c:	f001 ff49 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 80001a0:	e020      	b.n	80001e4 <displayLed+0x80>
		case YEL:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2108      	movs	r1, #8
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <displayLed+0x88>)
 80001a8:	f001 ff43 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2120      	movs	r1, #32
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <displayLed+0x88>)
 80001b2:	f001 ff3e 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 80001b6:	e015      	b.n	80001e4 <displayLed+0x80>
		case GREEN:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2108      	movs	r1, #8
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <displayLed+0x88>)
 80001be:	f001 ff38 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2120      	movs	r1, #32
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <displayLed+0x88>)
 80001c8:	f001 ff33 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 80001cc:	e00a      	b.n	80001e4 <displayLed+0x80>
		default:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2108      	movs	r1, #8
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <displayLed+0x88>)
 80001d4:	f001 ff2d 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2120      	movs	r1, #32
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <displayLed+0x88>)
 80001de:	f001 ff28 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 80001e2:	bf00      	nop
	}
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <displayLed2>:
void displayLed2(int state){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	switch(state){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f240 124d 	movw	r2, #333	; 0x14d
 80001fe:	4293      	cmp	r3, r2
 8000200:	d022      	beq.n	8000248 <displayLed2+0x58>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8000208:	da2a      	bge.n	8000260 <displayLed2+0x70>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b6f      	cmp	r3, #111	; 0x6f
 800020e:	d003      	beq.n	8000218 <displayLed2+0x28>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2bde      	cmp	r3, #222	; 0xde
 8000214:	d00c      	beq.n	8000230 <displayLed2+0x40>
 8000216:	e023      	b.n	8000260 <displayLed2+0x70>
		case RED:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2110      	movs	r1, #16
 800021c:	4818      	ldr	r0, [pc, #96]	; (8000280 <displayLed2+0x90>)
 800021e:	f001 ff08 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000228:	4815      	ldr	r0, [pc, #84]	; (8000280 <displayLed2+0x90>)
 800022a:	f001 ff02 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 800022e:	e023      	b.n	8000278 <displayLed2+0x88>
		case YEL:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4812      	ldr	r0, [pc, #72]	; (8000280 <displayLed2+0x90>)
 8000236:	f001 fefc 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	480f      	ldr	r0, [pc, #60]	; (8000280 <displayLed2+0x90>)
 8000242:	f001 fef6 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000246:	e017      	b.n	8000278 <displayLed2+0x88>
		case GREEN:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <displayLed2+0x90>)
 800024e:	f001 fef0 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4809      	ldr	r0, [pc, #36]	; (8000280 <displayLed2+0x90>)
 800025a:	f001 feea 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 800025e:	e00b      	b.n	8000278 <displayLed2+0x88>
		default:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2110      	movs	r1, #16
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <displayLed2+0x90>)
 8000266:	f001 fee4 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <displayLed2+0x90>)
 8000272:	f001 fede 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000276:	bf00      	nop
	}
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010c00 	.word	0x40010c00

08000284 <init_Button>:
int TimeOutForKeyPress[NUM_BUTTON];
int button_pressed[NUM_BUTTON];
int button_long_pressed[NUM_BUTTON];
int button_flag[NUM_BUTTON];

void init_Button(int i){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
		 KeyReg0[i] = NORMAL_STATE;
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <init_Button+0x64>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2101      	movs	r1, #1
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg1[i] = NORMAL_STATE;
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <init_Button+0x68>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2101      	movs	r1, #1
 800029c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg2[i] = NORMAL_STATE;
 80002a0:	4a13      	ldr	r2, [pc, #76]	; (80002f0 <init_Button+0x6c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2101      	movs	r1, #1
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg3[i] = NORMAL_STATE;
 80002aa:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <init_Button+0x70>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2101      	movs	r1, #1
 80002b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 TimeOutForKeyPress[i] =  1000;
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <init_Button+0x74>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_pressed[i] = 0;
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <init_Button+0x78>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2100      	movs	r1, #0
 80002c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_long_pressed[i] = 0;
 80002ca:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <init_Button+0x7c>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2100      	movs	r1, #0
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_flag[i] = 0;
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <init_Button+0x80>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2100      	movs	r1, #0
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	200000e4 	.word	0x200000e4
 80002ec:	200000f0 	.word	0x200000f0
 80002f0:	20000120 	.word	0x20000120
 80002f4:	200000d8 	.word	0x200000d8
 80002f8:	200000fc 	.word	0x200000fc
 80002fc:	20000114 	.word	0x20000114
 8000300:	2000012c 	.word	0x2000012c
 8000304:	20000108 	.word	0x20000108

08000308 <isButtonPressed>:


GPIO_TypeDef* button_ports[] = {BUTTON1_GPIO_Port,BUTTON2_GPIO_Port,BUTTON3_GPIO_Port};
uint16_t button_pins[] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

int isButtonPressed( int index ){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000310:	4a09      	ldr	r2, [pc, #36]	; (8000338 <isButtonPressed+0x30>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d106      	bne.n	800032a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <isButtonPressed+0x30>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2100      	movs	r1, #0
 8000322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000326:	2301      	movs	r3, #1
 8000328:	e000      	b.n	800032c <isButtonPressed+0x24>
	}
	return 0;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000108 	.word	0x20000108

0800033c <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTON; i++){
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	e07d      	b.n	8000444 <getKeyInput+0x108>
		KeyReg2[i] = KeyReg1[i];
 8000348:	4a43      	ldr	r2, [pc, #268]	; (8000458 <getKeyInput+0x11c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000350:	4942      	ldr	r1, [pc, #264]	; (800045c <getKeyInput+0x120>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000358:	4a41      	ldr	r2, [pc, #260]	; (8000460 <getKeyInput+0x124>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000360:	493d      	ldr	r1, [pc, #244]	; (8000458 <getKeyInput+0x11c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  KeyReg0[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000368:	4a3e      	ldr	r2, [pc, #248]	; (8000464 <getKeyInput+0x128>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	493d      	ldr	r1, [pc, #244]	; (8000468 <getKeyInput+0x12c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000378:	4619      	mov	r1, r3
 800037a:	4610      	mov	r0, r2
 800037c:	f001 fe42 	bl	8002004 <HAL_GPIO_ReadPin>
 8000380:	4603      	mov	r3, r0
 8000382:	4619      	mov	r1, r3
 8000384:	4a36      	ldr	r2, [pc, #216]	; (8000460 <getKeyInput+0x124>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800038c:	4a32      	ldr	r2, [pc, #200]	; (8000458 <getKeyInput+0x11c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000394:	4932      	ldr	r1, [pc, #200]	; (8000460 <getKeyInput+0x124>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039c:	429a      	cmp	r2, r3
 800039e:	d14e      	bne.n	800043e <getKeyInput+0x102>
 80003a0:	4a2d      	ldr	r2, [pc, #180]	; (8000458 <getKeyInput+0x11c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003a8:	492c      	ldr	r1, [pc, #176]	; (800045c <getKeyInput+0x120>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d144      	bne.n	800043e <getKeyInput+0x102>
		if (KeyReg2[i] != KeyReg3[i]){
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <getKeyInput+0x120>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003bc:	492b      	ldr	r1, [pc, #172]	; (800046c <getKeyInput+0x130>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d019      	beq.n	80003fc <getKeyInput+0xc0>
		  KeyReg3[i] = KeyReg2[i];
 80003c8:	4a24      	ldr	r2, [pc, #144]	; (800045c <getKeyInput+0x120>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d0:	4926      	ldr	r1, [pc, #152]	; (800046c <getKeyInput+0x130>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 80003d8:	4a24      	ldr	r2, [pc, #144]	; (800046c <getKeyInput+0x130>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d12c      	bne.n	800043e <getKeyInput+0x102>
			TimeOutForKeyPress[i] = 1000;
 80003e4:	4a22      	ldr	r2, [pc, #136]	; (8000470 <getKeyInput+0x134>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			//subKeyProcess();
			button_flag[i] = 1;
 80003f0:	4a20      	ldr	r2, [pc, #128]	; (8000474 <getKeyInput+0x138>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2101      	movs	r1, #1
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80003fa:	e020      	b.n	800043e <getKeyInput+0x102>
		  }

		}else{
			TimeOutForKeyPress[i] -= 10;
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <getKeyInput+0x134>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000404:	f1a3 020a 	sub.w	r2, r3, #10
 8000408:	4919      	ldr	r1, [pc, #100]	; (8000470 <getKeyInput+0x134>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <getKeyInput+0x134>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d110      	bne.n	800043e <getKeyInput+0x102>
				TimeOutForKeyPress[i] = 500;
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <getKeyInput+0x134>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000424:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <getKeyInput+0x130>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d104      	bne.n	800043e <getKeyInput+0x102>
					//subKeyProcess();
					button_flag[i] = 1;
 8000434:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <getKeyInput+0x138>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2101      	movs	r1, #1
 800043a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTON; i++){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b02      	cmp	r3, #2
 8000448:	f77f af7e 	ble.w	8000348 <getKeyInput+0xc>
				}
			}
		}
	  }
	}
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000f0 	.word	0x200000f0
 800045c:	20000120 	.word	0x20000120
 8000460:	200000e4 	.word	0x200000e4
 8000464:	20000000 	.word	0x20000000
 8000468:	2000000c 	.word	0x2000000c
 800046c:	200000d8 	.word	0x200000d8
 8000470:	200000fc 	.word	0x200000fc
 8000474:	20000108 	.word	0x20000108

08000478 <displayLCD1>:
 *      Author: admin
 */
#include<displayLCD.h>


void displayLCD1(int number, char *string){
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	char str[16];
	int n = (number / 1000) % 100;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a15      	ldr	r2, [pc, #84]	; (80004dc <displayLCD1+0x64>)
 8000486:	fb82 1203 	smull	r1, r2, r2, r3
 800048a:	1192      	asrs	r2, r2, #6
 800048c:	17db      	asrs	r3, r3, #31
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <displayLCD1+0x68>)
 8000492:	fb82 1203 	smull	r1, r2, r2, r3
 8000496:	1151      	asrs	r1, r2, #5
 8000498:	17da      	asrs	r2, r3, #31
 800049a:	1a8a      	subs	r2, r1, r2
 800049c:	2164      	movs	r1, #100	; 0x64
 800049e:	fb01 f202 	mul.w	r2, r1, r2
 80004a2:	1a9b      	subs	r3, r3, r2
 80004a4:	61fb      	str	r3, [r7, #28]
	lcd_put_cur(0, 0);
 80004a6:	2100      	movs	r1, #0
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 fc6c 	bl	8000d86 <lcd_put_cur>
	lcd_send_string(string);
 80004ae:	6838      	ldr	r0, [r7, #0]
 80004b0:	f000 fcc5 	bl	8000e3e <lcd_send_string>

	lcd_put_cur(1, 3);
 80004b4:	2103      	movs	r1, #3
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fc65 	bl	8000d86 <lcd_put_cur>
	snprintf(str, sizeof(str), "%02d", n);
 80004bc:	f107 000c 	add.w	r0, r7, #12
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <displayLCD1+0x6c>)
 80004c4:	2110      	movs	r1, #16
 80004c6:	f004 f807 	bl	80044d8 <sniprintf>
	lcd_send_string(str);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fcb5 	bl	8000e3e <lcd_send_string>
}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	10624dd3 	.word	0x10624dd3
 80004e0:	51eb851f 	.word	0x51eb851f
 80004e4:	08004d8c 	.word	0x08004d8c

080004e8 <displayLCD2>:
void displayLCD2(int number, char * string){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	char str[16];
	int n = (number / 1000) % 100;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a15      	ldr	r2, [pc, #84]	; (800054c <displayLCD2+0x64>)
 80004f6:	fb82 1203 	smull	r1, r2, r2, r3
 80004fa:	1192      	asrs	r2, r2, #6
 80004fc:	17db      	asrs	r3, r3, #31
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <displayLCD2+0x68>)
 8000502:	fb82 1203 	smull	r1, r2, r2, r3
 8000506:	1151      	asrs	r1, r2, #5
 8000508:	17da      	asrs	r2, r3, #31
 800050a:	1a8a      	subs	r2, r1, r2
 800050c:	2164      	movs	r1, #100	; 0x64
 800050e:	fb01 f202 	mul.w	r2, r1, r2
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	61fb      	str	r3, [r7, #28]
	lcd_put_cur(1, 8);
 8000516:	2108      	movs	r1, #8
 8000518:	2001      	movs	r0, #1
 800051a:	f000 fc34 	bl	8000d86 <lcd_put_cur>
	lcd_send_string(string);
 800051e:	6838      	ldr	r0, [r7, #0]
 8000520:	f000 fc8d 	bl	8000e3e <lcd_send_string>

	lcd_put_cur(0, 10);
 8000524:	210a      	movs	r1, #10
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fc2d 	bl	8000d86 <lcd_put_cur>
	snprintf(str, sizeof(str), "%02d", n);
 800052c:	f107 000c 	add.w	r0, r7, #12
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <displayLCD2+0x6c>)
 8000534:	2110      	movs	r1, #16
 8000536:	f003 ffcf 	bl	80044d8 <sniprintf>
	lcd_send_string(str);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fc7d 	bl	8000e3e <lcd_send_string>
}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	10624dd3 	.word	0x10624dd3
 8000550:	51eb851f 	.word	0x51eb851f
 8000554:	08004d8c 	.word	0x08004d8c

08000558 <acp>:

void acp(){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
	char str[16];
	lcd_clear();
 800055e:	f000 fbfb 	bl	8000d58 <lcd_clear>
	lcd_put_cur(0, 0);
 8000562:	2100      	movs	r1, #0
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fc0e 	bl	8000d86 <lcd_put_cur>
	lcd_send_string("Successfully ");
 800056a:	4807      	ldr	r0, [pc, #28]	; (8000588 <acp+0x30>)
 800056c:	f000 fc67 	bl	8000e3e <lcd_send_string>
	lcd_put_cur(1, 10);
 8000570:	210a      	movs	r1, #10
 8000572:	2001      	movs	r0, #1
 8000574:	f000 fc07 	bl	8000d86 <lcd_put_cur>
	lcd_send_string("Saved");
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <acp+0x34>)
 800057a:	f000 fc60 	bl	8000e3e <lcd_send_string>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	08004d94 	.word	0x08004d94
 800058c:	08004da4 	.word	0x08004da4

08000590 <checkTime>:
 */

#include "fsm_traffic_light.h"


void checkTime() {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	if(red_time != yel_time + green_time){
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <checkTime+0x44>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <checkTime+0x48>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	441a      	add	r2, r3
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <checkTime+0x4c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d006      	beq.n	80005b4 <checkTime+0x24>
		red_time = yel_time + green_time;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <checkTime+0x44>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <checkTime+0x48>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <checkTime+0x4c>)
 80005b2:	6013      	str	r3, [r2, #0]
	}
	temp[0] = red_time;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <checkTime+0x4c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <checkTime+0x50>)
 80005ba:	6013      	str	r3, [r2, #0]
	temp[2] = yel_time;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <checkTime+0x44>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <checkTime+0x50>)
 80005c2:	6093      	str	r3, [r2, #8]
	temp[1] = green_time;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <checkTime+0x48>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <checkTime+0x50>)
 80005ca:	6053      	str	r3, [r2, #4]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	2000001c 	.word	0x2000001c
 80005d8:	20000018 	.word	0x20000018
 80005dc:	20000014 	.word	0x20000014
 80005e0:	20000020 	.word	0x20000020

080005e4 <fsm_traffic>:


void fsm_traffic(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	switch(status){
 80005e8:	4bae      	ldr	r3, [pc, #696]	; (80008a4 <fsm_traffic+0x2c0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	f200 8337 	bhi.w	8000c62 <fsm_traffic+0x67e>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <fsm_traffic+0x18>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000621 	.word	0x08000621
 8000600:	08000785 	.word	0x08000785
 8000604:	08000819 	.word	0x08000819
 8000608:	08000665 	.word	0x08000665
 800060c:	080006f9 	.word	0x080006f9
 8000610:	08000905 	.word	0x08000905
 8000614:	08000a2f 	.word	0x08000a2f
 8000618:	08000b39 	.word	0x08000b39
 800061c:	080008c9 	.word	0x080008c9
		case INIT:
			checkTime();
 8000620:	f7ff ffb6 	bl	8000590 <checkTime>
			status = RED_GREEN;
 8000624:	4b9f      	ldr	r3, [pc, #636]	; (80008a4 <fsm_traffic+0x2c0>)
 8000626:	2204      	movs	r2, #4
 8000628:	601a      	str	r2, [r3, #0]
			setTimer(0,green_time);
 800062a:	4b9f      	ldr	r3, [pc, #636]	; (80008a8 <fsm_traffic+0x2c4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	2000      	movs	r0, #0
 8000632:	f000 ff21 	bl	8001478 <setTimer>
			if(isButtonPressed(0)) status = MAN_INIT;
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe66 	bl	8000308 <isButtonPressed>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <fsm_traffic+0x64>
 8000642:	4b98      	ldr	r3, [pc, #608]	; (80008a4 <fsm_traffic+0x2c0>)
 8000644:	2209      	movs	r2, #9
 8000646:	601a      	str	r2, [r3, #0]
			setTimer(0, green_time);
 8000648:	4b97      	ldr	r3, [pc, #604]	; (80008a8 <fsm_traffic+0x2c4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	2000      	movs	r0, #0
 8000650:	f000 ff12 	bl	8001478 <setTimer>
			setTimer(1, 1000);
 8000654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000658:	2001      	movs	r0, #1
 800065a:	f000 ff0d 	bl	8001478 <setTimer>
			lcd_clear();
 800065e:	f000 fb7b 	bl	8000d58 <lcd_clear>
			break;
 8000662:	e30d      	b.n	8000c80 <fsm_traffic+0x69c>

		case RED_GREEN:
			val1 = timer_counter[0] * 10 + yel_time;
 8000664:	4b91      	ldr	r3, [pc, #580]	; (80008ac <fsm_traffic+0x2c8>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4613      	mov	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	461a      	mov	r2, r3
 8000672:	4b8f      	ldr	r3, [pc, #572]	; (80008b0 <fsm_traffic+0x2cc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a8e      	ldr	r2, [pc, #568]	; (80008b4 <fsm_traffic+0x2d0>)
 800067a:	6013      	str	r3, [r2, #0]
			val2 = timer_counter[0] * 10;
 800067c:	4b8b      	ldr	r3, [pc, #556]	; (80008ac <fsm_traffic+0x2c8>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	461a      	mov	r2, r3
 800068a:	4b8b      	ldr	r3, [pc, #556]	; (80008b8 <fsm_traffic+0x2d4>)
 800068c:	601a      	str	r2, [r3, #0]
			displayLed(RED);
 800068e:	206f      	movs	r0, #111	; 0x6f
 8000690:	f7ff fd68 	bl	8000164 <displayLed>
			displayLed2(GREEN);
 8000694:	f240 104d 	movw	r0, #333	; 0x14d
 8000698:	f7ff fdaa 	bl	80001f0 <displayLed2>
			displayLCD1(val1, "RED");
 800069c:	4b85      	ldr	r3, [pc, #532]	; (80008b4 <fsm_traffic+0x2d0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4986      	ldr	r1, [pc, #536]	; (80008bc <fsm_traffic+0x2d8>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fee8 	bl	8000478 <displayLCD1>
			displayLCD2(val2, "GREEN");
 80006a8:	4b83      	ldr	r3, [pc, #524]	; (80008b8 <fsm_traffic+0x2d4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4984      	ldr	r1, [pc, #528]	; (80008c0 <fsm_traffic+0x2dc>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff1a 	bl	80004e8 <displayLCD2>
			if(isTimerExpired(0)){
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 feff 	bl	80014b8 <isTimerExpired>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d010      	beq.n	80006e2 <fsm_traffic+0xfe>
				status = RED_YEL;
 80006c0:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <fsm_traffic+0x2c0>)
 80006c2:	2205      	movs	r2, #5
 80006c4:	601a      	str	r2, [r3, #0]
				val1 = 0;
 80006c6:	4b7b      	ldr	r3, [pc, #492]	; (80008b4 <fsm_traffic+0x2d0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
				val2 = 0;
 80006cc:	4b7a      	ldr	r3, [pc, #488]	; (80008b8 <fsm_traffic+0x2d4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
				setTimer(0,yel_time);
 80006d2:	4b77      	ldr	r3, [pc, #476]	; (80008b0 <fsm_traffic+0x2cc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fecd 	bl	8001478 <setTimer>
				lcd_clear();
 80006de:	f000 fb3b 	bl	8000d58 <lcd_clear>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fe10 	bl	8000308 <isButtonPressed>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f000 82bb 	beq.w	8000c66 <fsm_traffic+0x682>
 80006f0:	4b6c      	ldr	r3, [pc, #432]	; (80008a4 <fsm_traffic+0x2c0>)
 80006f2:	2209      	movs	r2, #9
 80006f4:	601a      	str	r2, [r3, #0]
			break;
 80006f6:	e2b6      	b.n	8000c66 <fsm_traffic+0x682>

		case RED_YEL:
			val1 = timer_counter[0] * 10;
 80006f8:	4b6c      	ldr	r3, [pc, #432]	; (80008ac <fsm_traffic+0x2c8>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	461a      	mov	r2, r3
 8000706:	4b6b      	ldr	r3, [pc, #428]	; (80008b4 <fsm_traffic+0x2d0>)
 8000708:	601a      	str	r2, [r3, #0]
			val2 = timer_counter[0] * 10;
 800070a:	4b68      	ldr	r3, [pc, #416]	; (80008ac <fsm_traffic+0x2c8>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	461a      	mov	r2, r3
 8000718:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <fsm_traffic+0x2d4>)
 800071a:	601a      	str	r2, [r3, #0]
			displayLed(RED);
 800071c:	206f      	movs	r0, #111	; 0x6f
 800071e:	f7ff fd21 	bl	8000164 <displayLed>
			displayLed2(YEL);
 8000722:	20de      	movs	r0, #222	; 0xde
 8000724:	f7ff fd64 	bl	80001f0 <displayLed2>
			displayLCD1(val1, "RED");
 8000728:	4b62      	ldr	r3, [pc, #392]	; (80008b4 <fsm_traffic+0x2d0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4963      	ldr	r1, [pc, #396]	; (80008bc <fsm_traffic+0x2d8>)
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fea2 	bl	8000478 <displayLCD1>
			displayLCD2(val2, "YELLOW");
 8000734:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <fsm_traffic+0x2d4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4962      	ldr	r1, [pc, #392]	; (80008c4 <fsm_traffic+0x2e0>)
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fed4 	bl	80004e8 <displayLCD2>

			if(isTimerExpired(0)){
 8000740:	2000      	movs	r0, #0
 8000742:	f000 feb9 	bl	80014b8 <isTimerExpired>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d010      	beq.n	800076e <fsm_traffic+0x18a>
				status = GREEN_RED;
 800074c:	4b55      	ldr	r3, [pc, #340]	; (80008a4 <fsm_traffic+0x2c0>)
 800074e:	2202      	movs	r2, #2
 8000750:	601a      	str	r2, [r3, #0]
				val1 = 0;
 8000752:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <fsm_traffic+0x2d0>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
				val2 = 0;
 8000758:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <fsm_traffic+0x2d4>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 800075e:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <fsm_traffic+0x2c4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fe87 	bl	8001478 <setTimer>
				lcd_clear();
 800076a:	f000 faf5 	bl	8000d58 <lcd_clear>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fdca 	bl	8000308 <isButtonPressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 8277 	beq.w	8000c6a <fsm_traffic+0x686>
 800077c:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <fsm_traffic+0x2c0>)
 800077e:	2209      	movs	r2, #9
 8000780:	601a      	str	r2, [r3, #0]
			break;
 8000782:	e272      	b.n	8000c6a <fsm_traffic+0x686>
		case GREEN_RED:
			val2 = timer_counter[0] * 10 + yel_time;
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <fsm_traffic+0x2c8>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	461a      	mov	r2, r3
 8000792:	4b47      	ldr	r3, [pc, #284]	; (80008b0 <fsm_traffic+0x2cc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a47      	ldr	r2, [pc, #284]	; (80008b8 <fsm_traffic+0x2d4>)
 800079a:	6013      	str	r3, [r2, #0]
			val1 = timer_counter[0] * 10;
 800079c:	4b43      	ldr	r3, [pc, #268]	; (80008ac <fsm_traffic+0x2c8>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <fsm_traffic+0x2d0>)
 80007ac:	601a      	str	r2, [r3, #0]
			displayLed(GREEN);
 80007ae:	f240 104d 	movw	r0, #333	; 0x14d
 80007b2:	f7ff fcd7 	bl	8000164 <displayLed>
			displayLed2(RED);
 80007b6:	206f      	movs	r0, #111	; 0x6f
 80007b8:	f7ff fd1a 	bl	80001f0 <displayLed2>
			displayLCD1(val1, "GREEN");
 80007bc:	4b3d      	ldr	r3, [pc, #244]	; (80008b4 <fsm_traffic+0x2d0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	493f      	ldr	r1, [pc, #252]	; (80008c0 <fsm_traffic+0x2dc>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe58 	bl	8000478 <displayLCD1>
			displayLCD2(val2, "RED");
 80007c8:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <fsm_traffic+0x2d4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	493b      	ldr	r1, [pc, #236]	; (80008bc <fsm_traffic+0x2d8>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe8a 	bl	80004e8 <displayLCD2>
			if(isTimerExpired(0)){
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fe6f 	bl	80014b8 <isTimerExpired>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d010      	beq.n	8000802 <fsm_traffic+0x21e>
				status = YEL_RED;
 80007e0:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <fsm_traffic+0x2c0>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	601a      	str	r2, [r3, #0]
				val1 = 0;
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <fsm_traffic+0x2d0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
				val2 = 0;
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <fsm_traffic+0x2d4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
				setTimer(0, yel_time);
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <fsm_traffic+0x2cc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4619      	mov	r1, r3
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fe3d 	bl	8001478 <setTimer>
				lcd_clear();
 80007fe:	f000 faab 	bl	8000d58 <lcd_clear>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fd80 	bl	8000308 <isButtonPressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 822f 	beq.w	8000c6e <fsm_traffic+0x68a>
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <fsm_traffic+0x2c0>)
 8000812:	2209      	movs	r2, #9
 8000814:	601a      	str	r2, [r3, #0]
			break;
 8000816:	e22a      	b.n	8000c6e <fsm_traffic+0x68a>
		case YEL_RED:
			val2 = timer_counter[0] * 10;
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <fsm_traffic+0x2c8>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	461a      	mov	r2, r3
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <fsm_traffic+0x2d4>)
 8000828:	601a      	str	r2, [r3, #0]
			val1 = timer_counter[0] * 10;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <fsm_traffic+0x2c8>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	461a      	mov	r2, r3
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <fsm_traffic+0x2d0>)
 800083a:	601a      	str	r2, [r3, #0]
			displayLed(YEL);
 800083c:	20de      	movs	r0, #222	; 0xde
 800083e:	f7ff fc91 	bl	8000164 <displayLed>
			displayLed2(RED);
 8000842:	206f      	movs	r0, #111	; 0x6f
 8000844:	f7ff fcd4 	bl	80001f0 <displayLed2>
			displayLCD1(val1, "YELLOW");
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <fsm_traffic+0x2d0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	491d      	ldr	r1, [pc, #116]	; (80008c4 <fsm_traffic+0x2e0>)
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fe12 	bl	8000478 <displayLCD1>
			displayLCD2(val2, "RED");
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <fsm_traffic+0x2d4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4918      	ldr	r1, [pc, #96]	; (80008bc <fsm_traffic+0x2d8>)
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fe44 	bl	80004e8 <displayLCD2>
			if(isTimerExpired(0)){
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fe29 	bl	80014b8 <isTimerExpired>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d010      	beq.n	800088e <fsm_traffic+0x2aa>
				status = RED_GREEN;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <fsm_traffic+0x2c0>)
 800086e:	2204      	movs	r2, #4
 8000870:	601a      	str	r2, [r3, #0]
				val1 = 0;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <fsm_traffic+0x2d0>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
				val2 = 0;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <fsm_traffic+0x2d4>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <fsm_traffic+0x2c4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	2000      	movs	r0, #0
 8000886:	f000 fdf7 	bl	8001478 <setTimer>
				lcd_clear();
 800088a:	f000 fa65 	bl	8000d58 <lcd_clear>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fd3a 	bl	8000308 <isButtonPressed>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 81eb 	beq.w	8000c72 <fsm_traffic+0x68e>
 800089c:	4b01      	ldr	r3, [pc, #4]	; (80008a4 <fsm_traffic+0x2c0>)
 800089e:	2209      	movs	r2, #9
 80008a0:	601a      	str	r2, [r3, #0]
			break;
 80008a2:	e1e6      	b.n	8000c72 <fsm_traffic+0x68e>
 80008a4:	200000b8 	.word	0x200000b8
 80008a8:	20000018 	.word	0x20000018
 80008ac:	2000053c 	.word	0x2000053c
 80008b0:	2000001c 	.word	0x2000001c
 80008b4:	200000bc 	.word	0x200000bc
 80008b8:	200000c0 	.word	0x200000c0
 80008bc:	08004dac 	.word	0x08004dac
 80008c0:	08004db0 	.word	0x08004db0
 80008c4:	08004db8 	.word	0x08004db8

		case MAN_INIT:
			setTimer(0,BLINK_TIME);
 80008c8:	2132      	movs	r1, #50	; 0x32
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 fdd4 	bl	8001478 <setTimer>
			status = MAN_RED;
 80008d0:	4bba      	ldr	r3, [pc, #744]	; (8000bbc <fsm_traffic+0x5d8>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	601a      	str	r2, [r3, #0]
			init_Button(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fcd4 	bl	8000284 <init_Button>
			init_Button(2);
 80008dc:	2002      	movs	r0, #2
 80008de:	f7ff fcd1 	bl	8000284 <init_Button>
			clearLed();
 80008e2:	f7ff fc33 	bl	800014c <clearLed>
			lcd_clear();
 80008e6:	f000 fa37 	bl	8000d58 <lcd_clear>
			red_time = temp[0];
 80008ea:	4bb5      	ldr	r3, [pc, #724]	; (8000bc0 <fsm_traffic+0x5dc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4ab5      	ldr	r2, [pc, #724]	; (8000bc4 <fsm_traffic+0x5e0>)
 80008f0:	6013      	str	r3, [r2, #0]
			green_time = temp[1];
 80008f2:	4bb3      	ldr	r3, [pc, #716]	; (8000bc0 <fsm_traffic+0x5dc>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4ab4      	ldr	r2, [pc, #720]	; (8000bc8 <fsm_traffic+0x5e4>)
 80008f8:	6013      	str	r3, [r2, #0]
			yel_time = temp[2];
 80008fa:	4bb1      	ldr	r3, [pc, #708]	; (8000bc0 <fsm_traffic+0x5dc>)
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	4ab3      	ldr	r2, [pc, #716]	; (8000bcc <fsm_traffic+0x5e8>)
 8000900:	6013      	str	r3, [r2, #0]
			break;
 8000902:	e1bd      	b.n	8000c80 <fsm_traffic+0x69c>
		case MAN_RED:
			displayLCD1(2000, "MODE");
 8000904:	49b2      	ldr	r1, [pc, #712]	; (8000bd0 <fsm_traffic+0x5ec>)
 8000906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090a:	f7ff fdb5 	bl	8000478 <displayLCD1>
			displayLCD2(temp[0], "RED");
 800090e:	4bac      	ldr	r3, [pc, #688]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	49b0      	ldr	r1, [pc, #704]	; (8000bd4 <fsm_traffic+0x5f0>)
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fde7 	bl	80004e8 <displayLCD2>
			if(isTimerExpired(0)){
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fdcc 	bl	80014b8 <isTimerExpired>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d014      	beq.n	8000950 <fsm_traffic+0x36c>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000926:	2110      	movs	r1, #16
 8000928:	48ab      	ldr	r0, [pc, #684]	; (8000bd8 <fsm_traffic+0x5f4>)
 800092a:	f001 fb9a 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800092e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000932:	48a9      	ldr	r0, [pc, #676]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000934:	f001 fb95 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000938:	2108      	movs	r1, #8
 800093a:	48a7      	ldr	r0, [pc, #668]	; (8000bd8 <fsm_traffic+0x5f4>)
 800093c:	f001 fb91 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000940:	2120      	movs	r1, #32
 8000942:	48a5      	ldr	r0, [pc, #660]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000944:	f001 fb8d 	bl	8002062 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000948:	2132      	movs	r1, #50	; 0x32
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fd94 	bl	8001478 <setTimer>
			}
			if(isButtonPressed(0)){
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fcd9 	bl	8000308 <isButtonPressed>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <fsm_traffic+0x38c>
				status = MAN_YEL;
 800095c:	4b97      	ldr	r3, [pc, #604]	; (8000bbc <fsm_traffic+0x5d8>)
 800095e:	2207      	movs	r2, #7
 8000960:	601a      	str	r2, [r3, #0]
				clearLed();
 8000962:	f7ff fbf3 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 8000966:	2132      	movs	r1, #50	; 0x32
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fd85 	bl	8001478 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 800096e:	e182      	b.n	8000c76 <fsm_traffic+0x692>
			else if(isButtonPressed(1)){
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fcc9 	bl	8000308 <isButtonPressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d013      	beq.n	80009a4 <fsm_traffic+0x3c0>
				temp[0] += 1000;
 800097c:	4b90      	ldr	r3, [pc, #576]	; (8000bc0 <fsm_traffic+0x5dc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000984:	4a8e      	ldr	r2, [pc, #568]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000986:	6013      	str	r3, [r2, #0]
				if (temp[0] >= 100000) temp[0] = 1000;
 8000988:	4b8d      	ldr	r3, [pc, #564]	; (8000bc0 <fsm_traffic+0x5dc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a93      	ldr	r2, [pc, #588]	; (8000bdc <fsm_traffic+0x5f8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	dd03      	ble.n	800099a <fsm_traffic+0x3b6>
 8000992:	4b8b      	ldr	r3, [pc, #556]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000998:	601a      	str	r2, [r3, #0]
				setTimer(0, BLINK_TIME);
 800099a:	2132      	movs	r1, #50	; 0x32
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fd6b 	bl	8001478 <setTimer>
			break;
 80009a2:	e168      	b.n	8000c76 <fsm_traffic+0x692>
			}else if(isButtonPressed(2)){
 80009a4:	2002      	movs	r0, #2
 80009a6:	f7ff fcaf 	bl	8000308 <isButtonPressed>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d021      	beq.n	80009f4 <fsm_traffic+0x410>
				acp();
 80009b0:	f7ff fdd2 	bl	8000558 <acp>
				HAL_Delay(500);lcd_clear();
 80009b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b8:	f000 ffbc 	bl	8001934 <HAL_Delay>
 80009bc:	f000 f9cc 	bl	8000d58 <lcd_clear>
				displayLCD1(2000, "MODE");
 80009c0:	4983      	ldr	r1, [pc, #524]	; (8000bd0 <fsm_traffic+0x5ec>)
 80009c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009c6:	f7ff fd57 	bl	8000478 <displayLCD1>
				displayLCD2(temp[0], "RED");
 80009ca:	4b7d      	ldr	r3, [pc, #500]	; (8000bc0 <fsm_traffic+0x5dc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4981      	ldr	r1, [pc, #516]	; (8000bd4 <fsm_traffic+0x5f0>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fd89 	bl	80004e8 <displayLCD2>
				red_time = temp[0];
 80009d6:	4b7a      	ldr	r3, [pc, #488]	; (8000bc0 <fsm_traffic+0x5dc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a7a      	ldr	r2, [pc, #488]	; (8000bc4 <fsm_traffic+0x5e0>)
 80009dc:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 80009de:	2100      	movs	r1, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fd49 	bl	8001478 <setTimer>
				displayLed(RED);
 80009e6:	206f      	movs	r0, #111	; 0x6f
 80009e8:	f7ff fbbc 	bl	8000164 <displayLed>
				displayLed2(RED);
 80009ec:	206f      	movs	r0, #111	; 0x6f
 80009ee:	f7ff fbff 	bl	80001f0 <displayLed2>
			break;
 80009f2:	e140      	b.n	8000c76 <fsm_traffic+0x692>
			else if(isTimerExpired(0)){
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fd5f 	bl	80014b8 <isTimerExpired>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 813a 	beq.w	8000c76 <fsm_traffic+0x692>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000a02:	2110      	movs	r1, #16
 8000a04:	4874      	ldr	r0, [pc, #464]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000a06:	f001 fb2c 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0e:	4872      	ldr	r0, [pc, #456]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000a10:	f001 fb27 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000a14:	2108      	movs	r1, #8
 8000a16:	4870      	ldr	r0, [pc, #448]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000a18:	f001 fb23 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	486e      	ldr	r0, [pc, #440]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000a20:	f001 fb1f 	bl	8002062 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000a24:	2132      	movs	r1, #50	; 0x32
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fd26 	bl	8001478 <setTimer>
			break;
 8000a2c:	e123      	b.n	8000c76 <fsm_traffic+0x692>

		case MAN_YEL:
			displayLCD1(3000, "MODE");
 8000a2e:	4968      	ldr	r1, [pc, #416]	; (8000bd0 <fsm_traffic+0x5ec>)
 8000a30:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a34:	f7ff fd20 	bl	8000478 <displayLCD1>
			displayLCD2(temp[2], "AMBER");
 8000a38:	4b61      	ldr	r3, [pc, #388]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	4968      	ldr	r1, [pc, #416]	; (8000be0 <fsm_traffic+0x5fc>)
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fd52 	bl	80004e8 <displayLCD2>
			if(isTimerExpired(0)){
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 fd37 	bl	80014b8 <isTimerExpired>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00c      	beq.n	8000a6a <fsm_traffic+0x486>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	4860      	ldr	r0, [pc, #384]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000a56:	f001 fb04 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	485e      	ldr	r0, [pc, #376]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000a5e:	f001 fb00 	bl	8002062 <HAL_GPIO_TogglePin>

				setTimer(0, BLINK_TIME);
 8000a62:	2132      	movs	r1, #50	; 0x32
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 fd07 	bl	8001478 <setTimer>
			}
			if(isButtonPressed(0)){
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fc4c 	bl	8000308 <isButtonPressed>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d009      	beq.n	8000a8a <fsm_traffic+0x4a6>
				status = MAN_GREEN;
 8000a76:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <fsm_traffic+0x5d8>)
 8000a78:	2208      	movs	r2, #8
 8000a7a:	601a      	str	r2, [r3, #0]
				clearLed();
 8000a7c:	f7ff fb66 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 8000a80:	2132      	movs	r1, #50	; 0x32
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fcf8 	bl	8001478 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);

				setTimer(0, BLINK_TIME);
			}
			break;
 8000a88:	e0f7      	b.n	8000c7a <fsm_traffic+0x696>
			}else if(isButtonPressed(1)){
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff fc3c 	bl	8000308 <isButtonPressed>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d013      	beq.n	8000abe <fsm_traffic+0x4da>
				temp[2] += 1000;
 8000a96:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a9e:	4a48      	ldr	r2, [pc, #288]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000aa0:	6093      	str	r3, [r2, #8]
				if (temp[2] >= 100000) temp[2] = 1000;
 8000aa2:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <fsm_traffic+0x5f8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	dd03      	ble.n	8000ab4 <fsm_traffic+0x4d0>
 8000aac:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ab2:	609a      	str	r2, [r3, #8]
				setTimer(0, BLINK_TIME);
 8000ab4:	2132      	movs	r1, #50	; 0x32
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 fcde 	bl	8001478 <setTimer>
			break;
 8000abc:	e0dd      	b.n	8000c7a <fsm_traffic+0x696>
			}else if(isButtonPressed(2)){
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff fc22 	bl	8000308 <isButtonPressed>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d021      	beq.n	8000b0e <fsm_traffic+0x52a>
				acp();
 8000aca:	f7ff fd45 	bl	8000558 <acp>
				HAL_Delay(500);
 8000ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad2:	f000 ff2f 	bl	8001934 <HAL_Delay>
				lcd_clear();
 8000ad6:	f000 f93f 	bl	8000d58 <lcd_clear>
				displayLCD1(3000, "MODE");
 8000ada:	493d      	ldr	r1, [pc, #244]	; (8000bd0 <fsm_traffic+0x5ec>)
 8000adc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ae0:	f7ff fcca 	bl	8000478 <displayLCD1>
				displayLCD2(temp[2], "AMBER");
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	493d      	ldr	r1, [pc, #244]	; (8000be0 <fsm_traffic+0x5fc>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fcfc 	bl	80004e8 <displayLCD2>
				yel_time = temp[2];
 8000af0:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a35      	ldr	r2, [pc, #212]	; (8000bcc <fsm_traffic+0x5e8>)
 8000af6:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 fcbc 	bl	8001478 <setTimer>
				displayLed(YEL);
 8000b00:	20de      	movs	r0, #222	; 0xde
 8000b02:	f7ff fb2f 	bl	8000164 <displayLed>
				displayLed2(YEL);
 8000b06:	20de      	movs	r0, #222	; 0xde
 8000b08:	f7ff fb72 	bl	80001f0 <displayLed2>
			break;
 8000b0c:	e0b5      	b.n	8000c7a <fsm_traffic+0x696>
			else if(isTimerExpired(0)){
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 fcd2 	bl	80014b8 <isTimerExpired>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80af 	beq.w	8000c7a <fsm_traffic+0x696>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000b22:	f001 fa9e 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000b26:	2120      	movs	r1, #32
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000b2a:	f001 fa9a 	bl	8002062 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000b2e:	2132      	movs	r1, #50	; 0x32
 8000b30:	2000      	movs	r0, #0
 8000b32:	f000 fca1 	bl	8001478 <setTimer>
			break;
 8000b36:	e0a0      	b.n	8000c7a <fsm_traffic+0x696>

		case MAN_GREEN:
			displayLCD1(4000, "MODE");
 8000b38:	4925      	ldr	r1, [pc, #148]	; (8000bd0 <fsm_traffic+0x5ec>)
 8000b3a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b3e:	f7ff fc9b 	bl	8000478 <displayLCD1>
			displayLCD2(temp[1], "GREEN");
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4927      	ldr	r1, [pc, #156]	; (8000be4 <fsm_traffic+0x600>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fccd 	bl	80004e8 <displayLCD2>
			if(isTimerExpired(0)){
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 fcb2 	bl	80014b8 <isTimerExpired>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <fsm_traffic+0x58e>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000b5e:	f001 fa80 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000b62:	2108      	movs	r1, #8
 8000b64:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <fsm_traffic+0x5f4>)
 8000b66:	f001 fa7c 	bl	8002062 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000b6a:	2132      	movs	r1, #50	; 0x32
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 fc83 	bl	8001478 <setTimer>
			}
			if(isButtonPressed(0)){
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fbc8 	bl	8000308 <isButtonPressed>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <fsm_traffic+0x5a2>
				status = INIT;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <fsm_traffic+0x5d8>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
			else if(isTimerExpired(0)){
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 8000b84:	e07b      	b.n	8000c7e <fsm_traffic+0x69a>
			}else if(isButtonPressed(1)){
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fbbe 	bl	8000308 <isButtonPressed>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d02a      	beq.n	8000be8 <fsm_traffic+0x604>
				temp[1] += 1000;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000b9c:	6053      	str	r3, [r2, #4]
				if (temp[1] >= 100000) temp[1] = 1000;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <fsm_traffic+0x5f8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	dd03      	ble.n	8000bb0 <fsm_traffic+0x5cc>
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <fsm_traffic+0x5dc>)
 8000baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bae:	605a      	str	r2, [r3, #4]
				setTimer(0, BLINK_TIME);
 8000bb0:	2132      	movs	r1, #50	; 0x32
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 fc60 	bl	8001478 <setTimer>
			break;
 8000bb8:	e061      	b.n	8000c7e <fsm_traffic+0x69a>
 8000bba:	bf00      	nop
 8000bbc:	200000b8 	.word	0x200000b8
 8000bc0:	20000020 	.word	0x20000020
 8000bc4:	20000014 	.word	0x20000014
 8000bc8:	20000018 	.word	0x20000018
 8000bcc:	2000001c 	.word	0x2000001c
 8000bd0:	08004dc0 	.word	0x08004dc0
 8000bd4:	08004dac 	.word	0x08004dac
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	0001869f 	.word	0x0001869f
 8000be0:	08004dc8 	.word	0x08004dc8
 8000be4:	08004db0 	.word	0x08004db0
			}else if(isButtonPressed(2)){
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff fb8d 	bl	8000308 <isButtonPressed>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d023      	beq.n	8000c3c <fsm_traffic+0x658>
				acp();
 8000bf4:	f7ff fcb0 	bl	8000558 <acp>
				HAL_Delay(500);lcd_clear();
 8000bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfc:	f000 fe9a 	bl	8001934 <HAL_Delay>
 8000c00:	f000 f8aa 	bl	8000d58 <lcd_clear>
				displayLCD1(4000, "MODE");
 8000c04:	491f      	ldr	r1, [pc, #124]	; (8000c84 <fsm_traffic+0x6a0>)
 8000c06:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000c0a:	f7ff fc35 	bl	8000478 <displayLCD1>
				displayLCD2(temp[1], "GREEN");
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <fsm_traffic+0x6a4>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	491e      	ldr	r1, [pc, #120]	; (8000c8c <fsm_traffic+0x6a8>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fc67 	bl	80004e8 <displayLCD2>
				green_time = temp[1];
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <fsm_traffic+0x6a4>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <fsm_traffic+0x6ac>)
 8000c20:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000c22:	2100      	movs	r1, #0
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 fc27 	bl	8001478 <setTimer>
				displayLed(GREEN);
 8000c2a:	f240 104d 	movw	r0, #333	; 0x14d
 8000c2e:	f7ff fa99 	bl	8000164 <displayLed>
				displayLed2(GREEN);
 8000c32:	f240 104d 	movw	r0, #333	; 0x14d
 8000c36:	f7ff fadb 	bl	80001f0 <displayLed2>
			break;
 8000c3a:	e020      	b.n	8000c7e <fsm_traffic+0x69a>
			else if(isTimerExpired(0)){
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 fc3b 	bl	80014b8 <isTimerExpired>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d01a      	beq.n	8000c7e <fsm_traffic+0x69a>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000c48:	2110      	movs	r1, #16
 8000c4a:	4812      	ldr	r0, [pc, #72]	; (8000c94 <fsm_traffic+0x6b0>)
 8000c4c:	f001 fa09 	bl	8002062 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000c50:	2108      	movs	r1, #8
 8000c52:	4810      	ldr	r0, [pc, #64]	; (8000c94 <fsm_traffic+0x6b0>)
 8000c54:	f001 fa05 	bl	8002062 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000c58:	2132      	movs	r1, #50	; 0x32
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fc0c 	bl	8001478 <setTimer>
			break;
 8000c60:	e00d      	b.n	8000c7e <fsm_traffic+0x69a>

		default:
				break;
 8000c62:	bf00      	nop
 8000c64:	e00c      	b.n	8000c80 <fsm_traffic+0x69c>
			break;
 8000c66:	bf00      	nop
 8000c68:	e00a      	b.n	8000c80 <fsm_traffic+0x69c>
			break;
 8000c6a:	bf00      	nop
 8000c6c:	e008      	b.n	8000c80 <fsm_traffic+0x69c>
			break;
 8000c6e:	bf00      	nop
 8000c70:	e006      	b.n	8000c80 <fsm_traffic+0x69c>
			break;
 8000c72:	bf00      	nop
 8000c74:	e004      	b.n	8000c80 <fsm_traffic+0x69c>
			break;
 8000c76:	bf00      	nop
 8000c78:	e002      	b.n	8000c80 <fsm_traffic+0x69c>
			break;
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <fsm_traffic+0x69c>
			break;
 8000c7e:	bf00      	nop
		}
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	08004dc0 	.word	0x08004dc0
 8000c88:	20000020 	.word	0x20000020
 8000c8c:	08004db0 	.word	0x08004db0
 8000c90:	20000018 	.word	0x20000018
 8000c94:	40010c00 	.word	0x40010c00

08000c98 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x27 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f023 030f 	bic.w	r3, r3, #15
 8000ca8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	f043 030c 	orr.w	r3, r3, #12
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	f043 030c 	orr.w	r3, r3, #12
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cd8:	f107 0208 	add.w	r2, r7, #8
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	214e      	movs	r1, #78	; 0x4e
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <lcd_send_cmd+0x5c>)
 8000ce6:	f001 fb3b 	bl	8002360 <HAL_I2C_Master_Transmit>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000138 	.word	0x20000138

08000cf8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f023 030f 	bic.w	r3, r3, #15
 8000d08:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	f043 030d 	orr.w	r3, r3, #13
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f043 0309 	orr.w	r3, r3, #9
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	f043 030d 	orr.w	r3, r3, #13
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	f043 0309 	orr.w	r3, r3, #9
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d38:	f107 0208 	add.w	r2, r7, #8
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2304      	movs	r3, #4
 8000d42:	214e      	movs	r1, #78	; 0x4e
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <lcd_send_data+0x5c>)
 8000d46:	f001 fb0b 	bl	8002360 <HAL_I2C_Master_Transmit>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000138 	.word	0x20000138

08000d58 <lcd_clear>:

void lcd_clear (void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000d5e:	2080      	movs	r0, #128	; 0x80
 8000d60:	f7ff ff9a 	bl	8000c98 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	e005      	b.n	8000d76 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000d6a:	2020      	movs	r0, #32
 8000d6c:	f7ff ffc4 	bl	8000cf8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3301      	adds	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b45      	cmp	r3, #69	; 0x45
 8000d7a:	ddf6      	ble.n	8000d6a <lcd_clear+0x12>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <lcd_put_cur+0x18>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d005      	beq.n	8000da8 <lcd_put_cur+0x22>
 8000d9c:	e009      	b.n	8000db2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da4:	603b      	str	r3, [r7, #0]
            break;
 8000da6:	e004      	b.n	8000db2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000dae:	603b      	str	r3, [r7, #0]
            break;
 8000db0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff6e 	bl	8000c98 <lcd_send_cmd>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <lcd_init>:


void lcd_init (void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f000 fdb3 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dce:	2030      	movs	r0, #48	; 0x30
 8000dd0:	f7ff ff62 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000dd4:	2005      	movs	r0, #5
 8000dd6:	f000 fdad 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dda:	2030      	movs	r0, #48	; 0x30
 8000ddc:	f7ff ff5c 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 fda7 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000de6:	2030      	movs	r0, #48	; 0x30
 8000de8:	f7ff ff56 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f000 fda1 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000df2:	2020      	movs	r0, #32
 8000df4:	f7ff ff50 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(10);
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f000 fd9b 	bl	8001934 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000dfe:	2028      	movs	r0, #40	; 0x28
 8000e00:	f7ff ff4a 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f000 fd95 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e0a:	2008      	movs	r0, #8
 8000e0c:	f7ff ff44 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fd8f 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff ff3e 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f000 fd89 	bl	8001934 <HAL_Delay>
	HAL_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 fd86 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e28:	2006      	movs	r0, #6
 8000e2a:	f7ff ff35 	bl	8000c98 <lcd_send_cmd>
	HAL_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f000 fd80 	bl	8001934 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e34:	200c      	movs	r0, #12
 8000e36:	f7ff ff2f 	bl	8000c98 <lcd_send_cmd>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e46:	e006      	b.n	8000e56 <lcd_send_string+0x18>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff51 	bl	8000cf8 <lcd_send_data>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f4      	bne.n	8000e48 <lcd_send_string+0xa>
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fd00 	bl	8001870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f82e 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 f912 	bl	800109c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e78:	f000 f8e6 	bl	8001048 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e7c:	f000 f898 	bl	8000fb0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e80:	f000 f868 	bl	8000f54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <main+0x54>)
 8000e86:	f002 fa21 	bl	80032cc <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000e8a:	f000 f9b7 	bl	80011fc <SCH_Init>
  lcd_init();
 8000e8e:	f7ff ff99 	bl	8000dc4 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <main+0x58>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(getKeyInput, 0, 10);
 8000e98:	220a      	movs	r2, #10
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <main+0x5c>)
 8000e9e:	f000 f9bd 	bl	800121c <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 10);
 8000ea2:	220a      	movs	r2, #10
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <main+0x60>)
 8000ea8:	f000 f9b8 	bl	800121c <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic, 0, 10);
 8000eac:	220a      	movs	r2, #10
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <main+0x64>)
 8000eb2:	f000 f9b3 	bl	800121c <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000eb6:	f000 fa59 	bl	800136c <SCH_Dispatch_Tasks>
 8000eba:	e7fc      	b.n	8000eb6 <main+0x4e>
 8000ebc:	2000018c 	.word	0x2000018c
 8000ec0:	200000b8 	.word	0x200000b8
 8000ec4:	0800033d 	.word	0x0800033d
 8000ec8:	080014ed 	.word	0x080014ed
 8000ecc:	080005e5 	.word	0x080005e5

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b090      	sub	sp, #64	; 0x40
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	2228      	movs	r2, #40	; 0x28
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 faf2 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efa:	2310      	movs	r3, #16
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f06:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fd7d 	bl	8002a10 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f1c:	f000 f968 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 ffe8 	bl	8002f10 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f46:	f000 f953 	bl	80011f0 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3740      	adds	r7, #64	; 0x40
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <MX_I2C1_Init+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_I2C1_Init+0x58>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f92:	f001 f8a1 	bl	80020d8 <HAL_I2C_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f9c:	f000 f928 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000138 	.word	0x20000138
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	000186a0 	.word	0x000186a0

08000fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fd6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fe4:	2209      	movs	r2, #9
 8000fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_TIM2_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_TIM2_Init+0x94>)
 8000ff6:	f002 f919 	bl	800322c <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001000:	f000 f8f6 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_TIM2_Init+0x94>)
 8001012:	f002 fa9d 	bl	8003550 <HAL_TIM_ConfigClockSource>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800101c:	f000 f8e8 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM2_Init+0x94>)
 800102e:	f002 fc7f 	bl	8003930 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001038:	f000 f8da 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000018c 	.word	0x2000018c

08001048 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_USART2_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001080:	f002 fcc6 	bl	8003a10 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f000 f8b1 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001d4 	.word	0x200001d4
 8001098:	40004400 	.word	0x40004400

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c8:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a3e      	ldr	r2, [pc, #248]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a38      	ldr	r2, [pc, #224]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <MX_GPIO_Init+0x12c>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <MX_GPIO_Init+0x12c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8001116:	482d      	ldr	r0, [pc, #180]	; (80011cc <MX_GPIO_Init+0x130>)
 8001118:	f000 ff8b 	bl	8002032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001122:	482b      	ldr	r0, [pc, #172]	; (80011d0 <MX_GPIO_Init+0x134>)
 8001124:	f000 ff85 	bl	8002032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <MX_GPIO_Init+0x138>)
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4619      	mov	r1, r3
 800113c:	4826      	ldr	r0, [pc, #152]	; (80011d8 <MX_GPIO_Init+0x13c>)
 800113e:	f000 fddd 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON4_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001142:	2313      	movs	r3, #19
 8001144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	481d      	ldr	r0, [pc, #116]	; (80011cc <MX_GPIO_Init+0x130>)
 8001156:	f000 fdd1 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin;
 800115a:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	4816      	ldr	r0, [pc, #88]	; (80011cc <MX_GPIO_Init+0x130>)
 8001174:	f000 fdc2 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <MX_GPIO_Init+0x134>)
 800118c:	f000 fdb6 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001190:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <MX_GPIO_Init+0x134>)
 80011aa:	f000 fda7 	bl	8001cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2028      	movs	r0, #40	; 0x28
 80011b4:	f000 fcb9 	bl	8001b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b8:	2028      	movs	r0, #40	; 0x28
 80011ba:	f000 fcd2 	bl	8001b62 <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	10110000 	.word	0x10110000
 80011d8:	40011000 	.word	0x40011000

080011dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80011e4:	f000 f8b4 	bl	8001350 <SCH_Update>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
uint32_t global_timer = 0;

void SCH_Init(void) {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
    current_index_task = 0;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SCH_Init+0x18>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
    global_timer = 0;
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SCH_Init+0x1c>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	200000c4 	.word	0x200000c4
 8001218:	200000c8 	.word	0x200000c8

0800121c <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
    if (current_index_task < SCH_MAX_TASKS) {
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <SCH_Add_Task+0xb4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b27      	cmp	r3, #39	; 0x27
 800122e:	d84a      	bhi.n	80012c6 <SCH_Add_Task+0xaa>
        SCH_tasks_G[current_index_task].pTask = pFunction;
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <SCH_Add_Task+0xb4>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <SCH_Add_Task+0xb8>)
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <SCH_Add_Task+0xb4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <SCH_Add_Task+0xbc>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	491f      	ldr	r1, [pc, #124]	; (80012d4 <SCH_Add_Task+0xb8>)
 8001258:	4603      	mov	r3, r0
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4403      	add	r3, r0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	3304      	adds	r3, #4
 8001264:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <SCH_Add_Task+0xb4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <SCH_Add_Task+0xbc>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	4917      	ldr	r1, [pc, #92]	; (80012d4 <SCH_Add_Task+0xb8>)
 8001278:	4603      	mov	r3, r0
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4403      	add	r3, r0
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3308      	adds	r3, #8
 8001284:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <SCH_Add_Task+0xb4>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <SCH_Add_Task+0xb8>)
 800128e:	460b      	mov	r3, r1
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	330c      	adds	r3, #12
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <SCH_Add_Task+0xb4>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <SCH_Add_Task+0xb4>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4610      	mov	r0, r2
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SCH_Add_Task+0xb8>)
 80012ac:	460b      	mov	r3, r1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3310      	adds	r3, #16
 80012b8:	6018      	str	r0, [r3, #0]

        ++current_index_task;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SCH_Add_Task+0xb4>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <SCH_Add_Task+0xb4>)
 80012c4:	701a      	strb	r2, [r3, #0]
    }
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	200000c4 	.word	0x200000c4
 80012d4:	2000021c 	.word	0x2000021c
 80012d8:	cccccccd 	.word	0xcccccccd

080012dc <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t ID) {
 80012dc:	b4b0      	push	{r4, r5, r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    if (current_index_task > ID) {
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <SCH_Delete_Task+0x6c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d226      	bcs.n	800133e <SCH_Delete_Task+0x62>
        for (int i = ID; i < current_index_task - 1; ++i) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e017      	b.n	8001326 <SCH_Delete_Task+0x4a>
            SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	4814      	ldr	r0, [pc, #80]	; (800134c <SCH_Delete_Task+0x70>)
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	460b      	mov	r3, r1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4418      	add	r0, r3
 8001308:	4910      	ldr	r1, [pc, #64]	; (800134c <SCH_Delete_Task+0x70>)
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	4604      	mov	r4, r0
 8001316:	461d      	mov	r5, r3
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	6023      	str	r3, [r4, #0]
        for (int i = ID; i < current_index_task - 1; ++i) {
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <SCH_Delete_Task+0x6c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbe1      	blt.n	80012f6 <SCH_Delete_Task+0x1a>
        }
        --current_index_task;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SCH_Delete_Task+0x6c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3b01      	subs	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <SCH_Delete_Task+0x6c>)
 800133c:	701a      	strb	r2, [r3, #0]
    }
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bcb0      	pop	{r4, r5, r7}
 8001346:	4770      	bx	lr
 8001348:	200000c4 	.word	0x200000c4
 800134c:	2000021c 	.word	0x2000021c

08001350 <SCH_Update>:

void SCH_Update(void) {
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
	++global_timer;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SCH_Update+0x18>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a03      	ldr	r2, [pc, #12]	; (8001368 <SCH_Update+0x18>)
 800135c:	6013      	str	r3, [r2, #0]
    if (global_timer > UINT32_MAX) {
    	global_timer = 0;
    }
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200000c8 	.word	0x200000c8

0800136c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; ++i) {
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	e06e      	b.n	8001456 <SCH_Dispatch_Tasks+0xea>
        if (global_timer >= SCH_tasks_G[i].Delay) {//Check if task execute
 8001378:	493c      	ldr	r1, [pc, #240]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	3304      	adds	r3, #4
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <SCH_Dispatch_Tasks+0x104>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d840      	bhi.n	8001414 <SCH_Dispatch_Tasks+0xa8>
            ++SCH_tasks_G[i].RunMe;
 8001392:	4936      	ldr	r1, [pc, #216]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	330c      	adds	r3, #12
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2d8      	uxtb	r0, r3
 80013a8:	4930      	ldr	r1, [pc, #192]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	330c      	adds	r3, #12
 80013b8:	4602      	mov	r2, r0
 80013ba:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period > 0) {
 80013bc:	492b      	ldr	r1, [pc, #172]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3308      	adds	r3, #8
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d01c      	beq.n	800140c <SCH_Dispatch_Tasks+0xa0>
            	if (global_timer + SCH_tasks_G[i].Period <= UINT32_MAX) {
            		SCH_tasks_G[i].Delay += SCH_tasks_G[i].Period;
 80013d2:	4926      	ldr	r1, [pc, #152]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3304      	adds	r3, #4
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	4821      	ldr	r0, [pc, #132]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4403      	add	r3, r0
 80013f2:	3308      	adds	r3, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4419      	add	r1, r3
 80013f8:	481c      	ldr	r0, [pc, #112]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4403      	add	r3, r0
 8001406:	3304      	adds	r3, #4
 8001408:	6019      	str	r1, [r3, #0]
 800140a:	e003      	b.n	8001414 <SCH_Dispatch_Tasks+0xa8>
            		SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period - (UINT32_MAX - SCH_tasks_G[i].Delay);
            		--SCH_tasks_G[i].RunMe;
            	}
            }
            else {
                SCH_Delete_Task(i);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff64 	bl	80012dc <SCH_Delete_Task>
            }
        }
        if (SCH_tasks_G[i].RunMe > 0) {
 8001414:	4915      	ldr	r1, [pc, #84]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	330c      	adds	r3, #12
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d012      	beq.n	8001450 <SCH_Dispatch_Tasks+0xe4>
            SCH_tasks_G[i].RunMe = 0;
 800142a:	4910      	ldr	r1, [pc, #64]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	330c      	adds	r3, #12
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
            (*SCH_tasks_G[i].pTask)();
 800143e:	490b      	ldr	r1, [pc, #44]	; (800146c <SCH_Dispatch_Tasks+0x100>)
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4798      	blx	r3
    for (int i = 0; i < current_index_task; ++i) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <SCH_Dispatch_Tasks+0x108>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4293      	cmp	r3, r2
 8001460:	db8a      	blt.n	8001378 <SCH_Dispatch_Tasks+0xc>
        }
    }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000021c 	.word	0x2000021c
 8001470:	200000c8 	.word	0x200000c8
 8001474:	200000c4 	.word	0x200000c4

08001478 <setTimer>:
#include "global.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value/TICK;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <setTimer+0x34>)
 8001486:	fb82 1203 	smull	r1, r2, r2, r3
 800148a:	1092      	asrs	r2, r2, #2
 800148c:	17db      	asrs	r3, r3, #31
 800148e:	1ad2      	subs	r2, r2, r3
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <setTimer+0x38>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <setTimer+0x3c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2100      	movs	r1, #0
 800149e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	66666667 	.word	0x66666667
 80014b0:	2000053c 	.word	0x2000053c
 80014b4:	20000568 	.word	0x20000568

080014b8 <isTimerExpired>:

int isTimerExpired(int index) {
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 80014c0:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <isTimerExpired+0x30>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <isTimerExpired+0x30>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2100      	movs	r1, #0
 80014d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <isTimerExpired+0x24>
	}
	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000568 	.word	0x20000568

080014ec <timerRun>:

void timerRun() {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	e01c      	b.n	8001532 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <timerRun+0x58>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	2b00      	cmp	r3, #0
 8001502:	dd13      	ble.n	800152c <timerRun+0x40>
			--timer_counter[i];
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <timerRun+0x58>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	490d      	ldr	r1, [pc, #52]	; (8001544 <timerRun+0x58>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <timerRun+0x58>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	2b00      	cmp	r3, #0
 8001520:	dc04      	bgt.n	800152c <timerRun+0x40>
				timer_flag[i] = 1;
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <timerRun+0x5c>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2101      	movs	r1, #1
 8001528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3301      	adds	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0a      	cmp	r3, #10
 8001536:	dddf      	ble.n	80014f8 <timerRun+0xc>
			}
		}
	}
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	2000053c 	.word	0x2000053c
 8001548:	20000568 	.word	0x20000568

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_MspInit+0x5c>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_MspInit+0x5c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x5c>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x5c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x5c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_MspInit+0x60>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_MspInit+0x60>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000

080015b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_I2C_MspInit+0x90>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d132      	bne.n	8001636 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_I2C_MspInit+0x94>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_I2C_MspInit+0x94>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_I2C_MspInit+0x94>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ee:	2312      	movs	r3, #18
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4812      	ldr	r0, [pc, #72]	; (8001648 <HAL_I2C_MspInit+0x98>)
 80015fe:	f000 fb7d 	bl	8001cfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_I2C_MspInit+0x9c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <HAL_I2C_MspInit+0x9c>)
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_I2C_MspInit+0x94>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a08      	ldr	r2, [pc, #32]	; (8001644 <HAL_I2C_MspInit+0x94>)
 8001624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_I2C_MspInit+0x94>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40005400 	.word	0x40005400
 8001644:	40021000 	.word	0x40021000
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40010000 	.word	0x40010000

08001650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	d113      	bne.n	800168a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_TIM_Base_MspInit+0x44>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_TIM_Base_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_TIM_Base_MspInit+0x44>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	201c      	movs	r0, #28
 8001680:	f000 fa53 	bl	8001b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001684:	201c      	movs	r0, #28
 8001686:	f000 fa6c 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d12b      	bne.n	8001710 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_UART_MspInit+0x84>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_UART_MspInit+0x84>)
 80016be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c2:	61d3      	str	r3, [r2, #28]
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_UART_MspInit+0x84>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_UART_MspInit+0x84>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_UART_MspInit+0x84>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_UART_MspInit+0x84>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e8:	230c      	movs	r3, #12
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <HAL_UART_MspInit+0x88>)
 80016fc:	f000 fafe 	bl	8001cfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2026      	movs	r0, #38	; 0x26
 8001706:	f000 fa10 	bl	8001b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800170a:	2026      	movs	r0, #38	; 0x26
 800170c:	f000 fa29 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 f8c7 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <TIM2_IRQHandler+0x10>)
 800177a:	f001 fdf9 	bl	8003370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000018c 	.word	0x2000018c

08001788 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <USART2_IRQHandler+0x10>)
 800178e:	f002 f98f 	bl	8003ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001d4 	.word	0x200001d4

0800179c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a4:	f000 fc76 	bl	8002094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f002 fe4a 	bl	8004474 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20005000 	.word	0x20005000
 800180c:	00000400 	.word	0x00000400
 8001810:	200000cc 	.word	0x200000cc
 8001814:	200005a8 	.word	0x200005a8

08001818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <Reset_Handler>:
 8001824:	f7ff fff8 	bl	8001818 <SystemInit>
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <LoopFillZerobss+0xe>)
 800182a:	490c      	ldr	r1, [pc, #48]	; (800185c <LoopFillZerobss+0x12>)
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <LoopFillZerobss+0x16>)
 800182e:	2300      	movs	r3, #0
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:
 8001832:	58d4      	ldr	r4, [r2, r3]
 8001834:	50c4      	str	r4, [r0, r3]
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:
 8001838:	18c4      	adds	r4, r0, r3
 800183a:	428c      	cmp	r4, r1
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <LoopFillZerobss+0x1a>)
 8001840:	4c09      	ldr	r4, [pc, #36]	; (8001868 <LoopFillZerobss+0x1e>)
 8001842:	2300      	movs	r3, #0
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:
 800184a:	42a2      	cmp	r2, r4
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>
 800184e:	f002 fe17 	bl	8004480 <__libc_init_array>
 8001852:	f7ff fb09 	bl	8000e68 <main>
 8001856:	4770      	bx	lr
 8001858:	20000000 	.word	0x20000000
 800185c:	2000009c 	.word	0x2000009c
 8001860:	08004e38 	.word	0x08004e38
 8001864:	2000009c 	.word	0x2000009c
 8001868:	200005a8 	.word	0x200005a8

0800186c <ADC1_2_IRQHandler>:
 800186c:	e7fe      	b.n	800186c <ADC1_2_IRQHandler>
	...

08001870 <HAL_Init>:
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_Init+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_Init+0x28>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f947 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>
 800188c:	f7ff fe5e 	bl	800154c <HAL_MspInit>
 8001890:	2300      	movs	r3, #0
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000

0800189c <HAL_InitTick>:
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f95f 	bl	8001b7e <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f927 	bl	8001b2a <HAL_NVIC_SetPriority>
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
 80018e6:	2301      	movs	r3, #1
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000002c 	.word	0x2000002c
 80018f4:	20000034 	.word	0x20000034
 80018f8:	20000030 	.word	0x20000030

080018fc <HAL_IncTick>:
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_IncTick+0x1c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_IncTick+0x20>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_IncTick+0x20>)
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000034 	.word	0x20000034
 800191c:	20000594 	.word	0x20000594

08001920 <HAL_GetTick>:
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
 8001924:	4b02      	ldr	r3, [pc, #8]	; (8001930 <HAL_GetTick+0x10>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000594 	.word	0x20000594

08001934 <HAL_Delay>:
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	f7ff fff0 	bl	8001920 <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	bf00      	nop
 800195c:	f7ff ffe0 	bl	8001920 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000034 	.word	0x20000034

0800197c <__NVIC_SetPriorityGrouping>:
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4906      	ldr	r1, [pc, #24]	; (8001a14 <__NVIC_EnableIRQ+0x34>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Config>:
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff90 	bl	8001a18 <__NVIC_SetPriority>
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	2300      	movs	r3, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff2d 	bl	800197c <__NVIC_SetPriorityGrouping>
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	f7ff ff42 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff90 	bl	8001a6c <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5f 	bl	8001a18 <__NVIC_SetPriority>
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff35 	bl	80019e0 <__NVIC_EnableIRQ>
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa2 	bl	8001ad0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_DMA_Abort>:
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d008      	beq.n	8001bc0 <HAL_DMA_Abort+0x2a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2020 	strb.w	r2, [r3, #32]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e020      	b.n	8001c02 <HAL_DMA_Abort+0x6c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 020e 	bic.w	r2, r2, #14
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_DMA_Abort_IT>:
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d005      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x24>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2204      	movs	r2, #4
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e051      	b.n	8001cd4 <HAL_DMA_Abort_IT+0xc8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 020e 	bic.w	r2, r2, #14
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_DMA_Abort_IT+0xd4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d029      	beq.n	8001cae <HAL_DMA_Abort_IT+0xa2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_DMA_Abort_IT+0xd8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort_IT+0x9e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <HAL_DMA_Abort_IT+0xdc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01a      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x98>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_DMA_Abort_IT+0xe0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d012      	beq.n	8001c9e <HAL_DMA_Abort_IT+0x92>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <HAL_DMA_Abort_IT+0xe4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00a      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x8c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_DMA_Abort_IT+0xe8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d102      	bne.n	8001c92 <HAL_DMA_Abort_IT+0x86>
 8001c8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c90:	e00e      	b.n	8001cb0 <HAL_DMA_Abort_IT+0xa4>
 8001c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c96:	e00b      	b.n	8001cb0 <HAL_DMA_Abort_IT+0xa4>
 8001c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c9c:	e008      	b.n	8001cb0 <HAL_DMA_Abort_IT+0xa4>
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	e005      	b.n	8001cb0 <HAL_DMA_Abort_IT+0xa4>
 8001ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca8:	e002      	b.n	8001cb0 <HAL_DMA_Abort_IT+0xa4>
 8001caa:	2310      	movs	r3, #16
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_Abort_IT+0xa4>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_DMA_Abort_IT+0xec>)
 8001cb2:	6053      	str	r3, [r2, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2020 	strb.w	r2, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0xc8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40020008 	.word	0x40020008
 8001ce4:	4002001c 	.word	0x4002001c
 8001ce8:	40020030 	.word	0x40020030
 8001cec:	40020044 	.word	0x40020044
 8001cf0:	40020058 	.word	0x40020058
 8001cf4:	4002006c 	.word	0x4002006c
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_GPIO_Init>:
 8001cfc:	b480      	push	{r7}
 8001cfe:	b08b      	sub	sp, #44	; 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	e169      	b.n	8001fe4 <HAL_GPIO_Init+0x2e8>
 8001d10:	2201      	movs	r2, #1
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8158 	bne.w	8001fde <HAL_GPIO_Init+0x2e2>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a9a      	ldr	r2, [pc, #616]	; (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d38:	4a98      	ldr	r2, [pc, #608]	; (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d875      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d3e:	4a98      	ldr	r2, [pc, #608]	; (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d058      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d44:	4a96      	ldr	r2, [pc, #600]	; (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d86f      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d4a:	4a96      	ldr	r2, [pc, #600]	; (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d052      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d50:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d869      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d56:	4a94      	ldr	r2, [pc, #592]	; (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04c      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a92      	ldr	r2, [pc, #584]	; (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d863      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d62:	4a92      	ldr	r2, [pc, #584]	; (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d046      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d68:	4a90      	ldr	r2, [pc, #576]	; (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d85d      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d82a      	bhi.n	8001dc8 <HAL_GPIO_Init+0xcc>
 8001d72:	2b12      	cmp	r3, #18
 8001d74:	d859      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_GPIO_Init+0x80>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001df7 	.word	0x08001df7
 8001d80:	08001dd1 	.word	0x08001dd1
 8001d84:	08001de3 	.word	0x08001de3
 8001d88:	08001e25 	.word	0x08001e25
 8001d8c:	08001e2b 	.word	0x08001e2b
 8001d90:	08001e2b 	.word	0x08001e2b
 8001d94:	08001e2b 	.word	0x08001e2b
 8001d98:	08001e2b 	.word	0x08001e2b
 8001d9c:	08001e2b 	.word	0x08001e2b
 8001da0:	08001e2b 	.word	0x08001e2b
 8001da4:	08001e2b 	.word	0x08001e2b
 8001da8:	08001e2b 	.word	0x08001e2b
 8001dac:	08001e2b 	.word	0x08001e2b
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e2b 	.word	0x08001e2b
 8001db8:	08001e2b 	.word	0x08001e2b
 8001dbc:	08001e2b 	.word	0x08001e2b
 8001dc0:	08001dd9 	.word	0x08001dd9
 8001dc4:	08001ded 	.word	0x08001ded
 8001dc8:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <HAL_GPIO_Init+0x2b4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001dce:	e02c      	b.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	e029      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	e024      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	3308      	adds	r3, #8
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	e01f      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	330c      	adds	r3, #12
 8001df2:	623b      	str	r3, [r7, #32]
 8001df4:	e01a      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_GPIO_Init+0x108>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	e013      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_GPIO_Init+0x11c>
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	623b      	str	r3, [r7, #32]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	e009      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	615a      	str	r2, [r3, #20]
 8001e22:	e003      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x130>
 8001e2a:	bf00      	nop
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d801      	bhi.n	8001e36 <HAL_GPIO_Init+0x13a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_Init+0x13e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d802      	bhi.n	8001e48 <HAL_GPIO_Init+0x14c>
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x152>
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3b08      	subs	r3, #8
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	210f      	movs	r1, #15
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80b1 	beq.w	8001fde <HAL_GPIO_Init+0x2e2>
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <HAL_GPIO_Init+0x2c0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_GPIO_Init+0x1ec>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <HAL_GPIO_Init+0x2c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3e      	ldr	r2, [pc, #248]	; (8001fc4 <HAL_GPIO_Init+0x2c8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1e4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3d      	ldr	r2, [pc, #244]	; (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1e0>
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e006      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	492f      	ldr	r1, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	492c      	ldr	r1, [pc, #176]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x234>
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4928      	ldr	r1, [pc, #160]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x24e>
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x25c>
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	491e      	ldr	r1, [pc, #120]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x276>
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4918      	ldr	r1, [pc, #96]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x284>
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4914      	ldr	r1, [pc, #80]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d021      	beq.n	8001fd0 <HAL_GPIO_Init+0x2d4>
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e021      	b.n	8001fde <HAL_GPIO_Init+0x2e2>
 8001f9a:	bf00      	nop
 8001f9c:	10320000 	.word	0x10320000
 8001fa0:	10310000 	.word	0x10310000
 8001fa4:	10220000 	.word	0x10220000
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	10110000 	.word	0x10110000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f47f ae8e 	bne.w	8001d10 <HAL_GPIO_Init+0x14>
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	372c      	adds	r7, #44	; 0x2c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_ReadPin>:
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_GPIO_ReadPin+0x1e>
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_ReadPin+0x22>
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_GPIO_WritePin>:
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	707b      	strb	r3, [r7, #1]
 8002042:	787b      	ldrb	r3, [r7, #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_WritePin+0x1e>
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	e003      	b.n	8002058 <HAL_GPIO_WritePin+0x26>
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	041a      	lsls	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_TogglePin>:
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43d9      	mvns	r1, r3
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	400b      	ands	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_GPIO_EXTI_IRQHandler>:
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	6153      	str	r3, [r2, #20]
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f806 	bl	80020c4 <HAL_GPIO_EXTI_Callback>
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_EXTI_Callback>:
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_I2C_Init>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_I2C_Init+0x12>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e12b      	b.n	8002342 <HAL_I2C_Init+0x26a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_I2C_Init+0x2c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fa56 	bl	80015b0 <HAL_I2C_MspInit>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2224      	movs	r2, #36	; 0x24
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f001 f830 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a81      	ldr	r2, [pc, #516]	; (800234c <HAL_I2C_Init+0x274>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d807      	bhi.n	800215c <HAL_I2C_Init+0x84>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a80      	ldr	r2, [pc, #512]	; (8002350 <HAL_I2C_Init+0x278>)
 8002150:	4293      	cmp	r3, r2
 8002152:	bf94      	ite	ls
 8002154:	2301      	movls	r3, #1
 8002156:	2300      	movhi	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e006      	b.n	800216a <HAL_I2C_Init+0x92>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a7d      	ldr	r2, [pc, #500]	; (8002354 <HAL_I2C_Init+0x27c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x9a>
 800216e:	2301      	movs	r3, #1
 8002170:	e0e7      	b.n	8002342 <HAL_I2C_Init+0x26a>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a78      	ldr	r2, [pc, #480]	; (8002358 <HAL_I2C_Init+0x280>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0c9b      	lsrs	r3, r3, #18
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a6a      	ldr	r2, [pc, #424]	; (800234c <HAL_I2C_Init+0x274>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d802      	bhi.n	80021ac <HAL_I2C_Init+0xd4>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	e009      	b.n	80021c0 <HAL_I2C_Init+0xe8>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	4a69      	ldr	r2, [pc, #420]	; (800235c <HAL_I2C_Init+0x284>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	3301      	adds	r3, #1
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	495c      	ldr	r1, [pc, #368]	; (800234c <HAL_I2C_Init+0x274>)
 80021dc:	428b      	cmp	r3, r1
 80021de:	d819      	bhi.n	8002214 <HAL_I2C_Init+0x13c>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e59      	subs	r1, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ee:	1c59      	adds	r1, r3, #1
 80021f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021f4:	400b      	ands	r3, r1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_I2C_Init+0x138>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e59      	subs	r1, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fbb1 f3f3 	udiv	r3, r1, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220e:	e051      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002210:	2304      	movs	r3, #4
 8002212:	e04f      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_I2C_Init+0x168>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e58      	subs	r0, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e012      	b.n	8002266 <HAL_I2C_Init+0x18e>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	0099      	lsls	r1, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Init+0x196>
 800226a:	2301      	movs	r3, #1
 800226c:	e022      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10e      	bne.n	8002294 <HAL_I2C_Init+0x1bc>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e58      	subs	r0, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	440b      	add	r3, r1
 8002284:	fbb0 f3f3 	udiv	r3, r0, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002292:	e00f      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6809      	ldr	r1, [r1, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61cb      	str	r3, [r1, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6911      	ldr	r1, [r2, #16]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68d2      	ldr	r2, [r2, #12]
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	2300      	movs	r3, #0
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	000186a0 	.word	0x000186a0
 8002350:	001e847f 	.word	0x001e847f
 8002354:	003d08ff 	.word	0x003d08ff
 8002358:	431bde83 	.word	0x431bde83
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_I2C_Master_Transmit>:
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	461a      	mov	r2, r3
 800236c:	460b      	mov	r3, r1
 800236e:	817b      	strh	r3, [r7, #10]
 8002370:	4613      	mov	r3, r2
 8002372:	813b      	strh	r3, [r7, #8]
 8002374:	f7ff fad4 	bl	8001920 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	f040 80e0 	bne.w	8002548 <HAL_I2C_Master_Transmit+0x1e8>
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2319      	movs	r3, #25
 800238e:	2201      	movs	r2, #1
 8002390:	4970      	ldr	r1, [pc, #448]	; (8002554 <HAL_I2C_Master_Transmit+0x1f4>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f964 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Master_Transmit+0x42>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0d3      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x50>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e0cc      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d007      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x76>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2221      	movs	r2, #33	; 0x21
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2210      	movs	r2, #16
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	893a      	ldrh	r2, [r7, #8]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_I2C_Master_Transmit+0x1f8>)
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
 8002418:	8979      	ldrh	r1, [r7, #10]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6a3a      	ldr	r2, [r7, #32]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f89c 	bl	800255c <I2C_MasterRequestWrite>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0xce>
 800242a:	2301      	movs	r3, #1
 800242c:	e08d      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	e066      	b.n	8002514 <HAL_I2C_Master_Transmit+0x1b4>
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa22 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <HAL_I2C_Master_Transmit+0x112>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b04      	cmp	r3, #4
 800245c:	d107      	bne.n	800246e <HAL_I2C_Master_Transmit+0x10e>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	2301      	movs	r3, #1
 8002470:	e06b      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11b      	bne.n	80024e8 <HAL_I2C_Master_Transmit+0x188>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_I2C_Master_Transmit+0x188>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa19 	bl	8002924 <I2C_WaitOnBTFFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <HAL_I2C_Master_Transmit+0x1b4>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d107      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x1b0>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	e01a      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d194      	bne.n	8002446 <HAL_I2C_Master_Transmit+0xe6>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 8002548:	2302      	movs	r3, #2
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	00100002 	.word	0x00100002
 8002558:	ffff0000 	.word	0xffff0000

0800255c <I2C_MasterRequestWrite>:
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	817b      	strh	r3, [r7, #10]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d006      	beq.n	8002586 <I2C_MasterRequestWrite+0x2a>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d003      	beq.n	8002586 <I2C_MasterRequestWrite+0x2a>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002584:	d108      	bne.n	8002598 <I2C_MasterRequestWrite+0x3c>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e00b      	b.n	80025b0 <I2C_MasterRequestWrite+0x54>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	2b12      	cmp	r3, #18
 800259e:	d107      	bne.n	80025b0 <I2C_MasterRequestWrite+0x54>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f84f 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00d      	beq.n	80025e4 <I2C_MasterRequestWrite+0x88>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d6:	d103      	bne.n	80025e0 <I2C_MasterRequestWrite+0x84>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
 80025e0:	2303      	movs	r3, #3
 80025e2:	e035      	b.n	8002650 <I2C_MasterRequestWrite+0xf4>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ec:	d108      	bne.n	8002600 <I2C_MasterRequestWrite+0xa4>
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	e01b      	b.n	8002638 <I2C_MasterRequestWrite+0xdc>
 8002600:	897b      	ldrh	r3, [r7, #10]
 8002602:	11db      	asrs	r3, r3, #7
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f003 0306 	and.w	r3, r3, #6
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f063 030f 	orn	r3, r3, #15
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <I2C_MasterRequestWrite+0xfc>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f898 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_MasterRequestWrite+0xd2>
 800262a:	2301      	movs	r3, #1
 800262c:	e010      	b.n	8002650 <I2C_MasterRequestWrite+0xf4>
 800262e:	897b      	ldrh	r3, [r7, #10]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <I2C_MasterRequestWrite+0x100>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f888 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_MasterRequestWrite+0xf2>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <I2C_MasterRequestWrite+0xf4>
 800264e:	2300      	movs	r3, #0
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	00010008 	.word	0x00010008
 800265c:	00010002 	.word	0x00010002

08002660 <I2C_WaitOnFlagUntilTimeout>:
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
 8002670:	e048      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d044      	beq.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
 800267a:	f7ff f951 	bl	8001920 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d139      	bne.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10d      	bne.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	e00c      	b.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	43da      	mvns	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d116      	bne.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002700:	2301      	movs	r3, #1
 8002702:	e023      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0xec>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10d      	bne.n	800272a <I2C_WaitOnFlagUntilTimeout+0xca>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	43da      	mvns	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	e00c      	b.n	8002744 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	43da      	mvns	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	429a      	cmp	r2, r3
 8002748:	d093      	beq.n	8002672 <I2C_WaitOnFlagUntilTimeout+0x12>
 800274a:	2300      	movs	r3, #0
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	e071      	b.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d123      	bne.n	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800278c:	615a      	str	r2, [r3, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027b8:	2301      	movs	r3, #1
 80027ba:	e067      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c2:	d041      	beq.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80027c4:	f7ff f8ac 	bl	8001920 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d136      	bne.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10c      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	e00b      	b.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002844:	2301      	movs	r3, #1
 8002846:	e021      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10c      	bne.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e00b      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f af6d 	bne.w	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800288a:	2300      	movs	r3, #0
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_WaitOnTXEFlagUntilTimeout>:
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	e034      	b.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f886 	bl	80029b4 <I2C_IsAcknowledgeFailed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e034      	b.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d028      	beq.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80028ba:	f7ff f831 	bl	8001920 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11d      	bne.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d016      	beq.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d1c3      	bne.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 800291a:	2300      	movs	r3, #0
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnBTFFlagUntilTimeout>:
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	e034      	b.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f83e 	bl	80029b4 <I2C_IsAcknowledgeFailed>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800293e:	2301      	movs	r3, #1
 8002940:	e034      	b.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d028      	beq.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800294a:	f7fe ffe9 	bl	8001920 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11d      	bne.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b04      	cmp	r3, #4
 800296c:	d016      	beq.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d1c3      	bne.n	8002932 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80029aa:	2300      	movs	r3, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_IsAcknowledgeFailed>:
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d11b      	bne.n	8002a04 <I2C_IsAcknowledgeFailed+0x50>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0204 	orr.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <I2C_IsAcknowledgeFailed+0x52>
 8002a04:	2300      	movs	r3, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_RCC_OscConfig>:
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e26c      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8087 	beq.w	8002b3e <HAL_RCC_OscConfig+0x12e>
 8002a30:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d00c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x46>
 8002a3c:	4b8f      	ldr	r3, [pc, #572]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d112      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
 8002a48:	4b8c      	ldr	r3, [pc, #560]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d10b      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
 8002a56:	4b89      	ldr	r3, [pc, #548]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x12c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d168      	bne.n	8002b3c <HAL_RCC_OscConfig+0x12c>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e246      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x76>
 8002a78:	4b80      	ldr	r3, [pc, #512]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7f      	ldr	r2, [pc, #508]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e02e      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b7b      	ldr	r3, [pc, #492]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b78      	ldr	r3, [pc, #480]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a77      	ldr	r2, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0xbc>
 8002ab2:	4b72      	ldr	r3, [pc, #456]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002acc:	4b6b      	ldr	r3, [pc, #428]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0x104>
 8002aec:	f7fe ff18 	bl	8001920 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xf6>
 8002af4:	f7fe ff14 	bl	8001920 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xf6>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1fa      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe4>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
 8002b14:	f7fe ff04 	bl	8001920 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x11e>
 8002b1c:	f7fe ff00 	bl	8001920 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x11e>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1e6      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002b2e:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x10c>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
 8002b3c:	bf00      	nop
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x202>
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x15e>
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
 8002b62:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
 8002b6e:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1ba      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4939      	ldr	r1, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1d6>
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f7fe feb9 	bl	8001920 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
 8002bb2:	f7fe feb5 	bl	8001920 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e19b      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1a2>
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4927      	ldr	r1, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f7fe fe98 	bl	8001920 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
 8002bf4:	f7fe fe94 	bl	8001920 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e17a      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1e4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03a      	beq.n	8002c94 <HAL_RCC_OscConfig+0x284>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCC_OscConfig+0x24a>
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f7fe fe78 	bl	8001920 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x236>
 8002c34:	f7fe fe74 	bl	8001920 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x236>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e15a      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x224>
 8002c52:	2001      	movs	r0, #1
 8002c54:	f000 facc 	bl	80031f0 <RCC_Delay>
 8002c58:	e01c      	b.n	8002c94 <HAL_RCC_OscConfig+0x284>
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f7fe fe5e 	bl	8001920 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]
 8002c66:	e00f      	b.n	8002c88 <HAL_RCC_OscConfig+0x278>
 8002c68:	f7fe fe5a 	bl	8001920 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d908      	bls.n	8002c88 <HAL_RCC_OscConfig+0x278>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e140      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	42420000 	.word	0x42420000
 8002c84:	42420480 	.word	0x42420480
 8002c88:	4b9e      	ldr	r3, [pc, #632]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e9      	bne.n	8002c68 <HAL_RCC_OscConfig+0x258>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a6 	beq.w	8002dee <HAL_RCC_OscConfig+0x3de>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
 8002ca6:	4b97      	ldr	r3, [pc, #604]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCC_OscConfig+0x2be>
 8002cb2:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a93      	ldr	r2, [pc, #588]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	4b8e      	ldr	r3, [pc, #568]	; (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2fc>
 8002cda:	4b8b      	ldr	r3, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a8a      	ldr	r2, [pc, #552]	; (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	f7fe fe1b 	bl	8001920 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002cee:	f7fe fe17 	bl	8001920 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	; 0x64
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0fd      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002d00:	4b81      	ldr	r3, [pc, #516]	; (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2de>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x312>
 8002d14:	4b7b      	ldr	r3, [pc, #492]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a7a      	ldr	r2, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	e02d      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x334>
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a75      	ldr	r2, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	4b73      	ldr	r3, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a72      	ldr	r2, [pc, #456]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	e01c      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x356>
 8002d4c:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a6c      	ldr	r2, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a69      	ldr	r2, [pc, #420]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6213      	str	r3, [r2, #32]
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d66:	4b67      	ldr	r3, [pc, #412]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a66      	ldr	r2, [pc, #408]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6213      	str	r3, [r2, #32]
 8002d72:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a63      	ldr	r2, [pc, #396]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6213      	str	r3, [r2, #32]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
 8002d86:	f7fe fdcb 	bl	8001920 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x394>
 8002d8e:	f7fe fdc7 	bl	8001920 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x394>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0ab      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002da4:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCC_OscConfig+0x37e>
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_OscConfig+0x3cc>
 8002db2:	f7fe fdb5 	bl	8001920 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
 8002dba:	f7fe fdb1 	bl	8001920 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e095      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_RCC_OscConfig+0x3aa>
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCC_OscConfig+0x3de>
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a47      	ldr	r2, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8081 	beq.w	8002efa <HAL_RCC_OscConfig+0x4ea>
 8002df8:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d061      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4b8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d146      	bne.n	8002e9a <HAL_RCC_OscConfig+0x48a>
 8002e0c:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <HAL_RCC_OscConfig+0x4fc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f7fe fd85 	bl	8001920 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x41c>
 8002e1a:	f7fe fd81 	bl	8001920 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x41c>
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e067      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x40a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d108      	bne.n	8002e54 <HAL_RCC_OscConfig+0x444>
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	492d      	ldr	r1, [pc, #180]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a19      	ldr	r1, [r3, #32]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	430b      	orrs	r3, r1
 8002e66:	4927      	ldr	r1, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x4fc>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f7fe fd55 	bl	8001920 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x47c>
 8002e7a:	f7fe fd51 	bl	8001920 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x47c>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e037      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46a>
 8002e98:	e02f      	b.n	8002efa <HAL_RCC_OscConfig+0x4ea>
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_RCC_OscConfig+0x4fc>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f7fe fd3e 	bl	8001920 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x4aa>
 8002ea8:	f7fe fd3a 	bl	8001920 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x4aa>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e020      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x498>
 8002ec6:	e018      	b.n	8002efa <HAL_RCC_OscConfig+0x4ea>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e013      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x4e6>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x4ea>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002efa:	2300      	movs	r3, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	42420060 	.word	0x42420060

08002f10 <HAL_RCC_ClockConfig>:
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0d0      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d910      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x44>
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	4965      	ldr	r1, [pc, #404]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
 8002f42:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x44>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x92>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x68>
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f76:	6053      	str	r3, [r2, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x80>
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f8e:	6053      	str	r3, [r2, #4]
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d040      	beq.n	8003030 <HAL_RCC_ClockConfig+0x120>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xb6>
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d115      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xce>
 8002fce:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e073      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e06b      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4936      	ldr	r1, [pc, #216]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
 8003000:	f7fe fc8e 	bl	8001920 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x10e>
 8003008:	f7fe fc8a 	bl	8001920 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x10e>
 800301a:	2303      	movs	r3, #3
 800301c:	e053      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xf8>
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d210      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x150>
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x150>
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x16e>
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x18e>
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1cc>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1d0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fbec 	bl	800189c <HAL_InitTick>
 80030c4:	2300      	movs	r3, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08004dd0 	.word	0x08004dd0
 80030dc:	2000002c 	.word	0x2000002c
 80030e0:	20000030 	.word	0x20000030

080030e4 <HAL_RCC_GetSysClockFreq>:
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCC_GetSysClockFreq+0x94>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b04      	cmp	r3, #4
 800310c:	d002      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x30>
 800310e:	2b08      	cmp	r3, #8
 8003110:	d003      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x36>
 8003112:	e027      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x80>
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_RCC_GetSysClockFreq+0x98>)
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	e027      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x86>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0c9b      	lsrs	r3, r3, #18
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d010      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x70>
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_GetSysClockFreq+0x94>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0c5b      	lsrs	r3, r3, #17
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HAL_RCC_GetSysClockFreq+0xa0>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <HAL_RCC_GetSysClockFreq+0x98>)
 8003146:	fb02 f203 	mul.w	r2, r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e004      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x7a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x86>
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetSysClockFreq+0x98>)
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	bf00      	nop
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4618      	mov	r0, r3
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	007a1200 	.word	0x007a1200
 8003180:	08004de8 	.word	0x08004de8
 8003184:	08004df8 	.word	0x08004df8
 8003188:	003d0900 	.word	0x003d0900

0800318c <HAL_RCC_GetHCLKFreq>:
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
 8003190:	4b02      	ldr	r3, [pc, #8]	; (800319c <HAL_RCC_GetHCLKFreq+0x10>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	2000002c 	.word	0x2000002c

080031a0 <HAL_RCC_GetPCLK1Freq>:
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	f7ff fff2 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08004de0 	.word	0x08004de0

080031c8 <HAL_RCC_GetPCLK2Freq>:
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	f7ff ffde 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0adb      	lsrs	r3, r3, #11
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08004de0 	.word	0x08004de0

080031f0 <RCC_Delay>:
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <RCC_Delay+0x34>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <RCC_Delay+0x38>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0a5b      	lsrs	r3, r3, #9
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	bf00      	nop
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	60fa      	str	r2, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <RCC_Delay+0x1c>
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	2000002c 	.word	0x2000002c
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <HAL_TIM_Base_Init>:
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_Base_Init+0x12>
 800323a:	2301      	movs	r3, #1
 800323c:	e041      	b.n	80032c2 <HAL_TIM_Base_Init+0x96>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_Base_Init+0x2c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe f9fc 	bl	8001650 <HAL_TIM_Base_MspInit>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 fa5c 	bl	8003728 <TIM_Base_SetConfig>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032c0:	2300      	movs	r3, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIM_Base_Start_IT>:
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d001      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x18>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e03a      	b.n	800335a <HAL_TIM_Base_Start_IT+0x8e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_TIM_Base_Start_IT+0x98>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x58>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d009      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x58>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <HAL_TIM_Base_Start_IT+0x9c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x58>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <HAL_TIM_Base_Start_IT+0xa0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_TIM_Base_Start_IT+0x7c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d010      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x8c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e007      	b.n	8003358 <HAL_TIM_Base_Start_IT+0x8c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800

08003370 <HAL_TIM_IRQHandler>:
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x64>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x64>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0202 	mvn.w	r2, #2
 80033a4:	611a      	str	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	771a      	strb	r2, [r3, #28]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x52>
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f998 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0x5e>
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f98b 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f99a 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0xb0>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0204 	mvn.w	r2, #4
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	771a      	strb	r2, [r3, #28]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x9e>
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f972 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0xaa>
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f965 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f974 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d020      	beq.n	800346c <HAL_TIM_IRQHandler+0xfc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <HAL_TIM_IRQHandler+0xfc>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0208 	mvn.w	r2, #8
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2204      	movs	r2, #4
 8003442:	771a      	strb	r2, [r3, #28]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0xea>
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f94c 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0xf6>
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f93f 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f94e 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d020      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x148>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x148>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0210 	mvn.w	r2, #16
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2208      	movs	r2, #8
 800348e:	771a      	strb	r2, [r3, #28]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x136>
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f926 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0x142>
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f919 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f928 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_TIM_IRQHandler+0x16c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x16c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0201 	mvn.w	r2, #1
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fe80 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_TIM_IRQHandler+0x190>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_IRQHandler+0x190>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f8:	611a      	str	r2, [r3, #16]
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa7f 	bl	80039fe <HAL_TIMEx_BreakCallback>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_TIM_IRQHandler+0x1b4>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <HAL_TIM_IRQHandler+0x1b4>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800351c:	611a      	str	r2, [r3, #16]
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8f8 	bl	8003714 <HAL_TIM_TriggerCallback>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_TIM_IRQHandler+0x1d8>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_TIM_IRQHandler+0x1d8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0220 	mvn.w	r2, #32
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa52 	bl	80039ec <HAL_TIMEx_CommutCallback>
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_ConfigClockSource>:
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_TIM_ConfigClockSource+0x1c>
 8003568:	2302      	movs	r3, #2
 800356a:	e0b4      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x186>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a4:	d03e      	beq.n	8003624 <HAL_TIM_ConfigClockSource+0xd4>
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035aa:	f200 8087 	bhi.w	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	f000 8086 	beq.w	80036c2 <HAL_TIM_ConfigClockSource+0x172>
 80035b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ba:	d87f      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b70      	cmp	r3, #112	; 0x70
 80035be:	d01a      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0xa6>
 80035c0:	2b70      	cmp	r3, #112	; 0x70
 80035c2:	d87b      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b60      	cmp	r3, #96	; 0x60
 80035c6:	d050      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x11a>
 80035c8:	2b60      	cmp	r3, #96	; 0x60
 80035ca:	d877      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b50      	cmp	r3, #80	; 0x50
 80035ce:	d03c      	beq.n	800364a <HAL_TIM_ConfigClockSource+0xfa>
 80035d0:	2b50      	cmp	r3, #80	; 0x50
 80035d2:	d873      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d058      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x13a>
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d86f      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b30      	cmp	r3, #48	; 0x30
 80035de:	d064      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x15a>
 80035e0:	2b30      	cmp	r3, #48	; 0x30
 80035e2:	d86b      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d060      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x15a>
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d867      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05c      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x15a>
 80035f0:	2b10      	cmp	r3, #16
 80035f2:	d05a      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x15a>
 80035f4:	e062      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x16c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f000 f974 	bl	80038f2 <TIM_ETR_SetConfig>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	e04f      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x174>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	6899      	ldr	r1, [r3, #8]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f000 f95d 	bl	80038f2 <TIM_ETR_SetConfig>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	e03c      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x174>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	461a      	mov	r2, r3
 8003658:	f000 f8d4 	bl	8003804 <TIM_TI1_ConfigInputStage>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2150      	movs	r1, #80	; 0x50
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f92b 	bl	80038be <TIM_ITRx_SetConfig>
 8003668:	e02c      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x174>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	461a      	mov	r2, r3
 8003678:	f000 f8f2 	bl	8003860 <TIM_TI2_ConfigInputStage>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2160      	movs	r1, #96	; 0x60
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f91b 	bl	80038be <TIM_ITRx_SetConfig>
 8003688:	e01c      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x174>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	461a      	mov	r2, r3
 8003698:	f000 f8b4 	bl	8003804 <TIM_TI1_ConfigInputStage>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2140      	movs	r1, #64	; 0x40
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f90b 	bl	80038be <TIM_ITRx_SetConfig>
 80036a8:	e00c      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x174>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f000 f902 	bl	80038be <TIM_ITRx_SetConfig>
 80036ba:	e003      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x174>
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e000      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x174>
 80036c2:	bf00      	nop
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_TIM_OC_DelayElapsedCallback>:
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_IC_CaptureCallback>:
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_TriggerCallback>:
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
	...

08003728 <TIM_Base_SetConfig>:
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <TIM_Base_SetConfig+0xd0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0x30>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0x30>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a2c      	ldr	r2, [pc, #176]	; (80037fc <TIM_Base_SetConfig+0xd4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0x30>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <TIM_Base_SetConfig+0xd8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d108      	bne.n	800376a <TIM_Base_SetConfig+0x42>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <TIM_Base_SetConfig+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00b      	beq.n	800378a <TIM_Base_SetConfig+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d007      	beq.n	800378a <TIM_Base_SetConfig+0x62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <TIM_Base_SetConfig+0xd4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_Base_SetConfig+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <TIM_Base_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d108      	bne.n	800379c <TIM_Base_SetConfig+0x74>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <TIM_Base_SetConfig+0xd0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d103      	bne.n	80037d0 <TIM_Base_SetConfig+0xa8>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	615a      	str	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <TIM_Base_SetConfig+0xc6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f023 0201 	bic.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <TIM_TI1_ConfigInputStage>:
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0201 	bic.w	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 030a 	bic.w	r3, r3, #10
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	619a      	str	r2, [r3, #24]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <TIM_TI2_ConfigInputStage>:
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f023 0210 	bic.w	r2, r3, #16
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	031b      	lsls	r3, r3, #12
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	619a      	str	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	621a      	str	r2, [r3, #32]
 80038b4:	bf00      	nop
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <TIM_ITRx_SetConfig>:
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	f043 0307 	orr.w	r3, r3, #7
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <TIM_ETR_SetConfig>:
 80038f2:	b480      	push	{r7}
 80038f4:	b087      	sub	sp, #28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	021a      	lsls	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	431a      	orrs	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_MasterConfigSynchronization>:
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003944:	2302      	movs	r3, #2
 8003946:	e046      	b.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d009      	beq.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10c      	bne.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039d4:	2300      	movs	r3, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40000400 	.word	0x40000400
 80039e8:	40000800 	.word	0x40000800

080039ec <HAL_TIMEx_CommutCallback>:
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <HAL_TIMEx_BreakCallback>:
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_UART_Init>:
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Init+0x12>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e042      	b.n	8003aa8 <HAL_UART_Init+0x98>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_UART_Init+0x2c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fe2e 	bl	8001698 <HAL_UART_MspInit>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	; 0x24
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fc7f 	bl	8004358 <UART_SetConfig>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a78:	615a      	str	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_UART_IRQHandler>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b0ba      	sub	sp, #232	; 0xe8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <HAL_UART_IRQHandler+0x66>
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_UART_IRQHandler+0x66>
 8003b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_UART_IRQHandler+0x66>
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fb63 	bl	80041da <UART_Receive_IT>
 8003b14:	e25b      	b.n	8003fce <HAL_UART_IRQHandler+0x51e>
 8003b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80de 	beq.w	8003cdc <HAL_UART_IRQHandler+0x22c>
 8003b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <HAL_UART_IRQHandler+0x8a>
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80d1 	beq.w	8003cdc <HAL_UART_IRQHandler+0x22c>
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_UART_IRQHandler+0xae>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0xae>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_UART_IRQHandler+0xd2>
 8003b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_UART_IRQHandler+0xd2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f043 0202 	orr.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xf6>
 8003b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xf6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f043 0204 	orr.w	r2, r3, #4
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d011      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x126>
 8003bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <HAL_UART_IRQHandler+0x11a>
 8003bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x126>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f043 0208 	orr.w	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 81f2 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x514>
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_UART_IRQHandler+0x14e>
 8003bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_UART_IRQHandler+0x14e>
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 faee 	bl	80041da <UART_Receive_IT>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_UART_IRQHandler+0x17a>
 8003c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d04f      	beq.n	8003cca <HAL_UART_IRQHandler+0x21a>
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9f8 	bl	8004020 <UART_EndRxTransfer>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d041      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x212>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3314      	adds	r3, #20
 8003c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3314      	adds	r3, #20
 8003c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1d9      	bne.n	8003c3e <HAL_UART_IRQHandler+0x18e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d013      	beq.n	8003cba <HAL_UART_IRQHandler+0x20a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_UART_IRQHandler+0x3e0>)
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd ffb4 	bl	8001c0c <HAL_DMA_Abort_IT>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x228>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4798      	blx	r3
 8003cb8:	e00e      	b.n	8003cd8 <HAL_UART_IRQHandler+0x228>
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f99c 	bl	8003ff8 <HAL_UART_ErrorCallback>
 8003cc0:	e00a      	b.n	8003cd8 <HAL_UART_IRQHandler+0x228>
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f998 	bl	8003ff8 <HAL_UART_ErrorCallback>
 8003cc8:	e006      	b.n	8003cd8 <HAL_UART_IRQHandler+0x228>
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f994 	bl	8003ff8 <HAL_UART_ErrorCallback>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
 8003cd6:	e175      	b.n	8003fc4 <HAL_UART_IRQHandler+0x514>
 8003cd8:	bf00      	nop
 8003cda:	e173      	b.n	8003fc4 <HAL_UART_IRQHandler+0x514>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f040 814f 	bne.w	8003f84 <HAL_UART_IRQHandler+0x4d4>
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8148 	beq.w	8003f84 <HAL_UART_IRQHandler+0x4d4>
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8141 	beq.w	8003f84 <HAL_UART_IRQHandler+0x4d4>
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80b6 	beq.w	8003e94 <HAL_UART_IRQHandler+0x3e4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8003d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8145 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x518>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d46:	429a      	cmp	r2, r3
 8003d48:	f080 813e 	bcs.w	8003fc8 <HAL_UART_IRQHandler+0x518>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d52:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	f000 8088 	beq.w	8003e70 <HAL_UART_IRQHandler+0x3c0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d8c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1d9      	bne.n	8003d60 <HAL_UART_IRQHandler+0x2b0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3314      	adds	r3, #20
 8003db2:	677b      	str	r3, [r7, #116]	; 0x74
 8003db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	673b      	str	r3, [r7, #112]	; 0x70
 8003dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dd0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dd6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e1      	bne.n	8003dac <HAL_UART_IRQHandler+0x2fc>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3314      	adds	r3, #20
 8003dee:	663b      	str	r3, [r7, #96]	; 0x60
 8003df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	667b      	str	r3, [r7, #100]	; 0x64
 8003e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e3      	bne.n	8003de8 <HAL_UART_IRQHandler+0x338>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e40:	f023 0310 	bic.w	r3, r3, #16
 8003e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e52:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e54:	657b      	str	r3, [r7, #84]	; 0x54
 8003e56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x37e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd fe93 	bl	8001b96 <HAL_DMA_Abort>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	635a      	str	r2, [r3, #52]	; 0x34
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f8bf 	bl	800400a <HAL_UARTEx_RxEventCallback>
 8003e8c:	e09c      	b.n	8003fc8 <HAL_UART_IRQHandler+0x518>
 8003e8e:	bf00      	nop
 8003e90:	080040e5 	.word	0x080040e5
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 808e 	beq.w	8003fcc <HAL_UART_IRQHandler+0x51c>
 8003eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8089 	beq.w	8003fcc <HAL_UART_IRQHandler+0x51c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ede:	647a      	str	r2, [r7, #68]	; 0x44
 8003ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e3      	bne.n	8003eba <HAL_UART_IRQHandler+0x40a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f16:	633a      	str	r2, [r7, #48]	; 0x30
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e3      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x442>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0310 	bic.w	r3, r3, #16
 8003f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f5c:	61fa      	str	r2, [r7, #28]
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	69b9      	ldr	r1, [r7, #24]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e3      	bne.n	8003f38 <HAL_UART_IRQHandler+0x488>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34
 8003f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f844 	bl	800400a <HAL_UARTEx_RxEventCallback>
 8003f82:	e023      	b.n	8003fcc <HAL_UART_IRQHandler+0x51c>
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x4f4>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x4f4>
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8b5 	bl	800410c <UART_Transmit_IT>
 8003fa2:	e014      	b.n	8003fce <HAL_UART_IRQHandler+0x51e>
 8003fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <HAL_UART_IRQHandler+0x51e>
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_UART_IRQHandler+0x51e>
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8f4 	bl	80041aa <UART_EndTransmit_IT>
 8003fc2:	e004      	b.n	8003fce <HAL_UART_IRQHandler+0x51e>
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_UART_IRQHandler+0x51e>
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_UART_IRQHandler+0x51e>
 8003fcc:	bf00      	nop
 8003fce:	37e8      	adds	r7, #232	; 0xe8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_TxCpltCallback>:
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_UART_RxCpltCallback>:
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_UART_ErrorCallback>:
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_UARTEx_RxEventCallback>:
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <UART_EndRxTransfer>:
 8004020:	b480      	push	{r7}
 8004022:	b095      	sub	sp, #84	; 0x54
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
 8004030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004048:	643a      	str	r2, [r7, #64]	; 0x40
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800404e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e5      	bne.n	8004028 <UART_EndRxTransfer+0x8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3314      	adds	r3, #20
 800407a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_EndRxTransfer+0x3c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	2b01      	cmp	r3, #1
 8004096:	d119      	bne.n	80040cc <UART_EndRxTransfer+0xac>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f023 0310 	bic.w	r3, r3, #16
 80040ae:	647b      	str	r3, [r7, #68]	; 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b8:	61ba      	str	r2, [r7, #24]
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	6979      	ldr	r1, [r7, #20]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_EndRxTransfer+0x78>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
 80040da:	bf00      	nop
 80040dc:	3754      	adds	r7, #84	; 0x54
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <UART_DMAAbortOnError>:
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	84da      	strh	r2, [r3, #38]	; 0x26
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff ff7a 	bl	8003ff8 <HAL_UART_ErrorCallback>
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_Transmit_IT>:
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b21      	cmp	r3, #33	; 0x21
 800411e:	d13e      	bne.n	800419e <UART_Transmit_IT+0x92>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d114      	bne.n	8004154 <UART_Transmit_IT+0x48>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <UART_Transmit_IT+0x48>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]
 8004152:	e008      	b.n	8004166 <UART_Transmit_IT+0x5a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	1c59      	adds	r1, r3, #1
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6211      	str	r1, [r2, #32]
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4619      	mov	r1, r3
 8004174:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <UART_Transmit_IT+0x8e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <UART_Transmit_IT+0x94>
 800419e:	2302      	movs	r3, #2
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <UART_EndTransmit_IT>:
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff02 	bl	8003fd4 <HAL_UART_TxCpltCallback>
 80041d0:	2300      	movs	r3, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <UART_Receive_IT>:
 80041da:	b580      	push	{r7, lr}
 80041dc:	b08c      	sub	sp, #48	; 0x30
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b22      	cmp	r3, #34	; 0x22
 80041ec:	f040 80ae 	bne.w	800434c <UART_Receive_IT+0x172>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d117      	bne.n	800422a <UART_Receive_IT+0x50>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d113      	bne.n	800422a <UART_Receive_IT+0x50>
 8004202:	2300      	movs	r3, #0
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004218:	b29a      	uxth	r2, r3
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
 8004228:	e026      	b.n	8004278 <UART_Receive_IT+0x9e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004230:	2300      	movs	r3, #0
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d007      	beq.n	800424e <UART_Receive_IT+0x74>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <UART_Receive_IT+0x82>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <UART_Receive_IT+0x82>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	e008      	b.n	800426e <UART_Receive_IT+0x94>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004268:	b2da      	uxtb	r2, r3
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29b      	uxth	r3, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4619      	mov	r1, r3
 8004286:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004288:	2b00      	cmp	r3, #0
 800428a:	d15d      	bne.n	8004348 <UART_Receive_IT+0x16e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0220 	bic.w	r2, r2, #32
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	615a      	str	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d135      	bne.n	800433e <UART_Receive_IT+0x164>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f023 0310 	bic.w	r3, r3, #16
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	623a      	str	r2, [r7, #32]
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	69f9      	ldr	r1, [r7, #28]
 80042fe:	6a3a      	ldr	r2, [r7, #32]
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e5      	bne.n	80042d8 <UART_Receive_IT+0xfe>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b10      	cmp	r3, #16
 8004318:	d10a      	bne.n	8004330 <UART_Receive_IT+0x156>
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fe67 	bl	800400a <HAL_UARTEx_RxEventCallback>
 800433c:	e002      	b.n	8004344 <UART_Receive_IT+0x16a>
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe51 	bl	8003fe6 <HAL_UART_RxCpltCallback>
 8004344:	2300      	movs	r3, #0
 8004346:	e002      	b.n	800434e <UART_Receive_IT+0x174>
 8004348:	2300      	movs	r3, #0
 800434a:	e000      	b.n	800434e <UART_Receive_IT+0x174>
 800434c:	2302      	movs	r3, #2
 800434e:	4618      	mov	r0, r3
 8004350:	3730      	adds	r7, #48	; 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <UART_SetConfig>:
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	611a      	str	r2, [r3, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004392:	f023 030c 	bic.w	r3, r3, #12
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	430b      	orrs	r3, r1
 800439e:	60d3      	str	r3, [r2, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	615a      	str	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <UART_SetConfig+0x114>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d103      	bne.n	80043c8 <UART_SetConfig+0x70>
 80043c0:	f7fe ff02 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	e002      	b.n	80043ce <UART_SetConfig+0x76>
 80043c8:	f7fe feea 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009a      	lsls	r2, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <UART_SetConfig+0x118>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	0119      	lsls	r1, r3, #4
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fbb2 f2f3 	udiv	r2, r2, r3
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <UART_SetConfig+0x118>)
 8004406:	fba3 0302 	umull	r0, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2064      	movs	r0, #100	; 0x64
 800440e:	fb00 f303 	mul.w	r3, r0, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	3332      	adds	r3, #50	; 0x32
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <UART_SetConfig+0x118>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004424:	4419      	add	r1, r3
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fbb2 f2f3 	udiv	r2, r2, r3
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <UART_SetConfig+0x118>)
 800443e:	fba3 0302 	umull	r0, r3, r3, r2
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	2064      	movs	r0, #100	; 0x64
 8004446:	fb00 f303 	mul.w	r3, r0, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	3332      	adds	r3, #50	; 0x32
 8004450:	4a07      	ldr	r2, [pc, #28]	; (8004470 <UART_SetConfig+0x118>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	440a      	add	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40013800 	.word	0x40013800
 8004470:	51eb851f 	.word	0x51eb851f

08004474 <__errno>:
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <__errno+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000038 	.word	0x20000038

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	2600      	movs	r6, #0
 8004484:	4d0c      	ldr	r5, [pc, #48]	; (80044b8 <__libc_init_array+0x38>)
 8004486:	4c0d      	ldr	r4, [pc, #52]	; (80044bc <__libc_init_array+0x3c>)
 8004488:	1b64      	subs	r4, r4, r5
 800448a:	10a4      	asrs	r4, r4, #2
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	f000 fc70 	bl	8004d74 <_init>
 8004494:	2600      	movs	r6, #0
 8004496:	4d0a      	ldr	r5, [pc, #40]	; (80044c0 <__libc_init_array+0x40>)
 8004498:	4c0a      	ldr	r4, [pc, #40]	; (80044c4 <__libc_init_array+0x44>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	08004e30 	.word	0x08004e30
 80044bc:	08004e30 	.word	0x08004e30
 80044c0:	08004e30 	.word	0x08004e30
 80044c4:	08004e34 	.word	0x08004e34

080044c8 <memset>:
 80044c8:	4603      	mov	r3, r0
 80044ca:	4402      	add	r2, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <sniprintf>:
 80044d8:	b40c      	push	{r2, r3}
 80044da:	b530      	push	{r4, r5, lr}
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <sniprintf+0x64>)
 80044de:	1e0c      	subs	r4, r1, #0
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	b09d      	sub	sp, #116	; 0x74
 80044e4:	da08      	bge.n	80044f8 <sniprintf+0x20>
 80044e6:	238b      	movs	r3, #139	; 0x8b
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	602b      	str	r3, [r5, #0]
 80044ee:	b01d      	add	sp, #116	; 0x74
 80044f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f4:	b002      	add	sp, #8
 80044f6:	4770      	bx	lr
 80044f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80044fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004500:	bf0c      	ite	eq
 8004502:	4623      	moveq	r3, r4
 8004504:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004508:	9304      	str	r3, [sp, #16]
 800450a:	9307      	str	r3, [sp, #28]
 800450c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004510:	9002      	str	r0, [sp, #8]
 8004512:	9006      	str	r0, [sp, #24]
 8004514:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004518:	4628      	mov	r0, r5
 800451a:	ab21      	add	r3, sp, #132	; 0x84
 800451c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800451e:	a902      	add	r1, sp, #8
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	f000 f869 	bl	80045f8 <_svfiprintf_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	bfbc      	itt	lt
 800452a:	238b      	movlt	r3, #139	; 0x8b
 800452c:	602b      	strlt	r3, [r5, #0]
 800452e:	2c00      	cmp	r4, #0
 8004530:	d0dd      	beq.n	80044ee <sniprintf+0x16>
 8004532:	2200      	movs	r2, #0
 8004534:	9b02      	ldr	r3, [sp, #8]
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e7d9      	b.n	80044ee <sniprintf+0x16>
 800453a:	bf00      	nop
 800453c:	20000038 	.word	0x20000038

08004540 <__ssputs_r>:
 8004540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	688e      	ldr	r6, [r1, #8]
 8004546:	4682      	mov	sl, r0
 8004548:	429e      	cmp	r6, r3
 800454a:	460c      	mov	r4, r1
 800454c:	4690      	mov	r8, r2
 800454e:	461f      	mov	r7, r3
 8004550:	d838      	bhi.n	80045c4 <__ssputs_r+0x84>
 8004552:	898a      	ldrh	r2, [r1, #12]
 8004554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004558:	d032      	beq.n	80045c0 <__ssputs_r+0x80>
 800455a:	6825      	ldr	r5, [r4, #0]
 800455c:	6909      	ldr	r1, [r1, #16]
 800455e:	3301      	adds	r3, #1
 8004560:	eba5 0901 	sub.w	r9, r5, r1
 8004564:	6965      	ldr	r5, [r4, #20]
 8004566:	444b      	add	r3, r9
 8004568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800456c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004570:	106d      	asrs	r5, r5, #1
 8004572:	429d      	cmp	r5, r3
 8004574:	bf38      	it	cc
 8004576:	461d      	movcc	r5, r3
 8004578:	0553      	lsls	r3, r2, #21
 800457a:	d531      	bpl.n	80045e0 <__ssputs_r+0xa0>
 800457c:	4629      	mov	r1, r5
 800457e:	f000 fb53 	bl	8004c28 <_malloc_r>
 8004582:	4606      	mov	r6, r0
 8004584:	b950      	cbnz	r0, 800459c <__ssputs_r+0x5c>
 8004586:	230c      	movs	r3, #12
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	f8ca 3000 	str.w	r3, [sl]
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459c:	464a      	mov	r2, r9
 800459e:	6921      	ldr	r1, [r4, #16]
 80045a0:	f000 face 	bl	8004b40 <memcpy>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	6126      	str	r6, [r4, #16]
 80045b2:	444e      	add	r6, r9
 80045b4:	6026      	str	r6, [r4, #0]
 80045b6:	463e      	mov	r6, r7
 80045b8:	6165      	str	r5, [r4, #20]
 80045ba:	eba5 0509 	sub.w	r5, r5, r9
 80045be:	60a5      	str	r5, [r4, #8]
 80045c0:	42be      	cmp	r6, r7
 80045c2:	d900      	bls.n	80045c6 <__ssputs_r+0x86>
 80045c4:	463e      	mov	r6, r7
 80045c6:	4632      	mov	r2, r6
 80045c8:	4641      	mov	r1, r8
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	f000 fac6 	bl	8004b5c <memmove>
 80045d0:	68a3      	ldr	r3, [r4, #8]
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	1b9b      	subs	r3, r3, r6
 80045d6:	4432      	add	r2, r6
 80045d8:	2000      	movs	r0, #0
 80045da:	60a3      	str	r3, [r4, #8]
 80045dc:	6022      	str	r2, [r4, #0]
 80045de:	e7db      	b.n	8004598 <__ssputs_r+0x58>
 80045e0:	462a      	mov	r2, r5
 80045e2:	f000 fb7b 	bl	8004cdc <_realloc_r>
 80045e6:	4606      	mov	r6, r0
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d1e1      	bne.n	80045b0 <__ssputs_r+0x70>
 80045ec:	4650      	mov	r0, sl
 80045ee:	6921      	ldr	r1, [r4, #16]
 80045f0:	f000 face 	bl	8004b90 <_free_r>
 80045f4:	e7c7      	b.n	8004586 <__ssputs_r+0x46>
	...

080045f8 <_svfiprintf_r>:
 80045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fc:	4698      	mov	r8, r3
 80045fe:	898b      	ldrh	r3, [r1, #12]
 8004600:	4607      	mov	r7, r0
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	460d      	mov	r5, r1
 8004606:	4614      	mov	r4, r2
 8004608:	b09d      	sub	sp, #116	; 0x74
 800460a:	d50e      	bpl.n	800462a <_svfiprintf_r+0x32>
 800460c:	690b      	ldr	r3, [r1, #16]
 800460e:	b963      	cbnz	r3, 800462a <_svfiprintf_r+0x32>
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	f000 fb09 	bl	8004c28 <_malloc_r>
 8004616:	6028      	str	r0, [r5, #0]
 8004618:	6128      	str	r0, [r5, #16]
 800461a:	b920      	cbnz	r0, 8004626 <_svfiprintf_r+0x2e>
 800461c:	230c      	movs	r3, #12
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	e0d1      	b.n	80047ca <_svfiprintf_r+0x1d2>
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	616b      	str	r3, [r5, #20]
 800462a:	2300      	movs	r3, #0
 800462c:	9309      	str	r3, [sp, #36]	; 0x24
 800462e:	2320      	movs	r3, #32
 8004630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004634:	2330      	movs	r3, #48	; 0x30
 8004636:	f04f 0901 	mov.w	r9, #1
 800463a:	f8cd 800c 	str.w	r8, [sp, #12]
 800463e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047e4 <_svfiprintf_r+0x1ec>
 8004642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004646:	4623      	mov	r3, r4
 8004648:	469a      	mov	sl, r3
 800464a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800464e:	b10a      	cbz	r2, 8004654 <_svfiprintf_r+0x5c>
 8004650:	2a25      	cmp	r2, #37	; 0x25
 8004652:	d1f9      	bne.n	8004648 <_svfiprintf_r+0x50>
 8004654:	ebba 0b04 	subs.w	fp, sl, r4
 8004658:	d00b      	beq.n	8004672 <_svfiprintf_r+0x7a>
 800465a:	465b      	mov	r3, fp
 800465c:	4622      	mov	r2, r4
 800465e:	4629      	mov	r1, r5
 8004660:	4638      	mov	r0, r7
 8004662:	f7ff ff6d 	bl	8004540 <__ssputs_r>
 8004666:	3001      	adds	r0, #1
 8004668:	f000 80aa 	beq.w	80047c0 <_svfiprintf_r+0x1c8>
 800466c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800466e:	445a      	add	r2, fp
 8004670:	9209      	str	r2, [sp, #36]	; 0x24
 8004672:	f89a 3000 	ldrb.w	r3, [sl]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80a2 	beq.w	80047c0 <_svfiprintf_r+0x1c8>
 800467c:	2300      	movs	r3, #0
 800467e:	f04f 32ff 	mov.w	r2, #4294967295
 8004682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004686:	f10a 0a01 	add.w	sl, sl, #1
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	9307      	str	r3, [sp, #28]
 800468e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004692:	931a      	str	r3, [sp, #104]	; 0x68
 8004694:	4654      	mov	r4, sl
 8004696:	2205      	movs	r2, #5
 8004698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800469c:	4851      	ldr	r0, [pc, #324]	; (80047e4 <_svfiprintf_r+0x1ec>)
 800469e:	f000 fa41 	bl	8004b24 <memchr>
 80046a2:	9a04      	ldr	r2, [sp, #16]
 80046a4:	b9d8      	cbnz	r0, 80046de <_svfiprintf_r+0xe6>
 80046a6:	06d0      	lsls	r0, r2, #27
 80046a8:	bf44      	itt	mi
 80046aa:	2320      	movmi	r3, #32
 80046ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046b0:	0711      	lsls	r1, r2, #28
 80046b2:	bf44      	itt	mi
 80046b4:	232b      	movmi	r3, #43	; 0x2b
 80046b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ba:	f89a 3000 	ldrb.w	r3, [sl]
 80046be:	2b2a      	cmp	r3, #42	; 0x2a
 80046c0:	d015      	beq.n	80046ee <_svfiprintf_r+0xf6>
 80046c2:	4654      	mov	r4, sl
 80046c4:	2000      	movs	r0, #0
 80046c6:	f04f 0c0a 	mov.w	ip, #10
 80046ca:	9a07      	ldr	r2, [sp, #28]
 80046cc:	4621      	mov	r1, r4
 80046ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046d2:	3b30      	subs	r3, #48	; 0x30
 80046d4:	2b09      	cmp	r3, #9
 80046d6:	d94e      	bls.n	8004776 <_svfiprintf_r+0x17e>
 80046d8:	b1b0      	cbz	r0, 8004708 <_svfiprintf_r+0x110>
 80046da:	9207      	str	r2, [sp, #28]
 80046dc:	e014      	b.n	8004708 <_svfiprintf_r+0x110>
 80046de:	eba0 0308 	sub.w	r3, r0, r8
 80046e2:	fa09 f303 	lsl.w	r3, r9, r3
 80046e6:	4313      	orrs	r3, r2
 80046e8:	46a2      	mov	sl, r4
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	e7d2      	b.n	8004694 <_svfiprintf_r+0x9c>
 80046ee:	9b03      	ldr	r3, [sp, #12]
 80046f0:	1d19      	adds	r1, r3, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	9103      	str	r1, [sp, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bfbb      	ittet	lt
 80046fa:	425b      	neglt	r3, r3
 80046fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004700:	9307      	strge	r3, [sp, #28]
 8004702:	9307      	strlt	r3, [sp, #28]
 8004704:	bfb8      	it	lt
 8004706:	9204      	strlt	r2, [sp, #16]
 8004708:	7823      	ldrb	r3, [r4, #0]
 800470a:	2b2e      	cmp	r3, #46	; 0x2e
 800470c:	d10c      	bne.n	8004728 <_svfiprintf_r+0x130>
 800470e:	7863      	ldrb	r3, [r4, #1]
 8004710:	2b2a      	cmp	r3, #42	; 0x2a
 8004712:	d135      	bne.n	8004780 <_svfiprintf_r+0x188>
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	3402      	adds	r4, #2
 8004718:	1d1a      	adds	r2, r3, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	9203      	str	r2, [sp, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfb8      	it	lt
 8004722:	f04f 33ff 	movlt.w	r3, #4294967295
 8004726:	9305      	str	r3, [sp, #20]
 8004728:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047f4 <_svfiprintf_r+0x1fc>
 800472c:	2203      	movs	r2, #3
 800472e:	4650      	mov	r0, sl
 8004730:	7821      	ldrb	r1, [r4, #0]
 8004732:	f000 f9f7 	bl	8004b24 <memchr>
 8004736:	b140      	cbz	r0, 800474a <_svfiprintf_r+0x152>
 8004738:	2340      	movs	r3, #64	; 0x40
 800473a:	eba0 000a 	sub.w	r0, r0, sl
 800473e:	fa03 f000 	lsl.w	r0, r3, r0
 8004742:	9b04      	ldr	r3, [sp, #16]
 8004744:	3401      	adds	r4, #1
 8004746:	4303      	orrs	r3, r0
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800474e:	2206      	movs	r2, #6
 8004750:	4825      	ldr	r0, [pc, #148]	; (80047e8 <_svfiprintf_r+0x1f0>)
 8004752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004756:	f000 f9e5 	bl	8004b24 <memchr>
 800475a:	2800      	cmp	r0, #0
 800475c:	d038      	beq.n	80047d0 <_svfiprintf_r+0x1d8>
 800475e:	4b23      	ldr	r3, [pc, #140]	; (80047ec <_svfiprintf_r+0x1f4>)
 8004760:	bb1b      	cbnz	r3, 80047aa <_svfiprintf_r+0x1b2>
 8004762:	9b03      	ldr	r3, [sp, #12]
 8004764:	3307      	adds	r3, #7
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	3308      	adds	r3, #8
 800476c:	9303      	str	r3, [sp, #12]
 800476e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004770:	4433      	add	r3, r6
 8004772:	9309      	str	r3, [sp, #36]	; 0x24
 8004774:	e767      	b.n	8004646 <_svfiprintf_r+0x4e>
 8004776:	460c      	mov	r4, r1
 8004778:	2001      	movs	r0, #1
 800477a:	fb0c 3202 	mla	r2, ip, r2, r3
 800477e:	e7a5      	b.n	80046cc <_svfiprintf_r+0xd4>
 8004780:	2300      	movs	r3, #0
 8004782:	f04f 0c0a 	mov.w	ip, #10
 8004786:	4619      	mov	r1, r3
 8004788:	3401      	adds	r4, #1
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	4620      	mov	r0, r4
 800478e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004792:	3a30      	subs	r2, #48	; 0x30
 8004794:	2a09      	cmp	r2, #9
 8004796:	d903      	bls.n	80047a0 <_svfiprintf_r+0x1a8>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0c5      	beq.n	8004728 <_svfiprintf_r+0x130>
 800479c:	9105      	str	r1, [sp, #20]
 800479e:	e7c3      	b.n	8004728 <_svfiprintf_r+0x130>
 80047a0:	4604      	mov	r4, r0
 80047a2:	2301      	movs	r3, #1
 80047a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80047a8:	e7f0      	b.n	800478c <_svfiprintf_r+0x194>
 80047aa:	ab03      	add	r3, sp, #12
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	462a      	mov	r2, r5
 80047b0:	4638      	mov	r0, r7
 80047b2:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <_svfiprintf_r+0x1f8>)
 80047b4:	a904      	add	r1, sp, #16
 80047b6:	f3af 8000 	nop.w
 80047ba:	1c42      	adds	r2, r0, #1
 80047bc:	4606      	mov	r6, r0
 80047be:	d1d6      	bne.n	800476e <_svfiprintf_r+0x176>
 80047c0:	89ab      	ldrh	r3, [r5, #12]
 80047c2:	065b      	lsls	r3, r3, #25
 80047c4:	f53f af2c 	bmi.w	8004620 <_svfiprintf_r+0x28>
 80047c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ca:	b01d      	add	sp, #116	; 0x74
 80047cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d0:	ab03      	add	r3, sp, #12
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	462a      	mov	r2, r5
 80047d6:	4638      	mov	r0, r7
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <_svfiprintf_r+0x1f8>)
 80047da:	a904      	add	r1, sp, #16
 80047dc:	f000 f87c 	bl	80048d8 <_printf_i>
 80047e0:	e7eb      	b.n	80047ba <_svfiprintf_r+0x1c2>
 80047e2:	bf00      	nop
 80047e4:	08004dfa 	.word	0x08004dfa
 80047e8:	08004e04 	.word	0x08004e04
 80047ec:	00000000 	.word	0x00000000
 80047f0:	08004541 	.word	0x08004541
 80047f4:	08004e00 	.word	0x08004e00

080047f8 <_printf_common>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	4616      	mov	r6, r2
 80047fe:	4699      	mov	r9, r3
 8004800:	688a      	ldr	r2, [r1, #8]
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	4607      	mov	r7, r0
 8004806:	4293      	cmp	r3, r2
 8004808:	bfb8      	it	lt
 800480a:	4613      	movlt	r3, r2
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004812:	460c      	mov	r4, r1
 8004814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004818:	b10a      	cbz	r2, 800481e <_printf_common+0x26>
 800481a:	3301      	adds	r3, #1
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	0699      	lsls	r1, r3, #26
 8004822:	bf42      	ittt	mi
 8004824:	6833      	ldrmi	r3, [r6, #0]
 8004826:	3302      	addmi	r3, #2
 8004828:	6033      	strmi	r3, [r6, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	f015 0506 	ands.w	r5, r5, #6
 8004830:	d106      	bne.n	8004840 <_printf_common+0x48>
 8004832:	f104 0a19 	add.w	sl, r4, #25
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	6832      	ldr	r2, [r6, #0]
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	42ab      	cmp	r3, r5
 800483e:	dc28      	bgt.n	8004892 <_printf_common+0x9a>
 8004840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004844:	1e13      	subs	r3, r2, #0
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	bf18      	it	ne
 800484a:	2301      	movne	r3, #1
 800484c:	0692      	lsls	r2, r2, #26
 800484e:	d42d      	bmi.n	80048ac <_printf_common+0xb4>
 8004850:	4649      	mov	r1, r9
 8004852:	4638      	mov	r0, r7
 8004854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004858:	47c0      	blx	r8
 800485a:	3001      	adds	r0, #1
 800485c:	d020      	beq.n	80048a0 <_printf_common+0xa8>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	68e5      	ldr	r5, [r4, #12]
 8004862:	f003 0306 	and.w	r3, r3, #6
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf18      	it	ne
 800486a:	2500      	movne	r5, #0
 800486c:	6832      	ldr	r2, [r6, #0]
 800486e:	f04f 0600 	mov.w	r6, #0
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	bf08      	it	eq
 8004876:	1aad      	subeq	r5, r5, r2
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	bf08      	it	eq
 800487c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004880:	4293      	cmp	r3, r2
 8004882:	bfc4      	itt	gt
 8004884:	1a9b      	subgt	r3, r3, r2
 8004886:	18ed      	addgt	r5, r5, r3
 8004888:	341a      	adds	r4, #26
 800488a:	42b5      	cmp	r5, r6
 800488c:	d11a      	bne.n	80048c4 <_printf_common+0xcc>
 800488e:	2000      	movs	r0, #0
 8004890:	e008      	b.n	80048a4 <_printf_common+0xac>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4649      	mov	r1, r9
 8004898:	4638      	mov	r0, r7
 800489a:	47c0      	blx	r8
 800489c:	3001      	adds	r0, #1
 800489e:	d103      	bne.n	80048a8 <_printf_common+0xb0>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7c4      	b.n	8004836 <_printf_common+0x3e>
 80048ac:	2030      	movs	r0, #48	; 0x30
 80048ae:	18e1      	adds	r1, r4, r3
 80048b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ba:	4422      	add	r2, r4
 80048bc:	3302      	adds	r3, #2
 80048be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c2:	e7c5      	b.n	8004850 <_printf_common+0x58>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4622      	mov	r2, r4
 80048c8:	4649      	mov	r1, r9
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa8>
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7d9      	b.n	800488a <_printf_common+0x92>
	...

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	460c      	mov	r4, r1
 80048de:	7e27      	ldrb	r7, [r4, #24]
 80048e0:	4691      	mov	r9, r2
 80048e2:	2f78      	cmp	r7, #120	; 0x78
 80048e4:	4680      	mov	r8, r0
 80048e6:	469a      	mov	sl, r3
 80048e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	; 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d9 	beq.w	8004aac <_printf_i+0x1d4>
 80048fa:	2f58      	cmp	r7, #88	; 0x58
 80048fc:	f000 80a4 	beq.w	8004a48 <_printf_i+0x170>
 8004900:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a001      	add	r0, pc, #4	; (adr r0, 8004918 <_printf_i+0x40>)
 8004914:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a93 	.word	0x08004a93
 8004948:	080049b5 	.word	0x080049b5
 800494c:	08004a75 	.word	0x08004a75
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004ab5 	.word	0x08004ab5
 800495c:	08004901 	.word	0x08004901
 8004960:	080049b5 	.word	0x080049b5
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a7d 	.word	0x08004a7d
 8004970:	680b      	ldr	r3, [r1, #0]
 8004972:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004976:	1d1a      	adds	r2, r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	600a      	str	r2, [r1, #0]
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e0a4      	b.n	8004ace <_printf_i+0x1f6>
 8004984:	6825      	ldr	r5, [r4, #0]
 8004986:	6808      	ldr	r0, [r1, #0]
 8004988:	062e      	lsls	r6, r5, #24
 800498a:	f100 0304 	add.w	r3, r0, #4
 800498e:	d50a      	bpl.n	80049a6 <_printf_i+0xce>
 8004990:	6805      	ldr	r5, [r0, #0]
 8004992:	600b      	str	r3, [r1, #0]
 8004994:	2d00      	cmp	r5, #0
 8004996:	da03      	bge.n	80049a0 <_printf_i+0xc8>
 8004998:	232d      	movs	r3, #45	; 0x2d
 800499a:	426d      	negs	r5, r5
 800499c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a0:	230a      	movs	r3, #10
 80049a2:	485e      	ldr	r0, [pc, #376]	; (8004b1c <_printf_i+0x244>)
 80049a4:	e019      	b.n	80049da <_printf_i+0x102>
 80049a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049aa:	6805      	ldr	r5, [r0, #0]
 80049ac:	600b      	str	r3, [r1, #0]
 80049ae:	bf18      	it	ne
 80049b0:	b22d      	sxthne	r5, r5
 80049b2:	e7ef      	b.n	8004994 <_printf_i+0xbc>
 80049b4:	680b      	ldr	r3, [r1, #0]
 80049b6:	6825      	ldr	r5, [r4, #0]
 80049b8:	1d18      	adds	r0, r3, #4
 80049ba:	6008      	str	r0, [r1, #0]
 80049bc:	0628      	lsls	r0, r5, #24
 80049be:	d501      	bpl.n	80049c4 <_printf_i+0xec>
 80049c0:	681d      	ldr	r5, [r3, #0]
 80049c2:	e002      	b.n	80049ca <_printf_i+0xf2>
 80049c4:	0669      	lsls	r1, r5, #25
 80049c6:	d5fb      	bpl.n	80049c0 <_printf_i+0xe8>
 80049c8:	881d      	ldrh	r5, [r3, #0]
 80049ca:	2f6f      	cmp	r7, #111	; 0x6f
 80049cc:	bf0c      	ite	eq
 80049ce:	2308      	moveq	r3, #8
 80049d0:	230a      	movne	r3, #10
 80049d2:	4852      	ldr	r0, [pc, #328]	; (8004b1c <_printf_i+0x244>)
 80049d4:	2100      	movs	r1, #0
 80049d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049da:	6866      	ldr	r6, [r4, #4]
 80049dc:	2e00      	cmp	r6, #0
 80049de:	bfa8      	it	ge
 80049e0:	6821      	ldrge	r1, [r4, #0]
 80049e2:	60a6      	str	r6, [r4, #8]
 80049e4:	bfa4      	itt	ge
 80049e6:	f021 0104 	bicge.w	r1, r1, #4
 80049ea:	6021      	strge	r1, [r4, #0]
 80049ec:	b90d      	cbnz	r5, 80049f2 <_printf_i+0x11a>
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	d04d      	beq.n	8004a8e <_printf_i+0x1b6>
 80049f2:	4616      	mov	r6, r2
 80049f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049f8:	fb03 5711 	mls	r7, r3, r1, r5
 80049fc:	5dc7      	ldrb	r7, [r0, r7]
 80049fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a02:	462f      	mov	r7, r5
 8004a04:	42bb      	cmp	r3, r7
 8004a06:	460d      	mov	r5, r1
 8004a08:	d9f4      	bls.n	80049f4 <_printf_i+0x11c>
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d10b      	bne.n	8004a26 <_printf_i+0x14e>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	07df      	lsls	r7, r3, #31
 8004a12:	d508      	bpl.n	8004a26 <_printf_i+0x14e>
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	6861      	ldr	r1, [r4, #4]
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	bfde      	ittt	le
 8004a1c:	2330      	movle	r3, #48	; 0x30
 8004a1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a26:	1b92      	subs	r2, r2, r6
 8004a28:	6122      	str	r2, [r4, #16]
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f8cd a000 	str.w	sl, [sp]
 8004a34:	aa03      	add	r2, sp, #12
 8004a36:	f7ff fedf 	bl	80047f8 <_printf_common>
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d14c      	bne.n	8004ad8 <_printf_i+0x200>
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a42:	b004      	add	sp, #16
 8004a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a48:	4834      	ldr	r0, [pc, #208]	; (8004b1c <_printf_i+0x244>)
 8004a4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a4e:	680e      	ldr	r6, [r1, #0]
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a56:	061f      	lsls	r7, r3, #24
 8004a58:	600e      	str	r6, [r1, #0]
 8004a5a:	d514      	bpl.n	8004a86 <_printf_i+0x1ae>
 8004a5c:	07d9      	lsls	r1, r3, #31
 8004a5e:	bf44      	itt	mi
 8004a60:	f043 0320 	orrmi.w	r3, r3, #32
 8004a64:	6023      	strmi	r3, [r4, #0]
 8004a66:	b91d      	cbnz	r5, 8004a70 <_printf_i+0x198>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f023 0320 	bic.w	r3, r3, #32
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	2310      	movs	r3, #16
 8004a72:	e7af      	b.n	80049d4 <_printf_i+0xfc>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	f043 0320 	orr.w	r3, r3, #32
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	2378      	movs	r3, #120	; 0x78
 8004a7e:	4828      	ldr	r0, [pc, #160]	; (8004b20 <_printf_i+0x248>)
 8004a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a84:	e7e3      	b.n	8004a4e <_printf_i+0x176>
 8004a86:	065e      	lsls	r6, r3, #25
 8004a88:	bf48      	it	mi
 8004a8a:	b2ad      	uxthmi	r5, r5
 8004a8c:	e7e6      	b.n	8004a5c <_printf_i+0x184>
 8004a8e:	4616      	mov	r6, r2
 8004a90:	e7bb      	b.n	8004a0a <_printf_i+0x132>
 8004a92:	680b      	ldr	r3, [r1, #0]
 8004a94:	6826      	ldr	r6, [r4, #0]
 8004a96:	1d1d      	adds	r5, r3, #4
 8004a98:	6960      	ldr	r0, [r4, #20]
 8004a9a:	600d      	str	r5, [r1, #0]
 8004a9c:	0635      	lsls	r5, r6, #24
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	d501      	bpl.n	8004aa6 <_printf_i+0x1ce>
 8004aa2:	6018      	str	r0, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <_printf_i+0x1d4>
 8004aa6:	0671      	lsls	r1, r6, #25
 8004aa8:	d5fb      	bpl.n	8004aa2 <_printf_i+0x1ca>
 8004aaa:	8018      	strh	r0, [r3, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	4616      	mov	r6, r2
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	e7ba      	b.n	8004a2a <_printf_i+0x152>
 8004ab4:	680b      	ldr	r3, [r1, #0]
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	600a      	str	r2, [r1, #0]
 8004aba:	681e      	ldr	r6, [r3, #0]
 8004abc:	2100      	movs	r1, #0
 8004abe:	4630      	mov	r0, r6
 8004ac0:	6862      	ldr	r2, [r4, #4]
 8004ac2:	f000 f82f 	bl	8004b24 <memchr>
 8004ac6:	b108      	cbz	r0, 8004acc <_printf_i+0x1f4>
 8004ac8:	1b80      	subs	r0, r0, r6
 8004aca:	6060      	str	r0, [r4, #4]
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad6:	e7a8      	b.n	8004a2a <_printf_i+0x152>
 8004ad8:	4632      	mov	r2, r6
 8004ada:	4649      	mov	r1, r9
 8004adc:	4640      	mov	r0, r8
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	47d0      	blx	sl
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d0ab      	beq.n	8004a3e <_printf_i+0x166>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	079b      	lsls	r3, r3, #30
 8004aea:	d413      	bmi.n	8004b14 <_printf_i+0x23c>
 8004aec:	68e0      	ldr	r0, [r4, #12]
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	4298      	cmp	r0, r3
 8004af2:	bfb8      	it	lt
 8004af4:	4618      	movlt	r0, r3
 8004af6:	e7a4      	b.n	8004a42 <_printf_i+0x16a>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4632      	mov	r2, r6
 8004afc:	4649      	mov	r1, r9
 8004afe:	4640      	mov	r0, r8
 8004b00:	47d0      	blx	sl
 8004b02:	3001      	adds	r0, #1
 8004b04:	d09b      	beq.n	8004a3e <_printf_i+0x166>
 8004b06:	3501      	adds	r5, #1
 8004b08:	68e3      	ldr	r3, [r4, #12]
 8004b0a:	9903      	ldr	r1, [sp, #12]
 8004b0c:	1a5b      	subs	r3, r3, r1
 8004b0e:	42ab      	cmp	r3, r5
 8004b10:	dcf2      	bgt.n	8004af8 <_printf_i+0x220>
 8004b12:	e7eb      	b.n	8004aec <_printf_i+0x214>
 8004b14:	2500      	movs	r5, #0
 8004b16:	f104 0619 	add.w	r6, r4, #25
 8004b1a:	e7f5      	b.n	8004b08 <_printf_i+0x230>
 8004b1c:	08004e0b 	.word	0x08004e0b
 8004b20:	08004e1c 	.word	0x08004e1c

08004b24 <memchr>:
 8004b24:	4603      	mov	r3, r0
 8004b26:	b510      	push	{r4, lr}
 8004b28:	b2c9      	uxtb	r1, r1
 8004b2a:	4402      	add	r2, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	d101      	bne.n	8004b36 <memchr+0x12>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e003      	b.n	8004b3e <memchr+0x1a>
 8004b36:	7804      	ldrb	r4, [r0, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	428c      	cmp	r4, r1
 8004b3c:	d1f6      	bne.n	8004b2c <memchr+0x8>
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <memcpy>:
 8004b40:	440a      	add	r2, r1
 8004b42:	4291      	cmp	r1, r2
 8004b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b48:	d100      	bne.n	8004b4c <memcpy+0xc>
 8004b4a:	4770      	bx	lr
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b52:	4291      	cmp	r1, r2
 8004b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b58:	d1f9      	bne.n	8004b4e <memcpy+0xe>
 8004b5a:	bd10      	pop	{r4, pc}

08004b5c <memmove>:
 8004b5c:	4288      	cmp	r0, r1
 8004b5e:	b510      	push	{r4, lr}
 8004b60:	eb01 0402 	add.w	r4, r1, r2
 8004b64:	d902      	bls.n	8004b6c <memmove+0x10>
 8004b66:	4284      	cmp	r4, r0
 8004b68:	4623      	mov	r3, r4
 8004b6a:	d807      	bhi.n	8004b7c <memmove+0x20>
 8004b6c:	1e43      	subs	r3, r0, #1
 8004b6e:	42a1      	cmp	r1, r4
 8004b70:	d008      	beq.n	8004b84 <memmove+0x28>
 8004b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b7a:	e7f8      	b.n	8004b6e <memmove+0x12>
 8004b7c:	4601      	mov	r1, r0
 8004b7e:	4402      	add	r2, r0
 8004b80:	428a      	cmp	r2, r1
 8004b82:	d100      	bne.n	8004b86 <memmove+0x2a>
 8004b84:	bd10      	pop	{r4, pc}
 8004b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b8e:	e7f7      	b.n	8004b80 <memmove+0x24>

08004b90 <_free_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4605      	mov	r5, r0
 8004b94:	2900      	cmp	r1, #0
 8004b96:	d043      	beq.n	8004c20 <_free_r+0x90>
 8004b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9c:	1f0c      	subs	r4, r1, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfb8      	it	lt
 8004ba2:	18e4      	addlt	r4, r4, r3
 8004ba4:	f000 f8d0 	bl	8004d48 <__malloc_lock>
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <_free_r+0x94>)
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	4610      	mov	r0, r2
 8004bae:	b933      	cbnz	r3, 8004bbe <_free_r+0x2e>
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	6014      	str	r4, [r2, #0]
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bba:	f000 b8cb 	b.w	8004d54 <__malloc_unlock>
 8004bbe:	42a3      	cmp	r3, r4
 8004bc0:	d90a      	bls.n	8004bd8 <_free_r+0x48>
 8004bc2:	6821      	ldr	r1, [r4, #0]
 8004bc4:	1862      	adds	r2, r4, r1
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	bf01      	itttt	eq
 8004bca:	681a      	ldreq	r2, [r3, #0]
 8004bcc:	685b      	ldreq	r3, [r3, #4]
 8004bce:	1852      	addeq	r2, r2, r1
 8004bd0:	6022      	streq	r2, [r4, #0]
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	6004      	str	r4, [r0, #0]
 8004bd6:	e7ed      	b.n	8004bb4 <_free_r+0x24>
 8004bd8:	461a      	mov	r2, r3
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	b10b      	cbz	r3, 8004be2 <_free_r+0x52>
 8004bde:	42a3      	cmp	r3, r4
 8004be0:	d9fa      	bls.n	8004bd8 <_free_r+0x48>
 8004be2:	6811      	ldr	r1, [r2, #0]
 8004be4:	1850      	adds	r0, r2, r1
 8004be6:	42a0      	cmp	r0, r4
 8004be8:	d10b      	bne.n	8004c02 <_free_r+0x72>
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	4401      	add	r1, r0
 8004bee:	1850      	adds	r0, r2, r1
 8004bf0:	4283      	cmp	r3, r0
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	d1de      	bne.n	8004bb4 <_free_r+0x24>
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4401      	add	r1, r0
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	6053      	str	r3, [r2, #4]
 8004c00:	e7d8      	b.n	8004bb4 <_free_r+0x24>
 8004c02:	d902      	bls.n	8004c0a <_free_r+0x7a>
 8004c04:	230c      	movs	r3, #12
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	e7d4      	b.n	8004bb4 <_free_r+0x24>
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1821      	adds	r1, r4, r0
 8004c0e:	428b      	cmp	r3, r1
 8004c10:	bf01      	itttt	eq
 8004c12:	6819      	ldreq	r1, [r3, #0]
 8004c14:	685b      	ldreq	r3, [r3, #4]
 8004c16:	1809      	addeq	r1, r1, r0
 8004c18:	6021      	streq	r1, [r4, #0]
 8004c1a:	6063      	str	r3, [r4, #4]
 8004c1c:	6054      	str	r4, [r2, #4]
 8004c1e:	e7c9      	b.n	8004bb4 <_free_r+0x24>
 8004c20:	bd38      	pop	{r3, r4, r5, pc}
 8004c22:	bf00      	nop
 8004c24:	200000d0 	.word	0x200000d0

08004c28 <_malloc_r>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	1ccd      	adds	r5, r1, #3
 8004c2c:	f025 0503 	bic.w	r5, r5, #3
 8004c30:	3508      	adds	r5, #8
 8004c32:	2d0c      	cmp	r5, #12
 8004c34:	bf38      	it	cc
 8004c36:	250c      	movcc	r5, #12
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	db01      	blt.n	8004c42 <_malloc_r+0x1a>
 8004c3e:	42a9      	cmp	r1, r5
 8004c40:	d903      	bls.n	8004c4a <_malloc_r+0x22>
 8004c42:	230c      	movs	r3, #12
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	2000      	movs	r0, #0
 8004c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4a:	f000 f87d 	bl	8004d48 <__malloc_lock>
 8004c4e:	4921      	ldr	r1, [pc, #132]	; (8004cd4 <_malloc_r+0xac>)
 8004c50:	680a      	ldr	r2, [r1, #0]
 8004c52:	4614      	mov	r4, r2
 8004c54:	b99c      	cbnz	r4, 8004c7e <_malloc_r+0x56>
 8004c56:	4f20      	ldr	r7, [pc, #128]	; (8004cd8 <_malloc_r+0xb0>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b923      	cbnz	r3, 8004c66 <_malloc_r+0x3e>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f000 f862 	bl	8004d28 <_sbrk_r>
 8004c64:	6038      	str	r0, [r7, #0]
 8004c66:	4629      	mov	r1, r5
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f85d 	bl	8004d28 <_sbrk_r>
 8004c6e:	1c43      	adds	r3, r0, #1
 8004c70:	d123      	bne.n	8004cba <_malloc_r+0x92>
 8004c72:	230c      	movs	r3, #12
 8004c74:	4630      	mov	r0, r6
 8004c76:	6033      	str	r3, [r6, #0]
 8004c78:	f000 f86c 	bl	8004d54 <__malloc_unlock>
 8004c7c:	e7e3      	b.n	8004c46 <_malloc_r+0x1e>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	1b5b      	subs	r3, r3, r5
 8004c82:	d417      	bmi.n	8004cb4 <_malloc_r+0x8c>
 8004c84:	2b0b      	cmp	r3, #11
 8004c86:	d903      	bls.n	8004c90 <_malloc_r+0x68>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	441c      	add	r4, r3
 8004c8c:	6025      	str	r5, [r4, #0]
 8004c8e:	e004      	b.n	8004c9a <_malloc_r+0x72>
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	42a2      	cmp	r2, r4
 8004c94:	bf0c      	ite	eq
 8004c96:	600b      	streq	r3, [r1, #0]
 8004c98:	6053      	strne	r3, [r2, #4]
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f000 f85a 	bl	8004d54 <__malloc_unlock>
 8004ca0:	f104 000b 	add.w	r0, r4, #11
 8004ca4:	1d23      	adds	r3, r4, #4
 8004ca6:	f020 0007 	bic.w	r0, r0, #7
 8004caa:	1ac2      	subs	r2, r0, r3
 8004cac:	d0cc      	beq.n	8004c48 <_malloc_r+0x20>
 8004cae:	1a1b      	subs	r3, r3, r0
 8004cb0:	50a3      	str	r3, [r4, r2]
 8004cb2:	e7c9      	b.n	8004c48 <_malloc_r+0x20>
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	6864      	ldr	r4, [r4, #4]
 8004cb8:	e7cc      	b.n	8004c54 <_malloc_r+0x2c>
 8004cba:	1cc4      	adds	r4, r0, #3
 8004cbc:	f024 0403 	bic.w	r4, r4, #3
 8004cc0:	42a0      	cmp	r0, r4
 8004cc2:	d0e3      	beq.n	8004c8c <_malloc_r+0x64>
 8004cc4:	1a21      	subs	r1, r4, r0
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f000 f82e 	bl	8004d28 <_sbrk_r>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d1dd      	bne.n	8004c8c <_malloc_r+0x64>
 8004cd0:	e7cf      	b.n	8004c72 <_malloc_r+0x4a>
 8004cd2:	bf00      	nop
 8004cd4:	200000d0 	.word	0x200000d0
 8004cd8:	200000d4 	.word	0x200000d4

08004cdc <_realloc_r>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	4607      	mov	r7, r0
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	460e      	mov	r6, r1
 8004ce4:	b921      	cbnz	r1, 8004cf0 <_realloc_r+0x14>
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cec:	f7ff bf9c 	b.w	8004c28 <_malloc_r>
 8004cf0:	b922      	cbnz	r2, 8004cfc <_realloc_r+0x20>
 8004cf2:	f7ff ff4d 	bl	8004b90 <_free_r>
 8004cf6:	4625      	mov	r5, r4
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfc:	f000 f830 	bl	8004d60 <_malloc_usable_size_r>
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d20f      	bcs.n	8004d24 <_realloc_r+0x48>
 8004d04:	4621      	mov	r1, r4
 8004d06:	4638      	mov	r0, r7
 8004d08:	f7ff ff8e 	bl	8004c28 <_malloc_r>
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d0f2      	beq.n	8004cf8 <_realloc_r+0x1c>
 8004d12:	4631      	mov	r1, r6
 8004d14:	4622      	mov	r2, r4
 8004d16:	f7ff ff13 	bl	8004b40 <memcpy>
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ff37 	bl	8004b90 <_free_r>
 8004d22:	e7e9      	b.n	8004cf8 <_realloc_r+0x1c>
 8004d24:	4635      	mov	r5, r6
 8004d26:	e7e7      	b.n	8004cf8 <_realloc_r+0x1c>

08004d28 <_sbrk_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	4d05      	ldr	r5, [pc, #20]	; (8004d44 <_sbrk_r+0x1c>)
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	602b      	str	r3, [r5, #0]
 8004d34:	f7fc fd3a 	bl	80017ac <_sbrk>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_sbrk_r+0x1a>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_sbrk_r+0x1a>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	20000598 	.word	0x20000598

08004d48 <__malloc_lock>:
 8004d48:	4801      	ldr	r0, [pc, #4]	; (8004d50 <__malloc_lock+0x8>)
 8004d4a:	f000 b811 	b.w	8004d70 <__retarget_lock_acquire_recursive>
 8004d4e:	bf00      	nop
 8004d50:	200005a0 	.word	0x200005a0

08004d54 <__malloc_unlock>:
 8004d54:	4801      	ldr	r0, [pc, #4]	; (8004d5c <__malloc_unlock+0x8>)
 8004d56:	f000 b80c 	b.w	8004d72 <__retarget_lock_release_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	200005a0 	.word	0x200005a0

08004d60 <_malloc_usable_size_r>:
 8004d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d64:	1f18      	subs	r0, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bfbc      	itt	lt
 8004d6a:	580b      	ldrlt	r3, [r1, r0]
 8004d6c:	18c0      	addlt	r0, r0, r3
 8004d6e:	4770      	bx	lr

08004d70 <__retarget_lock_acquire_recursive>:
 8004d70:	4770      	bx	lr

08004d72 <__retarget_lock_release_recursive>:
 8004d72:	4770      	bx	lr

08004d74 <_init>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr

08004d80 <_fini>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr
