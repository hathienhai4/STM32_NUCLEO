
PROJECT_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005020  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005158  08005158  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08005158  08005158  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005158  08005158  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08005160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000002c  0800518c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800518c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b25  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002445  00000000  00000000  00030b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00032fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00033f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f61  00000000  00000000  00034e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137f9  00000000  00000000  0004cdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008955b  00000000  00000000  000605c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9b1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b4  00000000  00000000  000e9b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005114 	.word	0x08005114

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08005114 	.word	0x08005114

0800014c <clearLed>:
 *  Created on: Nov 14, 2024
 *      Author: admin
 */
#include <RYG_LED.h>

void clearLed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	displayLed(-1);
 8000150:	f04f 30ff 	mov.w	r0, #4294967295
 8000154:	f000 f806 	bl	8000164 <displayLed>
	displayLed2(-1);
 8000158:	f04f 30ff 	mov.w	r0, #4294967295
 800015c:	f000 f848 	bl	80001f0 <displayLed2>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <displayLed>:

void displayLed(int state){
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	switch(state){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f240 124d 	movw	r2, #333	; 0x14d
 8000172:	4293      	cmp	r3, r2
 8000174:	d020      	beq.n	80001b8 <displayLed+0x54>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 800017c:	da27      	bge.n	80001ce <displayLed+0x6a>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b6f      	cmp	r3, #111	; 0x6f
 8000182:	d003      	beq.n	800018c <displayLed+0x28>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2bde      	cmp	r3, #222	; 0xde
 8000188:	d00b      	beq.n	80001a2 <displayLed+0x3e>
 800018a:	e020      	b.n	80001ce <displayLed+0x6a>
		case RED:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2108      	movs	r1, #8
 8000190:	4816      	ldr	r0, [pc, #88]	; (80001ec <displayLed+0x88>)
 8000192:	f001 fbbc 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	2120      	movs	r1, #32
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <displayLed+0x88>)
 800019c:	f001 fbb7 	bl	800190e <HAL_GPIO_WritePin>
			break;
 80001a0:	e020      	b.n	80001e4 <displayLed+0x80>
		case YEL:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2108      	movs	r1, #8
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <displayLed+0x88>)
 80001a8:	f001 fbb1 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2120      	movs	r1, #32
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <displayLed+0x88>)
 80001b2:	f001 fbac 	bl	800190e <HAL_GPIO_WritePin>
			break;
 80001b6:	e015      	b.n	80001e4 <displayLed+0x80>
		case GREEN:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2108      	movs	r1, #8
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <displayLed+0x88>)
 80001be:	f001 fba6 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2120      	movs	r1, #32
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <displayLed+0x88>)
 80001c8:	f001 fba1 	bl	800190e <HAL_GPIO_WritePin>
			break;
 80001cc:	e00a      	b.n	80001e4 <displayLed+0x80>
		default:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2108      	movs	r1, #8
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <displayLed+0x88>)
 80001d4:	f001 fb9b 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2120      	movs	r1, #32
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <displayLed+0x88>)
 80001de:	f001 fb96 	bl	800190e <HAL_GPIO_WritePin>
			break;
 80001e2:	bf00      	nop
	}
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <displayLed2>:
void displayLed2(int state){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	switch(state){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f240 124d 	movw	r2, #333	; 0x14d
 80001fe:	4293      	cmp	r3, r2
 8000200:	d022      	beq.n	8000248 <displayLed2+0x58>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8000208:	da2a      	bge.n	8000260 <displayLed2+0x70>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b6f      	cmp	r3, #111	; 0x6f
 800020e:	d003      	beq.n	8000218 <displayLed2+0x28>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2bde      	cmp	r3, #222	; 0xde
 8000214:	d00c      	beq.n	8000230 <displayLed2+0x40>
 8000216:	e023      	b.n	8000260 <displayLed2+0x70>
		case RED:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2110      	movs	r1, #16
 800021c:	4818      	ldr	r0, [pc, #96]	; (8000280 <displayLed2+0x90>)
 800021e:	f001 fb76 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000228:	4815      	ldr	r0, [pc, #84]	; (8000280 <displayLed2+0x90>)
 800022a:	f001 fb70 	bl	800190e <HAL_GPIO_WritePin>
			break;
 800022e:	e023      	b.n	8000278 <displayLed2+0x88>
		case YEL:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4812      	ldr	r0, [pc, #72]	; (8000280 <displayLed2+0x90>)
 8000236:	f001 fb6a 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	480f      	ldr	r0, [pc, #60]	; (8000280 <displayLed2+0x90>)
 8000242:	f001 fb64 	bl	800190e <HAL_GPIO_WritePin>
			break;
 8000246:	e017      	b.n	8000278 <displayLed2+0x88>
		case GREEN:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <displayLed2+0x90>)
 800024e:	f001 fb5e 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4809      	ldr	r0, [pc, #36]	; (8000280 <displayLed2+0x90>)
 800025a:	f001 fb58 	bl	800190e <HAL_GPIO_WritePin>
			break;
 800025e:	e00b      	b.n	8000278 <displayLed2+0x88>
		default:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2110      	movs	r1, #16
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <displayLed2+0x90>)
 8000266:	f001 fb52 	bl	800190e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <displayLed2+0x90>)
 8000272:	f001 fb4c 	bl	800190e <HAL_GPIO_WritePin>
			break;
 8000276:	bf00      	nop
	}
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010c00 	.word	0x40010c00

08000284 <isButtonPressed>:


GPIO_TypeDef* button_ports[] = {BUTTON1_GPIO_Port,BUTTON2_GPIO_Port,BUTTON3_GPIO_Port};
uint16_t button_pins[] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

int isButtonPressed( int index ){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 800028c:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <isButtonPressed+0x30>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d106      	bne.n	80002a6 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <isButtonPressed+0x30>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2100      	movs	r1, #0
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e000      	b.n	80002a8 <isButtonPressed+0x24>
	}
	return 0;
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000084 	.word	0x20000084

080002b8 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTON; i++){
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	e07d      	b.n	80003c0 <getKeyInput+0x108>
		KeyReg2[i] = KeyReg1[i];
 80002c4:	4a43      	ldr	r2, [pc, #268]	; (80003d4 <getKeyInput+0x11c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002cc:	4942      	ldr	r1, [pc, #264]	; (80003d8 <getKeyInput+0x120>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80002d4:	4a41      	ldr	r2, [pc, #260]	; (80003dc <getKeyInput+0x124>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002dc:	493d      	ldr	r1, [pc, #244]	; (80003d4 <getKeyInput+0x11c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  KeyReg0[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 80002e4:	4a3e      	ldr	r2, [pc, #248]	; (80003e0 <getKeyInput+0x128>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ec:	493d      	ldr	r1, [pc, #244]	; (80003e4 <getKeyInput+0x12c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002f4:	4619      	mov	r1, r3
 80002f6:	4610      	mov	r0, r2
 80002f8:	f001 faf2 	bl	80018e0 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4619      	mov	r1, r3
 8000300:	4a36      	ldr	r2, [pc, #216]	; (80003dc <getKeyInput+0x124>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000308:	4a32      	ldr	r2, [pc, #200]	; (80003d4 <getKeyInput+0x11c>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4932      	ldr	r1, [pc, #200]	; (80003dc <getKeyInput+0x124>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d14e      	bne.n	80003ba <getKeyInput+0x102>
 800031c:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <getKeyInput+0x11c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	492c      	ldr	r1, [pc, #176]	; (80003d8 <getKeyInput+0x120>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800032c:	429a      	cmp	r2, r3
 800032e:	d144      	bne.n	80003ba <getKeyInput+0x102>
		if (KeyReg2[i] != KeyReg3[i]){
 8000330:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <getKeyInput+0x120>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000338:	492b      	ldr	r1, [pc, #172]	; (80003e8 <getKeyInput+0x130>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000340:	429a      	cmp	r2, r3
 8000342:	d019      	beq.n	8000378 <getKeyInput+0xc0>
		  KeyReg3[i] = KeyReg2[i];
 8000344:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <getKeyInput+0x120>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034c:	4926      	ldr	r1, [pc, #152]	; (80003e8 <getKeyInput+0x130>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000354:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <getKeyInput+0x130>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d12c      	bne.n	80003ba <getKeyInput+0x102>
			TimeOutForKeyPress[i] = 1000;
 8000360:	4a22      	ldr	r2, [pc, #136]	; (80003ec <getKeyInput+0x134>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			//subKeyProcess();
			button_flag[i] = 1;
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <getKeyInput+0x138>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2101      	movs	r1, #1
 8000372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000376:	e020      	b.n	80003ba <getKeyInput+0x102>
		  }

		}else{
			TimeOutForKeyPress[i] -= 10;
 8000378:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <getKeyInput+0x134>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	f1a3 020a 	sub.w	r2, r3, #10
 8000384:	4919      	ldr	r1, [pc, #100]	; (80003ec <getKeyInput+0x134>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <getKeyInput+0x134>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d110      	bne.n	80003ba <getKeyInput+0x102>
				TimeOutForKeyPress[i] = 500;
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <getKeyInput+0x134>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <getKeyInput+0x130>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d104      	bne.n	80003ba <getKeyInput+0x102>
					//subKeyProcess();
					button_flag[i] = 1;
 80003b0:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <getKeyInput+0x138>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2101      	movs	r1, #1
 80003b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTON; i++){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3301      	adds	r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	f77f af7e 	ble.w	80002c4 <getKeyInput+0xc>
				}
			}
		}
	  }
	}
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000006c 	.word	0x2000006c
 80003d8:	2000009c 	.word	0x2000009c
 80003dc:	20000060 	.word	0x20000060
 80003e0:	20000000 	.word	0x20000000
 80003e4:	2000000c 	.word	0x2000000c
 80003e8:	20000054 	.word	0x20000054
 80003ec:	20000078 	.word	0x20000078
 80003f0:	20000084 	.word	0x20000084

080003f4 <checkTime>:
 */

#include "fsm_traffic_light.h"


void checkTime(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	if(red_time != yel_time + green_time){
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <checkTime+0x2c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <checkTime+0x30>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	441a      	add	r2, r3
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <checkTime+0x34>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	429a      	cmp	r2, r3
 8000408:	d006      	beq.n	8000418 <checkTime+0x24>
		red_time = yel_time + green_time;
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <checkTime+0x2c>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <checkTime+0x30>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4413      	add	r3, r2
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <checkTime+0x34>)
 8000416:	6013      	str	r3, [r2, #0]
	}
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	2000001c 	.word	0x2000001c
 8000424:	20000018 	.word	0x20000018
 8000428:	20000014 	.word	0x20000014

0800042c <fsm_traffic>:

void fsm_traffic(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch(status){
 8000430:	4bba      	ldr	r3, [pc, #744]	; (800071c <fsm_traffic+0x2f0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	2b08      	cmp	r3, #8
 8000438:	f200 81a6 	bhi.w	8000788 <fsm_traffic+0x35c>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_traffic+0x18>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000469 	.word	0x08000469
 8000448:	08000517 	.word	0x08000517
 800044c:	08000559 	.word	0x08000559
 8000450:	08000495 	.word	0x08000495
 8000454:	080004d7 	.word	0x080004d7
 8000458:	080005c5 	.word	0x080005c5
 800045c:	08000663 	.word	0x08000663
 8000460:	080006ef 	.word	0x080006ef
 8000464:	08000599 	.word	0x08000599
		case INIT:
			checkTime();
 8000468:	f7ff ffc4 	bl	80003f4 <checkTime>
			status = RED_GREEN;
 800046c:	4bab      	ldr	r3, [pc, #684]	; (800071c <fsm_traffic+0x2f0>)
 800046e:	2204      	movs	r2, #4
 8000470:	601a      	str	r2, [r3, #0]
			setTimer(0,green_time);
 8000472:	4bab      	ldr	r3, [pc, #684]	; (8000720 <fsm_traffic+0x2f4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4619      	mov	r1, r3
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fca5 	bl	8000dc8 <setTimer>
			if(isButtonPressed(0)) status = MAN_INIT;
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff ff00 	bl	8000284 <isButtonPressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	f000 8180 	beq.w	800078c <fsm_traffic+0x360>
 800048c:	4ba3      	ldr	r3, [pc, #652]	; (800071c <fsm_traffic+0x2f0>)
 800048e:	2209      	movs	r2, #9
 8000490:	601a      	str	r2, [r3, #0]
			break;
 8000492:	e17b      	b.n	800078c <fsm_traffic+0x360>

		case RED_GREEN:
			displayLed(RED);
 8000494:	206f      	movs	r0, #111	; 0x6f
 8000496:	f7ff fe65 	bl	8000164 <displayLed>
			displayLed2(GREEN);
 800049a:	f240 104d 	movw	r0, #333	; 0x14d
 800049e:	f7ff fea7 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 fcb0 	bl	8000e08 <isTimerExpired>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <fsm_traffic+0x94>
				status = RED_YEL;
 80004ae:	4b9b      	ldr	r3, [pc, #620]	; (800071c <fsm_traffic+0x2f0>)
 80004b0:	2205      	movs	r2, #5
 80004b2:	601a      	str	r2, [r3, #0]
				setTimer(0,yel_time);
 80004b4:	4b9b      	ldr	r3, [pc, #620]	; (8000724 <fsm_traffic+0x2f8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fc84 	bl	8000dc8 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff fedf 	bl	8000284 <isButtonPressed>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	f000 8161 	beq.w	8000790 <fsm_traffic+0x364>
 80004ce:	4b93      	ldr	r3, [pc, #588]	; (800071c <fsm_traffic+0x2f0>)
 80004d0:	2209      	movs	r2, #9
 80004d2:	601a      	str	r2, [r3, #0]
			break;
 80004d4:	e15c      	b.n	8000790 <fsm_traffic+0x364>

		case RED_YEL:
			displayLed(RED);
 80004d6:	206f      	movs	r0, #111	; 0x6f
 80004d8:	f7ff fe44 	bl	8000164 <displayLed>
			displayLed2(YEL);
 80004dc:	20de      	movs	r0, #222	; 0xde
 80004de:	f7ff fe87 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 fc90 	bl	8000e08 <isTimerExpired>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <fsm_traffic+0xd4>
				status = GREEN_RED;
 80004ee:	4b8b      	ldr	r3, [pc, #556]	; (800071c <fsm_traffic+0x2f0>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 80004f4:	4b8a      	ldr	r3, [pc, #552]	; (8000720 <fsm_traffic+0x2f4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fc64 	bl	8000dc8 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff febf 	bl	8000284 <isButtonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	f000 8143 	beq.w	8000794 <fsm_traffic+0x368>
 800050e:	4b83      	ldr	r3, [pc, #524]	; (800071c <fsm_traffic+0x2f0>)
 8000510:	2209      	movs	r2, #9
 8000512:	601a      	str	r2, [r3, #0]
			break;
 8000514:	e13e      	b.n	8000794 <fsm_traffic+0x368>
		case GREEN_RED:
			displayLed(GREEN);
 8000516:	f240 104d 	movw	r0, #333	; 0x14d
 800051a:	f7ff fe23 	bl	8000164 <displayLed>
			displayLed2(RED);
 800051e:	206f      	movs	r0, #111	; 0x6f
 8000520:	f7ff fe66 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fc6f 	bl	8000e08 <isTimerExpired>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d008      	beq.n	8000542 <fsm_traffic+0x116>
				status = YEL_RED;
 8000530:	4b7a      	ldr	r3, [pc, #488]	; (800071c <fsm_traffic+0x2f0>)
 8000532:	2203      	movs	r2, #3
 8000534:	601a      	str	r2, [r3, #0]
				setTimer(0, yel_time);
 8000536:	4b7b      	ldr	r3, [pc, #492]	; (8000724 <fsm_traffic+0x2f8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4619      	mov	r1, r3
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fc43 	bl	8000dc8 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff fe9e 	bl	8000284 <isButtonPressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	f000 8124 	beq.w	8000798 <fsm_traffic+0x36c>
 8000550:	4b72      	ldr	r3, [pc, #456]	; (800071c <fsm_traffic+0x2f0>)
 8000552:	2209      	movs	r2, #9
 8000554:	601a      	str	r2, [r3, #0]
			break;
 8000556:	e11f      	b.n	8000798 <fsm_traffic+0x36c>
		case YEL_RED:
			displayLed(YEL);
 8000558:	20de      	movs	r0, #222	; 0xde
 800055a:	f7ff fe03 	bl	8000164 <displayLed>
			displayLed2(RED);
 800055e:	206f      	movs	r0, #111	; 0x6f
 8000560:	f7ff fe46 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fc4f 	bl	8000e08 <isTimerExpired>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <fsm_traffic+0x156>
				status = RED_GREEN;
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <fsm_traffic+0x2f0>)
 8000572:	2204      	movs	r2, #4
 8000574:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 8000576:	4b6a      	ldr	r3, [pc, #424]	; (8000720 <fsm_traffic+0x2f4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fc23 	bl	8000dc8 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fe7e 	bl	8000284 <isButtonPressed>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	f000 8106 	beq.w	800079c <fsm_traffic+0x370>
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <fsm_traffic+0x2f0>)
 8000592:	2209      	movs	r2, #9
 8000594:	601a      	str	r2, [r3, #0]
			break;
 8000596:	e101      	b.n	800079c <fsm_traffic+0x370>

		case MAN_INIT:
			setTimer(0,BLINK_TIME);
 8000598:	2132      	movs	r1, #50	; 0x32
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fc14 	bl	8000dc8 <setTimer>
			status = MAN_RED;
 80005a0:	4b5e      	ldr	r3, [pc, #376]	; (800071c <fsm_traffic+0x2f0>)
 80005a2:	2206      	movs	r2, #6
 80005a4:	601a      	str	r2, [r3, #0]
			clearLed();
 80005a6:	f7ff fdd1 	bl	800014c <clearLed>
			temp[0] = red_time;
 80005aa:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <fsm_traffic+0x2fc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a5f      	ldr	r2, [pc, #380]	; (800072c <fsm_traffic+0x300>)
 80005b0:	6013      	str	r3, [r2, #0]
			temp[1] = yel_time;
 80005b2:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <fsm_traffic+0x2f8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a5d      	ldr	r2, [pc, #372]	; (800072c <fsm_traffic+0x300>)
 80005b8:	6053      	str	r3, [r2, #4]
			temp[2] = green_time;
 80005ba:	4b59      	ldr	r3, [pc, #356]	; (8000720 <fsm_traffic+0x2f4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a5b      	ldr	r2, [pc, #364]	; (800072c <fsm_traffic+0x300>)
 80005c0:	6093      	str	r3, [r2, #8]
			break;
 80005c2:	e0f2      	b.n	80007aa <fsm_traffic+0x37e>
		case MAN_RED:
			if(isButtonPressed(0)){
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fe5d 	bl	8000284 <isButtonPressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <fsm_traffic+0x1b8>
				status = MAN_YEL;
 80005d0:	4b52      	ldr	r3, [pc, #328]	; (800071c <fsm_traffic+0x2f0>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
				clearLed();
 80005d6:	f7ff fdb9 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 80005da:	2132      	movs	r1, #50	; 0x32
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fbf3 	bl	8000dc8 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 80005e2:	e0dd      	b.n	80007a0 <fsm_traffic+0x374>
			else if(isButtonPressed(1)){
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff fe4d 	bl	8000284 <isButtonPressed>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d006      	beq.n	80005fe <fsm_traffic+0x1d2>
				temp[0] += 1000;
 80005f0:	4b4e      	ldr	r3, [pc, #312]	; (800072c <fsm_traffic+0x300>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005f8:	4a4c      	ldr	r2, [pc, #304]	; (800072c <fsm_traffic+0x300>)
 80005fa:	6013      	str	r3, [r2, #0]
			break;
 80005fc:	e0d0      	b.n	80007a0 <fsm_traffic+0x374>
			}else if(isButtonPressed(2)){
 80005fe:	2002      	movs	r0, #2
 8000600:	f7ff fe40 	bl	8000284 <isButtonPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00e      	beq.n	8000628 <fsm_traffic+0x1fc>
				red_time = temp[0];
 800060a:	4b48      	ldr	r3, [pc, #288]	; (800072c <fsm_traffic+0x300>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a46      	ldr	r2, [pc, #280]	; (8000728 <fsm_traffic+0x2fc>)
 8000610:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000612:	2100      	movs	r1, #0
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fbd7 	bl	8000dc8 <setTimer>
				displayLed(RED);
 800061a:	206f      	movs	r0, #111	; 0x6f
 800061c:	f7ff fda2 	bl	8000164 <displayLed>
				displayLed2(RED);
 8000620:	206f      	movs	r0, #111	; 0x6f
 8000622:	f7ff fde5 	bl	80001f0 <displayLed2>
			break;
 8000626:	e0bb      	b.n	80007a0 <fsm_traffic+0x374>
			else if(isTimerExpired(0)){
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fbed 	bl	8000e08 <isTimerExpired>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80b5 	beq.w	80007a0 <fsm_traffic+0x374>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000636:	2110      	movs	r1, #16
 8000638:	483d      	ldr	r0, [pc, #244]	; (8000730 <fsm_traffic+0x304>)
 800063a:	f001 f980 	bl	800193e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800063e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000642:	483b      	ldr	r0, [pc, #236]	; (8000730 <fsm_traffic+0x304>)
 8000644:	f001 f97b 	bl	800193e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000648:	2108      	movs	r1, #8
 800064a:	4839      	ldr	r0, [pc, #228]	; (8000730 <fsm_traffic+0x304>)
 800064c:	f001 f977 	bl	800193e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000650:	2120      	movs	r1, #32
 8000652:	4837      	ldr	r0, [pc, #220]	; (8000730 <fsm_traffic+0x304>)
 8000654:	f001 f973 	bl	800193e <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	2000      	movs	r0, #0
 800065c:	f000 fbb4 	bl	8000dc8 <setTimer>
			break;
 8000660:	e09e      	b.n	80007a0 <fsm_traffic+0x374>

		case MAN_YEL:
			if(isButtonPressed(0)){
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fe0e 	bl	8000284 <isButtonPressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d009      	beq.n	8000682 <fsm_traffic+0x256>
				status = MAN_GREEN;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <fsm_traffic+0x2f0>)
 8000670:	2208      	movs	r2, #8
 8000672:	601a      	str	r2, [r3, #0]
				clearLed();
 8000674:	f7ff fd6a 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 8000678:	2132      	movs	r1, #50	; 0x32
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fba4 	bl	8000dc8 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);

				setTimer(0, BLINK_TIME);
			}
			break;
 8000680:	e090      	b.n	80007a4 <fsm_traffic+0x378>
			}else if(isButtonPressed(1)){
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff fdfe 	bl	8000284 <isButtonPressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <fsm_traffic+0x270>
				temp[1] += 1000;
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <fsm_traffic+0x300>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <fsm_traffic+0x300>)
 8000698:	6053      	str	r3, [r2, #4]
			break;
 800069a:	e083      	b.n	80007a4 <fsm_traffic+0x378>
			}else if(isButtonPressed(2)){
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff fdf1 	bl	8000284 <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00e      	beq.n	80006c6 <fsm_traffic+0x29a>
				yel_time = temp[1];
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <fsm_traffic+0x300>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <fsm_traffic+0x2f8>)
 80006ae:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 fb88 	bl	8000dc8 <setTimer>
				displayLed(YEL);
 80006b8:	20de      	movs	r0, #222	; 0xde
 80006ba:	f7ff fd53 	bl	8000164 <displayLed>
				displayLed2(YEL);
 80006be:	20de      	movs	r0, #222	; 0xde
 80006c0:	f7ff fd96 	bl	80001f0 <displayLed2>
			break;
 80006c4:	e06e      	b.n	80007a4 <fsm_traffic+0x378>
			else if(isTimerExpired(0)){
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fb9e 	bl	8000e08 <isTimerExpired>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d068      	beq.n	80007a4 <fsm_traffic+0x378>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	4816      	ldr	r0, [pc, #88]	; (8000730 <fsm_traffic+0x304>)
 80006d8:	f001 f931 	bl	800193e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80006dc:	2120      	movs	r1, #32
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <fsm_traffic+0x304>)
 80006e0:	f001 f92d 	bl	800193e <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 80006e4:	2132      	movs	r1, #50	; 0x32
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fb6e 	bl	8000dc8 <setTimer>
			break;
 80006ec:	e05a      	b.n	80007a4 <fsm_traffic+0x378>

		case MAN_GREEN:
			if(isButtonPressed(0)){
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fdc8 	bl	8000284 <isButtonPressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <fsm_traffic+0x2d6>
				status = INIT;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fsm_traffic+0x2f0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			else if(isTimerExpired(0)){
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 8000700:	e052      	b.n	80007a8 <fsm_traffic+0x37c>
			}else if(isButtonPressed(1)){
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fdbe 	bl	8000284 <isButtonPressed>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d012      	beq.n	8000734 <fsm_traffic+0x308>
				temp[2] += 1000;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <fsm_traffic+0x300>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <fsm_traffic+0x300>)
 8000718:	6093      	str	r3, [r2, #8]
			break;
 800071a:	e045      	b.n	80007a8 <fsm_traffic+0x37c>
 800071c:	20000048 	.word	0x20000048
 8000720:	20000018 	.word	0x20000018
 8000724:	2000001c 	.word	0x2000001c
 8000728:	20000014 	.word	0x20000014
 800072c:	200000b4 	.word	0x200000b4
 8000730:	40010c00 	.word	0x40010c00
			}else if(isButtonPressed(2)){
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fda5 	bl	8000284 <isButtonPressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d010      	beq.n	8000762 <fsm_traffic+0x336>
				green_time = temp[2];
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <fsm_traffic+0x384>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <fsm_traffic+0x388>)
 8000746:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000748:	2100      	movs	r1, #0
 800074a:	2000      	movs	r0, #0
 800074c:	f000 fb3c 	bl	8000dc8 <setTimer>
				displayLed(GREEN);
 8000750:	f240 104d 	movw	r0, #333	; 0x14d
 8000754:	f7ff fd06 	bl	8000164 <displayLed>
				displayLed2(GREEN);
 8000758:	f240 104d 	movw	r0, #333	; 0x14d
 800075c:	f7ff fd48 	bl	80001f0 <displayLed2>
			break;
 8000760:	e022      	b.n	80007a8 <fsm_traffic+0x37c>
			else if(isTimerExpired(0)){
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fb50 	bl	8000e08 <isTimerExpired>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d01c      	beq.n	80007a8 <fsm_traffic+0x37c>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800076e:	2110      	movs	r1, #16
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <fsm_traffic+0x38c>)
 8000772:	f001 f8e4 	bl	800193e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000776:	2108      	movs	r1, #8
 8000778:	480f      	ldr	r0, [pc, #60]	; (80007b8 <fsm_traffic+0x38c>)
 800077a:	f001 f8e0 	bl	800193e <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 800077e:	2132      	movs	r1, #50	; 0x32
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fb21 	bl	8000dc8 <setTimer>
			break;
 8000786:	e00f      	b.n	80007a8 <fsm_traffic+0x37c>

		default:
				break;
 8000788:	bf00      	nop
 800078a:	e00e      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 800078c:	bf00      	nop
 800078e:	e00c      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000790:	bf00      	nop
 8000792:	e00a      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000794:	bf00      	nop
 8000796:	e008      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000798:	bf00      	nop
 800079a:	e006      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 800079c:	bf00      	nop
 800079e:	e004      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a0:	bf00      	nop
 80007a2:	e002      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a4:	bf00      	nop
 80007a6:	e000      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a8:	bf00      	nop
		}
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000b4 	.word	0x200000b4
 80007b4:	20000018 	.word	0x20000018
 80007b8:	40010c00 	.word	0x40010c00

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fcda 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f82c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f910 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007cc:	f000 f8e4 	bl	8000998 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007d0:	f000 f896 	bl	8000900 <MX_TIM2_Init>
  MX_I2C1_Init();
 80007d4:	f000 f866 	bl	80008a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <main+0x50>)
 80007da:	f003 fb9b 	bl	8003f14 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80007de:	f000 f9b5 	bl	8000b4c <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <main+0x54>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(getKeyInput, 0, 10);
 80007e8:	220a      	movs	r2, #10
 80007ea:	2100      	movs	r1, #0
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <main+0x58>)
 80007ee:	f000 f9bd 	bl	8000b6c <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 10);
 80007f2:	220a      	movs	r2, #10
 80007f4:	2100      	movs	r1, #0
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <main+0x5c>)
 80007f8:	f000 f9b8 	bl	8000b6c <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic, 0, 10);
 80007fc:	220a      	movs	r2, #10
 80007fe:	2100      	movs	r1, #0
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <main+0x60>)
 8000802:	f000 f9b3 	bl	8000b6c <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000806:	f000 fa59 	bl	8000cbc <SCH_Dispatch_Tasks>
 800080a:	e7fc      	b.n	8000806 <main+0x4a>
 800080c:	20000114 	.word	0x20000114
 8000810:	20000048 	.word	0x20000048
 8000814:	080002b9 	.word	0x080002b9
 8000818:	08000e3d 	.word	0x08000e3d
 800081c:	0800042d 	.word	0x0800042d

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b090      	sub	sp, #64	; 0x40
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	2228      	movs	r2, #40	; 0x28
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 fc68 	bl	8005104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	2310      	movs	r3, #16
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000856:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fef9 	bl	8003658 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800086c:	f000 f968 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2302      	movs	r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f003 f964 	bl	8003b58 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000896:	f000 f953 	bl	8000b40 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3740      	adds	r7, #64	; 0x40
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <MX_I2C1_Init+0x54>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_I2C1_Init+0x58>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008e2:	f001 f867 	bl	80019b4 <HAL_I2C_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 f928 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000c0 	.word	0x200000c0
 80008f8:	40005400 	.word	0x40005400
 80008fc:	000186a0 	.word	0x000186a0

08000900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM2_Init+0x94>)
 800091e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_TIM2_Init+0x94>)
 8000926:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800092a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_TIM2_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM2_Init+0x94>)
 8000934:	2209      	movs	r2, #9
 8000936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_TIM2_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM2_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <MX_TIM2_Init+0x94>)
 8000946:	f003 fa95 	bl	8003e74 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000950:	f000 f8f6 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_TIM2_Init+0x94>)
 8000962:	f003 fc19 	bl	8004198 <HAL_TIM_ConfigClockSource>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800096c:	f000 f8e8 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_TIM2_Init+0x94>)
 800097e:	f003 fdfb 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f8da 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000114 	.word	0x20000114

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART2_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009d0:	f003 fe42 	bl	8004658 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f8b1 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000015c 	.word	0x2000015c
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a3e      	ldr	r2, [pc, #248]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b3c      	ldr	r3, [pc, #240]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a38      	ldr	r2, [pc, #224]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_GPIO_Init+0x12c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000a66:	482d      	ldr	r0, [pc, #180]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a68:	f000 ff51 	bl	800190e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a72:	482b      	ldr	r0, [pc, #172]	; (8000b20 <MX_GPIO_Init+0x134>)
 8000a74:	f000 ff4b 	bl	800190e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <MX_GPIO_Init+0x138>)
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4826      	ldr	r0, [pc, #152]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a8e:	f000 fda3 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON4_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000a92:	2313      	movs	r3, #19
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481d      	ldr	r0, [pc, #116]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000aa6:	f000 fd97 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin;
 8000aaa:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4816      	ldr	r0, [pc, #88]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000ac4:	f000 fd88 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x134>)
 8000adc:	f000 fd7c 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000ae0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_GPIO_Init+0x134>)
 8000afa:	f000 fd6d 	bl	80015d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2028      	movs	r0, #40	; 0x28
 8000b04:	f000 fc71 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b08:	2028      	movs	r0, #40	; 0x28
 8000b0a:	f000 fc8a 	bl	8001422 <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	10110000 	.word	0x10110000
 8000b28:	40011000 	.word	0x40011000

08000b2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000b34:	f000 f8b4 	bl	8000ca0 <SCH_Update>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
uint32_t global_timer = 0;

void SCH_Init(void) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
    current_index_task = 0;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SCH_Init+0x18>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
    global_timer = 0;
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SCH_Init+0x1c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	2000004c 	.word	0x2000004c
 8000b68:	20000050 	.word	0x20000050

08000b6c <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
    if (current_index_task < SCH_MAX_TASKS) {
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b27      	cmp	r3, #39	; 0x27
 8000b7e:	d84a      	bhi.n	8000c16 <SCH_Add_Task+0xaa>
        SCH_tasks_G[current_index_task].pTask = pFunction;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <SCH_Add_Task+0xb8>)
 8000b88:	460b      	mov	r3, r1
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <SCH_Add_Task+0xbc>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	08da      	lsrs	r2, r3, #3
 8000ba6:	491f      	ldr	r1, [pc, #124]	; (8000c24 <SCH_Add_Task+0xb8>)
 8000ba8:	4603      	mov	r3, r0
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4403      	add	r3, r0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <SCH_Add_Task+0xbc>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	08da      	lsrs	r2, r3, #3
 8000bc6:	4917      	ldr	r1, [pc, #92]	; (8000c24 <SCH_Add_Task+0xb8>)
 8000bc8:	4603      	mov	r3, r0
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4403      	add	r3, r0
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <SCH_Add_Task+0xb8>)
 8000bde:	460b      	mov	r3, r1
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	330c      	adds	r3, #12
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SCH_Add_Task+0xb8>)
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	440b      	add	r3, r1
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	3310      	adds	r3, #16
 8000c08:	6018      	str	r0, [r3, #0]

        ++current_index_task;
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <SCH_Add_Task+0xb4>)
 8000c14:	701a      	strb	r2, [r3, #0]
    }
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	2000004c 	.word	0x2000004c
 8000c24:	200001a4 	.word	0x200001a4
 8000c28:	cccccccd 	.word	0xcccccccd

08000c2c <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t ID) {
 8000c2c:	b4b0      	push	{r4, r5, r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    if (current_index_task > ID) {
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <SCH_Delete_Task+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d226      	bcs.n	8000c8e <SCH_Delete_Task+0x62>
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e017      	b.n	8000c76 <SCH_Delete_Task+0x4a>
            SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <SCH_Delete_Task+0x70>)
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4418      	add	r0, r3
 8000c58:	4910      	ldr	r1, [pc, #64]	; (8000c9c <SCH_Delete_Task+0x70>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	4604      	mov	r4, r0
 8000c66:	461d      	mov	r5, r3
 8000c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	6023      	str	r3, [r4, #0]
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3301      	adds	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <SCH_Delete_Task+0x6c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	dbe1      	blt.n	8000c46 <SCH_Delete_Task+0x1a>
        }
        --current_index_task;
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SCH_Delete_Task+0x6c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <SCH_Delete_Task+0x6c>)
 8000c8c:	701a      	strb	r2, [r3, #0]
    }
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bcb0      	pop	{r4, r5, r7}
 8000c96:	4770      	bx	lr
 8000c98:	2000004c 	.word	0x2000004c
 8000c9c:	200001a4 	.word	0x200001a4

08000ca0 <SCH_Update>:

void SCH_Update(void) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	++global_timer;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SCH_Update+0x18>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <SCH_Update+0x18>)
 8000cac:	6013      	str	r3, [r2, #0]
    if (global_timer > UINT32_MAX) {
    	global_timer = 0;
    }
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000050 	.word	0x20000050

08000cbc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; ++i) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	e06e      	b.n	8000da6 <SCH_Dispatch_Tasks+0xea>
        if (global_timer >= SCH_tasks_G[i].Delay) {//Check if task execute
 8000cc8:	493c      	ldr	r1, [pc, #240]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <SCH_Dispatch_Tasks+0x104>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d840      	bhi.n	8000d64 <SCH_Dispatch_Tasks+0xa8>
            ++SCH_tasks_G[i].RunMe;
 8000ce2:	4936      	ldr	r1, [pc, #216]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2d8      	uxtb	r0, r3
 8000cf8:	4930      	ldr	r1, [pc, #192]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	330c      	adds	r3, #12
 8000d08:	4602      	mov	r2, r0
 8000d0a:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period > 0) {
 8000d0c:	492b      	ldr	r1, [pc, #172]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d01c      	beq.n	8000d5c <SCH_Dispatch_Tasks+0xa0>
            	if (global_timer + SCH_tasks_G[i].Period <= UINT32_MAX) {
            		SCH_tasks_G[i].Delay += SCH_tasks_G[i].Period;
 8000d22:	4926      	ldr	r1, [pc, #152]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	3304      	adds	r3, #4
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	4821      	ldr	r0, [pc, #132]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4403      	add	r3, r0
 8000d42:	3308      	adds	r3, #8
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4419      	add	r1, r3
 8000d48:	481c      	ldr	r0, [pc, #112]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4403      	add	r3, r0
 8000d56:	3304      	adds	r3, #4
 8000d58:	6019      	str	r1, [r3, #0]
 8000d5a:	e003      	b.n	8000d64 <SCH_Dispatch_Tasks+0xa8>
            		SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period - (UINT32_MAX - SCH_tasks_G[i].Delay);
            		--SCH_tasks_G[i].RunMe;
            	}
            }
            else {
                SCH_Delete_Task(i);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff64 	bl	8000c2c <SCH_Delete_Task>
            }
        }
        if (SCH_tasks_G[i].RunMe > 0) {
 8000d64:	4915      	ldr	r1, [pc, #84]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	330c      	adds	r3, #12
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d012      	beq.n	8000da0 <SCH_Dispatch_Tasks+0xe4>
            SCH_tasks_G[i].RunMe = 0;
 8000d7a:	4910      	ldr	r1, [pc, #64]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	330c      	adds	r3, #12
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
            (*SCH_tasks_G[i].pTask)();
 8000d8e:	490b      	ldr	r1, [pc, #44]	; (8000dbc <SCH_Dispatch_Tasks+0x100>)
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4798      	blx	r3
    for (int i = 0; i < current_index_task; ++i) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <SCH_Dispatch_Tasks+0x108>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4293      	cmp	r3, r2
 8000db0:	db8a      	blt.n	8000cc8 <SCH_Dispatch_Tasks+0xc>
        }
    }
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200001a4 	.word	0x200001a4
 8000dc0:	20000050 	.word	0x20000050
 8000dc4:	2000004c 	.word	0x2000004c

08000dc8 <setTimer>:
#include "global.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value/TICK;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <setTimer+0x34>)
 8000dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dda:	1092      	asrs	r2, r2, #2
 8000ddc:	17db      	asrs	r3, r3, #31
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <setTimer+0x38>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <setTimer+0x3c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2100      	movs	r1, #0
 8000dee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	66666667 	.word	0x66666667
 8000e00:	200004c4 	.word	0x200004c4
 8000e04:	200004f0 	.word	0x200004f0

08000e08 <isTimerExpired>:

int isTimerExpired(int index) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8000e10:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <isTimerExpired+0x30>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d106      	bne.n	8000e2a <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <isTimerExpired+0x30>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2100      	movs	r1, #0
 8000e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <isTimerExpired+0x24>
	}
	return 0;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200004f0 	.word	0x200004f0

08000e3c <timerRun>:

void timerRun() {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	e01c      	b.n	8000e82 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <timerRun+0x58>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dd13      	ble.n	8000e7c <timerRun+0x40>
			--timer_counter[i];
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <timerRun+0x58>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <timerRun+0x58>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <timerRun+0x58>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	dc04      	bgt.n	8000e7c <timerRun+0x40>
				timer_flag[i] = 1;
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <timerRun+0x5c>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2101      	movs	r1, #1
 8000e78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0a      	cmp	r3, #10
 8000e86:	dddf      	ble.n	8000e48 <timerRun+0xc>
			}
		}
	}
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	200004c4 	.word	0x200004c4
 8000e98:	200004f0 	.word	0x200004f0

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6193      	str	r3, [r2, #24]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_MspInit+0x60>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_MspInit+0x60>)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000

08000f00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <HAL_I2C_MspInit+0x90>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d133      	bne.n	8000f88 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f38:	23c0      	movs	r3, #192	; 0xc0
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3c:	2312      	movs	r3, #18
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <HAL_I2C_MspInit+0x98>)
 8000f4c:	f000 fb44 	bl	80015d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5a:	61d3      	str	r3, [r2, #28]
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	201f      	movs	r0, #31
 8000f6e:	f000 fa3c 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f72:	201f      	movs	r0, #31
 8000f74:	f000 fa55 	bl	8001422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	f000 fa34 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f82:	2020      	movs	r0, #32
 8000f84:	f000 fa4d 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d113      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201c      	movs	r0, #28
 8000fcc:	f000 fa0d 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd0:	201c      	movs	r0, #28
 8000fd2:	f000 fa26 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_UART_MspInit+0x80>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d12b      	bne.n	800105c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_UART_MspInit+0x84>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_UART_MspInit+0x84>)
 800100a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100e:	61d3      	str	r3, [r2, #28]
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_UART_MspInit+0x84>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_UART_MspInit+0x84>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <HAL_UART_MspInit+0x84>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_UART_MspInit+0x84>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001034:	230c      	movs	r3, #12
 8001036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_UART_MspInit+0x88>)
 8001048:	f000 fac6 	bl	80015d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2026      	movs	r0, #38	; 0x26
 8001052:	f000 f9ca 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001056:	2026      	movs	r0, #38	; 0x26
 8001058:	f000 f9e3 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004400 	.word	0x40004400
 8001068:	40021000 	.word	0x40021000
 800106c:	40010800 	.word	0x40010800

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 f8a5 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM2_IRQHandler+0x10>)
 80010c6:	f002 ff77 	bl	8003fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000114 	.word	0x20000114

080010d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <I2C1_EV_IRQHandler+0x10>)
 80010da:	f000 fdc3 	bl	8001c64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000c0 	.word	0x200000c0

080010e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <I2C1_ER_IRQHandler+0x10>)
 80010ee:	f000 ff2a 	bl	8001f46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000c0 	.word	0x200000c0

080010fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <USART2_IRQHandler+0x10>)
 8001102:	f003 faf9 	bl	80046f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000015c 	.word	0x2000015c

08001110 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001114:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001118:	f000 fc2a 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <Reset_Handler>:
 800112c:	f7ff fff8 	bl	8001120 <SystemInit>
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <LoopFillZerobss+0xe>)
 8001132:	490c      	ldr	r1, [pc, #48]	; (8001164 <LoopFillZerobss+0x12>)
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <LoopFillZerobss+0x16>)
 8001136:	2300      	movs	r3, #0
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:
 800113a:	58d4      	ldr	r4, [r2, r3]
 800113c:	50c4      	str	r4, [r0, r3]
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:
 8001140:	18c4      	adds	r4, r0, r3
 8001142:	428c      	cmp	r4, r1
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <LoopFillZerobss+0x1a>)
 8001148:	4c09      	ldr	r4, [pc, #36]	; (8001170 <LoopFillZerobss+0x1e>)
 800114a:	2300      	movs	r3, #0
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:
 8001152:	42a2      	cmp	r2, r4
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>
 8001156:	f003 ffb1 	bl	80050bc <__libc_init_array>
 800115a:	f7ff fb2f 	bl	80007bc <main>
 800115e:	4770      	bx	lr
 8001160:	20000000 	.word	0x20000000
 8001164:	2000002c 	.word	0x2000002c
 8001168:	08005160 	.word	0x08005160
 800116c:	2000002c 	.word	0x2000002c
 8001170:	20000520 	.word	0x20000520

08001174 <ADC1_2_IRQHandler>:
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f923 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fe82 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f93b 	bl	800143e <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f903 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000020 	.word	0x20000020
 80011fc:	20000028 	.word	0x20000028
 8001200:	20000024 	.word	0x20000024

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x1c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x20>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_IncTick+0x20>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	20000028 	.word	0x20000028
 8001224:	2000051c 	.word	0x2000051c

08001228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <HAL_GetTick+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	2000051c 	.word	0x2000051c

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4906      	ldr	r1, [pc, #24]	; (80012d4 <__NVIC_EnableIRQ+0x34>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff90 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff2d 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff42 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff90 	bl	800132c <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5f 	bl	80012d8 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff35 	bl	80012a0 <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa2 	bl	8001390 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d008      	beq.n	8001480 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2204      	movs	r2, #4
 8001472:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e020      	b.n	80014c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 020e 	bic.w	r2, r2, #14
 800148e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d005      	beq.n	80014f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2204      	movs	r2, #4
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e051      	b.n	8001594 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020e 	bic.w	r2, r2, #14
 80014fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_DMA_Abort_IT+0xd4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d029      	beq.n	800156e <HAL_DMA_Abort_IT+0xa2>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <HAL_DMA_Abort_IT+0xd8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d022      	beq.n	800156a <HAL_DMA_Abort_IT+0x9e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <HAL_DMA_Abort_IT+0xdc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01a      	beq.n	8001564 <HAL_DMA_Abort_IT+0x98>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_DMA_Abort_IT+0xe0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d012      	beq.n	800155e <HAL_DMA_Abort_IT+0x92>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <HAL_DMA_Abort_IT+0xe4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00a      	beq.n	8001558 <HAL_DMA_Abort_IT+0x8c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_DMA_Abort_IT+0xe8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d102      	bne.n	8001552 <HAL_DMA_Abort_IT+0x86>
 800154c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001550:	e00e      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 8001552:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001556:	e00b      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 8001558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155c:	e008      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	e005      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 8001564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001568:	e002      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 800156a:	2310      	movs	r3, #16
 800156c:	e000      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 800156e:	2301      	movs	r3, #1
 8001570:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_DMA_Abort_IT+0xec>)
 8001572:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
    } 
  }
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40020008 	.word	0x40020008
 80015a4:	4002001c 	.word	0x4002001c
 80015a8:	40020030 	.word	0x40020030
 80015ac:	40020044 	.word	0x40020044
 80015b0:	40020058 	.word	0x40020058
 80015b4:	4002006c 	.word	0x4002006c
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ca:	b2db      	uxtb	r3, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e169      	b.n	80018c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015ec:	2201      	movs	r2, #1
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	429a      	cmp	r2, r3
 8001606:	f040 8158 	bne.w	80018ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a9a      	ldr	r2, [pc, #616]	; (8001878 <HAL_GPIO_Init+0x2a0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d05e      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001614:	4a98      	ldr	r2, [pc, #608]	; (8001878 <HAL_GPIO_Init+0x2a0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d875      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 800161a:	4a98      	ldr	r2, [pc, #608]	; (800187c <HAL_GPIO_Init+0x2a4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d058      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001620:	4a96      	ldr	r2, [pc, #600]	; (800187c <HAL_GPIO_Init+0x2a4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d86f      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 8001626:	4a96      	ldr	r2, [pc, #600]	; (8001880 <HAL_GPIO_Init+0x2a8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d052      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 800162c:	4a94      	ldr	r2, [pc, #592]	; (8001880 <HAL_GPIO_Init+0x2a8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d869      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 8001632:	4a94      	ldr	r2, [pc, #592]	; (8001884 <HAL_GPIO_Init+0x2ac>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d04c      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001638:	4a92      	ldr	r2, [pc, #584]	; (8001884 <HAL_GPIO_Init+0x2ac>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d863      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 800163e:	4a92      	ldr	r2, [pc, #584]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d046      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001644:	4a90      	ldr	r2, [pc, #576]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d85d      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 800164a:	2b12      	cmp	r3, #18
 800164c:	d82a      	bhi.n	80016a4 <HAL_GPIO_Init+0xcc>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d859      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <HAL_GPIO_Init+0x80>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	080016d3 	.word	0x080016d3
 800165c:	080016ad 	.word	0x080016ad
 8001660:	080016bf 	.word	0x080016bf
 8001664:	08001701 	.word	0x08001701
 8001668:	08001707 	.word	0x08001707
 800166c:	08001707 	.word	0x08001707
 8001670:	08001707 	.word	0x08001707
 8001674:	08001707 	.word	0x08001707
 8001678:	08001707 	.word	0x08001707
 800167c:	08001707 	.word	0x08001707
 8001680:	08001707 	.word	0x08001707
 8001684:	08001707 	.word	0x08001707
 8001688:	08001707 	.word	0x08001707
 800168c:	08001707 	.word	0x08001707
 8001690:	08001707 	.word	0x08001707
 8001694:	08001707 	.word	0x08001707
 8001698:	08001707 	.word	0x08001707
 800169c:	080016b5 	.word	0x080016b5
 80016a0:	080016c9 	.word	0x080016c9
 80016a4:	4a79      	ldr	r2, [pc, #484]	; (800188c <HAL_GPIO_Init+0x2b4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016aa:	e02c      	b.n	8001706 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e029      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	3304      	adds	r3, #4
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e024      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	3308      	adds	r3, #8
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e01f      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	330c      	adds	r3, #12
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e01a      	b.n	8001708 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016da:	2304      	movs	r3, #4
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e013      	b.n	8001708 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	611a      	str	r2, [r3, #16]
          break;
 80016f2:	e009      	b.n	8001708 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f4:	2308      	movs	r3, #8
 80016f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	615a      	str	r2, [r3, #20]
          break;
 80016fe:	e003      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
          break;
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x130>
          break;
 8001706:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d801      	bhi.n	8001712 <HAL_GPIO_Init+0x13a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	e001      	b.n	8001716 <HAL_GPIO_Init+0x13e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3304      	adds	r3, #4
 8001716:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2bff      	cmp	r3, #255	; 0xff
 800171c:	d802      	bhi.n	8001724 <HAL_GPIO_Init+0x14c>
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0x152>
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	3b08      	subs	r3, #8
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	210f      	movs	r1, #15
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	401a      	ands	r2, r3
 800173c:	6a39      	ldr	r1, [r7, #32]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	431a      	orrs	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 80b1 	beq.w	80018ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_GPIO_Init+0x2b8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_GPIO_Init+0x2b8>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_GPIO_Init+0x2b8>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001770:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x2bc>)
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <HAL_GPIO_Init+0x2c0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <HAL_GPIO_Init+0x1ec>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3f      	ldr	r2, [pc, #252]	; (800189c <HAL_GPIO_Init+0x2c4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1e8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <HAL_GPIO_Init+0x2c8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1e4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a3d      	ldr	r2, [pc, #244]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1e0>
 80017b4:	2303      	movs	r3, #3
 80017b6:	e006      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e004      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017bc:	2302      	movs	r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017c4:	2300      	movs	r3, #0
 80017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017d6:	492f      	ldr	r1, [pc, #188]	; (8001894 <HAL_GPIO_Init+0x2bc>)
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	492c      	ldr	r1, [pc, #176]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	4928      	ldr	r1, [pc, #160]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001808:	4013      	ands	r3, r2
 800180a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4922      	ldr	r1, [pc, #136]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	60cb      	str	r3, [r1, #12]
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	43db      	mvns	r3, r3
 800182e:	491e      	ldr	r1, [pc, #120]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001830:	4013      	ands	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4918      	ldr	r1, [pc, #96]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	43db      	mvns	r3, r3
 8001856:	4914      	ldr	r1, [pc, #80]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001858:	4013      	ands	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d021      	beq.n	80018ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e021      	b.n	80018ba <HAL_GPIO_Init+0x2e2>
 8001876:	bf00      	nop
 8001878:	10320000 	.word	0x10320000
 800187c:	10310000 	.word	0x10310000
 8001880:	10220000 	.word	0x10220000
 8001884:	10210000 	.word	0x10210000
 8001888:	10120000 	.word	0x10120000
 800188c:	10110000 	.word	0x10110000
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	40010800 	.word	0x40010800
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40011400 	.word	0x40011400
 80018a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_GPIO_Init+0x304>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4909      	ldr	r1, [pc, #36]	; (80018dc <HAL_GPIO_Init+0x304>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	3301      	adds	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f47f ae8e 	bne.w	80015ec <HAL_GPIO_Init+0x14>
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	372c      	adds	r7, #44	; 0x2c
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	807b      	strh	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191e:	787b      	ldrb	r3, [r7, #1]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800192a:	e003      	b.n	8001934 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	041a      	lsls	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	611a      	str	r2, [r3, #16]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	041a      	lsls	r2, r3, #16
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43d9      	mvns	r1, r3
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	400b      	ands	r3, r1
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f806 	bl	80019a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e12b      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fa90 	bl	8000f00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a18:	f002 f9e6 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a81      	ldr	r2, [pc, #516]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d807      	bhi.n	8001a38 <HAL_I2C_Init+0x84>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a80      	ldr	r2, [pc, #512]	; (8001c2c <HAL_I2C_Init+0x278>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf94      	ite	ls
 8001a30:	2301      	movls	r3, #1
 8001a32:	2300      	movhi	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e006      	b.n	8001a46 <HAL_I2C_Init+0x92>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a7d      	ldr	r2, [pc, #500]	; (8001c30 <HAL_I2C_Init+0x27c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0e7      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4a78      	ldr	r2, [pc, #480]	; (8001c34 <HAL_I2C_Init+0x280>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9b      	lsrs	r3, r3, #18
 8001a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d802      	bhi.n	8001a88 <HAL_I2C_Init+0xd4>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3301      	adds	r3, #1
 8001a86:	e009      	b.n	8001a9c <HAL_I2C_Init+0xe8>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	4a69      	ldr	r2, [pc, #420]	; (8001c38 <HAL_I2C_Init+0x284>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	495c      	ldr	r1, [pc, #368]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	d819      	bhi.n	8001af0 <HAL_I2C_Init+0x13c>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1e59      	subs	r1, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aca:	1c59      	adds	r1, r3, #1
 8001acc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_I2C_Init+0x138>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e59      	subs	r1, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aea:	e051      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e04f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d111      	bne.n	8001b1c <HAL_I2C_Init+0x168>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e012      	b.n	8001b42 <HAL_I2C_Init+0x18e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	0099      	lsls	r1, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Init+0x196>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e022      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10e      	bne.n	8001b70 <HAL_I2C_Init+0x1bc>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e58      	subs	r0, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6e:	e00f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	0099      	lsls	r1, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	6809      	ldr	r1, [r1, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6911      	ldr	r1, [r2, #16]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68d2      	ldr	r2, [r2, #12]
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	000186a0 	.word	0x000186a0
 8001c2c:	001e847f 	.word	0x001e847f
 8001c30:	003d08ff 	.word	0x003d08ff
 8001c34:	431bde83 	.word	0x431bde83
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b80      	cmp	r3, #128	; 0x80
 8001c50:	d103      	bne.n	8001c5a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d003      	beq.n	8001c9c <HAL_I2C_EV_IRQHandler+0x38>
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b40      	cmp	r3, #64	; 0x40
 8001c98:	f040 80c1 	bne.w	8001e1e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001cbc:	d003      	beq.n	8001cc6 <HAL_I2C_EV_IRQHandler+0x62>
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001cc4:	d101      	bne.n	8001cca <HAL_I2C_EV_IRQHandler+0x66>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_I2C_EV_IRQHandler+0x68>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	f000 8132 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00c      	beq.n	8001cf6 <HAL_I2C_EV_IRQHandler+0x92>
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	0a5b      	lsrs	r3, r3, #9
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f001 fc9b 	bl	8003624 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fd99 	bl	8002826 <I2C_Master_SB>
 8001cf4:	e092      	b.n	8001e1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	08db      	lsrs	r3, r3, #3
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_I2C_EV_IRQHandler+0xb2>
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	0a5b      	lsrs	r3, r3, #9
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fe0e 	bl	8002930 <I2C_Master_ADD10>
 8001d14:	e082      	b.n	8001e1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_I2C_EV_IRQHandler+0xd2>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	0a5b      	lsrs	r3, r3, #9
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fe27 	bl	8002982 <I2C_Master_ADDR>
 8001d34:	e072      	b.n	8001e1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03b      	beq.n	8001dba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d50:	f000 80f3 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	09db      	lsrs	r3, r3, #7
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00f      	beq.n	8001d80 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	0a9b      	lsrs	r3, r3, #10
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d009      	beq.n	8001d80 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f9f1 	bl	8002160 <I2C_MasterTransmit_TXE>
 8001d7e:	e04d      	b.n	8001e1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80d6 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	0a5b      	lsrs	r3, r3, #9
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80cf 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	2b21      	cmp	r3, #33	; 0x21
 8001da0:	d103      	bne.n	8001daa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fa78 	bl	8002298 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001da8:	e0c7      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	2b40      	cmp	r3, #64	; 0x40
 8001dae:	f040 80c4 	bne.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fae6 	bl	8002384 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db8:	e0bf      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dc8:	f000 80b7 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00f      	beq.n	8001df8 <HAL_I2C_EV_IRQHandler+0x194>
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_I2C_EV_IRQHandler+0x194>
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fb5f 	bl	80024b4 <I2C_MasterReceive_RXNE>
 8001df6:	e011      	b.n	8001e1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 809a 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	0a5b      	lsrs	r3, r3, #9
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8093 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fc15 	bl	8002644 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e1a:	e08e      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e1c:	e08d      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e007      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d012      	beq.n	8001e72 <HAL_I2C_EV_IRQHandler+0x20e>
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	0a5b      	lsrs	r3, r3, #9
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e68:	69b9      	ldr	r1, [r7, #24]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 ffe0 	bl	8002e30 <I2C_Slave_ADDR>
 8001e70:	e066      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x22e>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	0a5b      	lsrs	r3, r3, #9
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f001 f81a 	bl	8002ec4 <I2C_Slave_STOPF>
 8001e90:	e056      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	2b21      	cmp	r3, #33	; 0x21
 8001e96:	d002      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0x23a>
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	2b29      	cmp	r3, #41	; 0x29
 8001e9c:	d125      	bne.n	8001eea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	09db      	lsrs	r3, r3, #7
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00f      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x266>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	0a9b      	lsrs	r3, r3, #10
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x266>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fef8 	bl	8002cb8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ec8:	e039      	b.n	8001f3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d033      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x2da>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	0a5b      	lsrs	r3, r3, #9
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02d      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 ff25 	bl	8002d32 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ee8:	e029      	b.n	8001f3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00f      	beq.n	8001f16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	0a9b      	lsrs	r3, r3, #10
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 ff2f 	bl	8002d72 <I2C_SlaveReceive_RXNE>
 8001f14:	e014      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00e      	beq.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	0a5b      	lsrs	r3, r3, #9
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 ff5d 	bl	8002dee <I2C_SlaveReceive_BTF>
 8001f34:	e004      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b08a      	sub	sp, #40	; 0x28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <HAL_I2C_ER_IRQHandler+0x5e>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f92:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	0a5b      	lsrs	r3, r3, #9
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00e      	beq.n	8001fce <HAL_I2C_ER_IRQHandler+0x88>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001fcc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	0a9b      	lsrs	r3, r3, #10
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03f      	beq.n	800205a <HAL_I2C_ER_IRQHandler+0x114>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d039      	beq.n	800205a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8001fe6:	7efb      	ldrb	r3, [r7, #27]
 8001fe8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002000:	7ebb      	ldrb	r3, [r7, #26]
 8002002:	2b20      	cmp	r3, #32
 8002004:	d112      	bne.n	800202c <HAL_I2C_ER_IRQHandler+0xe6>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10f      	bne.n	800202c <HAL_I2C_ER_IRQHandler+0xe6>
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	2b21      	cmp	r3, #33	; 0x21
 8002010:	d008      	beq.n	8002024 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002012:	7cfb      	ldrb	r3, [r7, #19]
 8002014:	2b29      	cmp	r3, #41	; 0x29
 8002016:	d005      	beq.n	8002024 <HAL_I2C_ER_IRQHandler+0xde>
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	2b28      	cmp	r3, #40	; 0x28
 800201c:	d106      	bne.n	800202c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b21      	cmp	r3, #33	; 0x21
 8002022:	d103      	bne.n	800202c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f001 f87d 	bl	8003124 <I2C_Slave_AF>
 800202a:	e016      	b.n	800205a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002034:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800203e:	7efb      	ldrb	r3, [r7, #27]
 8002040:	2b10      	cmp	r3, #16
 8002042:	d002      	beq.n	800204a <HAL_I2C_ER_IRQHandler+0x104>
 8002044:	7efb      	ldrb	r3, [r7, #27]
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d107      	bne.n	800205a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002058:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	0adb      	lsrs	r3, r3, #11
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00e      	beq.n	8002084 <HAL_I2C_ER_IRQHandler+0x13e>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002082:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f001 f8b8 	bl	800320c <I2C_ITError>
  }
}
 800209c:	bf00      	nop
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
 80020f8:	4613      	mov	r3, r2
 80020fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002176:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d150      	bne.n	8002228 <I2C_MasterTransmit_TXE+0xc8>
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b21      	cmp	r3, #33	; 0x21
 800218a:	d14d      	bne.n	8002228 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b08      	cmp	r3, #8
 8002190:	d01d      	beq.n	80021ce <I2C_MasterTransmit_TXE+0x6e>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b20      	cmp	r3, #32
 8002196:	d01a      	beq.n	80021ce <I2C_MasterTransmit_TXE+0x6e>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800219e:	d016      	beq.n	80021ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2211      	movs	r2, #17
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff6c 	bl	80020a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021cc:	e060      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d107      	bne.n	8002218 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff81 	bl	8002118 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002216:	e03b      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff3f 	bl	80020a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002226:	e033      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b21      	cmp	r3, #33	; 0x21
 800222c:	d005      	beq.n	800223a <I2C_MasterTransmit_TXE+0xda>
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d12d      	bne.n	8002290 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2b22      	cmp	r3, #34	; 0x22
 8002238:	d12a      	bne.n	8002290 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002252:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002254:	e01c      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d103      	bne.n	800226a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f88e 	bl	8002384 <I2C_MemoryTransmit_TXE_BTF>
}
 8002268:	e012      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800228e:	e7ff      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b21      	cmp	r3, #33	; 0x21
 80022b0:	d164      	bne.n	800237c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022e0:	e04c      	b.n	800237c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d01d      	beq.n	8002324 <I2C_MasterTransmit_BTF+0x8c>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d01a      	beq.n	8002324 <I2C_MasterTransmit_BTF+0x8c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022f4:	d016      	beq.n	8002324 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002304:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2211      	movs	r2, #17
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff fec1 	bl	80020a4 <HAL_I2C_MasterTxCpltCallback>
}
 8002322:	e02b      	b.n	800237c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002332:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d107      	bne.n	800236e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fed6 	bl	8002118 <HAL_I2C_MemTxCpltCallback>
}
 800236c:	e006      	b.n	800237c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fe94 	bl	80020a4 <HAL_I2C_MasterTxCpltCallback>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002392:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11d      	bne.n	80023d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10b      	bne.n	80023bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b4:	1c9a      	adds	r2, r3, #2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80023ba:	e077      	b.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	121b      	asrs	r3, r3, #8
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023d6:	e069      	b.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10b      	bne.n	80023f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023f6:	e059      	b.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d152      	bne.n	80024a6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b22      	cmp	r3, #34	; 0x22
 8002404:	d10d      	bne.n	8002422 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002420:	e044      	b.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b21      	cmp	r3, #33	; 0x21
 8002430:	d112      	bne.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002456:	e029      	b.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d124      	bne.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b21      	cmp	r3, #33	; 0x21
 8002466:	d121      	bne.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002476:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fe3a 	bl	8002118 <HAL_I2C_MemTxCpltCallback>
}
 80024a4:	e002      	b.n	80024ac <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fbc8 	bl	8001c3c <I2C_Flush_DR>
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b22      	cmp	r3, #34	; 0x22
 80024c6:	f040 80b9 	bne.w	800263c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d921      	bls.n	8002522 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b03      	cmp	r3, #3
 800250c:	f040 8096 	bne.w	800263c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002520:	e08c      	b.n	800263c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	2b02      	cmp	r3, #2
 8002528:	d07f      	beq.n	800262a <I2C_MasterReceive_RXNE+0x176>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d002      	beq.n	8002536 <I2C_MasterReceive_RXNE+0x82>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d179      	bne.n	800262a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f001 f842 	bl	80035c0 <I2C_WaitOnSTOPRequestThroughIT>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d14c      	bne.n	80025dc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002550:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002560:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d10a      	bne.n	80025b2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fdbd 	bl	800212a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025b0:	e044      	b.n	800263c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d002      	beq.n	80025c6 <I2C_MasterReceive_RXNE+0x112>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d103      	bne.n	80025ce <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
 80025cc:	e002      	b.n	80025d4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2212      	movs	r2, #18
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fd6e 	bl	80020b6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025da:	e02f      	b.n	800263c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fd8a 	bl	800213c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002628:	e008      	b.n	800263c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002638:	605a      	str	r2, [r3, #4]
}
 800263a:	e7ff      	b.n	800263c <I2C_MasterReceive_RXNE+0x188>
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b04      	cmp	r3, #4
 800265a:	d11b      	bne.n	8002694 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002692:	e0c4      	b.n	800281e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b03      	cmp	r3, #3
 800269c:	d129      	bne.n	80026f2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d00a      	beq.n	80026ca <I2C_MasterReceive_BTF+0x86>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d007      	beq.n	80026ca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026f0:	e095      	b.n	800281e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d17d      	bne.n	80027f8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d002      	beq.n	8002708 <I2C_MasterReceive_BTF+0xc4>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b10      	cmp	r3, #16
 8002706:	d108      	bne.n	800271a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e016      	b.n	8002748 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d002      	beq.n	8002726 <I2C_MasterReceive_BTF+0xe2>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d108      	bne.n	8002738 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d10a      	bne.n	80027ce <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fcaf 	bl	800212a <HAL_I2C_MemRxCpltCallback>
}
 80027cc:	e027      	b.n	800281e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d002      	beq.n	80027e2 <I2C_MasterReceive_BTF+0x19e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d103      	bne.n	80027ea <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
 80027e8:	e002      	b.n	80027f0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2212      	movs	r2, #18
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fc60 	bl	80020b6 <HAL_I2C_MasterRxCpltCallback>
}
 80027f6:	e012      	b.n	800281e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d117      	bne.n	800286a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002852:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002854:	e067      	b.n	8002926 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]
}
 8002868:	e05d      	b.n	8002926 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002872:	d133      	bne.n	80028dc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b21      	cmp	r3, #33	; 0x21
 800287e:	d109      	bne.n	8002894 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	e008      	b.n	80028a6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <I2C_Master_SB+0x92>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d032      	beq.n	8002926 <I2C_Master_SB+0x100>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d02d      	beq.n	8002926 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d8:	605a      	str	r2, [r3, #4]
}
 80028da:	e024      	b.n	8002926 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10e      	bne.n	8002902 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	11db      	asrs	r3, r3, #7
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0306 	and.w	r3, r3, #6
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f063 030f 	orn	r3, r3, #15
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]
}
 8002900:	e011      	b.n	8002926 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	2b01      	cmp	r3, #1
 8002908:	d10d      	bne.n	8002926 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	b29b      	uxth	r3, r3
 8002910:	11db      	asrs	r3, r3, #7
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 0306 	and.w	r3, r3, #6
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f063 030e 	orn	r3, r3, #14
 800291e:	b2da      	uxtb	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	b2da      	uxtb	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <I2C_Master_ADD10+0x26>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <I2C_Master_ADD10+0x48>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002976:	605a      	str	r2, [r3, #4]
  }
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b091      	sub	sp, #68	; 0x44
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002990:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b22      	cmp	r3, #34	; 0x22
 80029aa:	f040 8174 	bne.w	8002c96 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <I2C_Master_ADDR+0x54>
 80029b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d10b      	bne.n	80029d6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	e16b      	b.n	8002cae <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11d      	bne.n	8002a1a <I2C_Master_ADDR+0x98>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029e6:	d118      	bne.n	8002a1a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	651a      	str	r2, [r3, #80]	; 0x50
 8002a18:	e149      	b.n	8002cae <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d113      	bne.n	8002a4c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a24:	2300      	movs	r3, #0
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e120      	b.n	8002c8e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 808a 	bne.w	8002b6c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a5e:	d137      	bne.n	8002ad0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a7e:	d113      	bne.n	8002aa8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	e0f2      	b.n	8002c8e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e0de      	b.n	8002c8e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d02e      	beq.n	8002b34 <I2C_Master_ADDR+0x1b2>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d02b      	beq.n	8002b34 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ade:	2b12      	cmp	r3, #18
 8002ae0:	d102      	bne.n	8002ae8 <I2C_Master_ADDR+0x166>
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d125      	bne.n	8002b34 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d00e      	beq.n	8002b0c <I2C_Master_ADDR+0x18a>
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d00b      	beq.n	8002b0c <I2C_Master_ADDR+0x18a>
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d008      	beq.n	8002b0c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e007      	b.n	8002b1c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b1a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	e0ac      	b.n	8002c8e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e090      	b.n	8002c8e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d158      	bne.n	8002c28 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d021      	beq.n	8002bc0 <I2C_Master_ADDR+0x23e>
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d01e      	beq.n	8002bc0 <I2C_Master_ADDR+0x23e>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d01b      	beq.n	8002bc0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e012      	b.n	8002be6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf4:	d14b      	bne.n	8002c8e <I2C_Master_ADDR+0x30c>
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bfc:	d00b      	beq.n	8002c16 <I2C_Master_ADDR+0x294>
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d008      	beq.n	8002c16 <I2C_Master_ADDR+0x294>
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d005      	beq.n	8002c16 <I2C_Master_ADDR+0x294>
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d002      	beq.n	8002c16 <I2C_Master_ADDR+0x294>
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d13b      	bne.n	8002c8e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	e032      	b.n	8002c8e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c36:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c46:	d117      	bne.n	8002c78 <I2C_Master_ADDR+0x2f6>
 8002c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c4e:	d00b      	beq.n	8002c68 <I2C_Master_ADDR+0x2e6>
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d008      	beq.n	8002c68 <I2C_Master_ADDR+0x2e6>
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d005      	beq.n	8002c68 <I2C_Master_ADDR+0x2e6>
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d002      	beq.n	8002c68 <I2C_Master_ADDR+0x2e6>
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d107      	bne.n	8002c78 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c76:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c94:	e00b      	b.n	8002cae <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]
}
 8002cac:	e7ff      	b.n	8002cae <I2C_Master_ADDR+0x32c>
 8002cae:	bf00      	nop
 8002cb0:	3744      	adds	r7, #68	; 0x44
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d02b      	beq.n	8002d2a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d114      	bne.n	8002d2a <I2C_SlaveTransmit_TXE+0x72>
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b29      	cmp	r3, #41	; 0x29
 8002d04:	d111      	bne.n	8002d2a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d14:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2228      	movs	r2, #40	; 0x28
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff f9cf 	bl	80020c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d011      	beq.n	8002d68 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02c      	beq.n	8002de6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d114      	bne.n	8002de6 <I2C_SlaveReceive_RXNE+0x74>
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc0:	d111      	bne.n	8002de6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2222      	movs	r2, #34	; 0x22
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2228      	movs	r2, #40	; 0x28
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff f97a 	bl	80020da <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d012      	beq.n	8002e26 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e4a:	2b28      	cmp	r3, #40	; 0x28
 8002e4c:	d127      	bne.n	8002e9e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	09db      	lsrs	r3, r3, #7
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	81bb      	strh	r3, [r7, #12]
 8002e80:	e002      	b.n	8002e88 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e90:	89ba      	ldrh	r2, [r7, #12]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff f928 	bl	80020ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e9c:	e00e      	b.n	8002ebc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ee2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d172      	bne.n	8003008 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b22      	cmp	r3, #34	; 0x22
 8002f26:	d002      	beq.n	8002f2e <I2C_Slave_STOPF+0x6a>
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f2c:	d135      	bne.n	8002f9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0204 	orr.w	r2, r3, #4
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fb28 	bl	80015bc <HAL_DMA_GetState>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d049      	beq.n	8003006 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	4a69      	ldr	r2, [pc, #420]	; (800311c <I2C_Slave_STOPF+0x258>)
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe faa4 	bl	80014cc <HAL_DMA_Abort_IT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d03d      	beq.n	8003006 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f94:	4610      	mov	r0, r2
 8002f96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f98:	e035      	b.n	8003006 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0204 	orr.w	r2, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe faf2 	bl	80015bc <HAL_DMA_GetState>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d014      	beq.n	8003008 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	4a4e      	ldr	r2, [pc, #312]	; (800311c <I2C_Slave_STOPF+0x258>)
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fa6e 	bl	80014cc <HAL_DMA_Abort_IT>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003000:	4610      	mov	r0, r2
 8003002:	4798      	blx	r3
 8003004:	e000      	b.n	8003008 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003006:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d03e      	beq.n	8003090 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d112      	bne.n	8003046 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d112      	bne.n	800307a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8b7 	bl	800320c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800309e:	e039      	b.n	8003114 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b2a      	cmp	r3, #42	; 0x2a
 80030a4:	d109      	bne.n	80030ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2228      	movs	r2, #40	; 0x28
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff f810 	bl	80020da <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b28      	cmp	r3, #40	; 0x28
 80030c4:	d111      	bne.n	80030ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a15      	ldr	r2, [pc, #84]	; (8003120 <I2C_Slave_STOPF+0x25c>)
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff f80f 	bl	8002106 <HAL_I2C_ListenCpltCallback>
}
 80030e8:	e014      	b.n	8003114 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	2b22      	cmp	r3, #34	; 0x22
 80030f0:	d002      	beq.n	80030f8 <I2C_Slave_STOPF+0x234>
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b22      	cmp	r3, #34	; 0x22
 80030f6:	d10d      	bne.n	8003114 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe ffe3 	bl	80020da <HAL_I2C_SlaveRxCpltCallback>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08003471 	.word	0x08003471
 8003120:	ffff0000 	.word	0xffff0000

08003124 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003132:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d002      	beq.n	8003146 <I2C_Slave_AF+0x22>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b20      	cmp	r3, #32
 8003144:	d129      	bne.n	800319a <I2C_Slave_AF+0x76>
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b28      	cmp	r3, #40	; 0x28
 800314a:	d126      	bne.n	800319a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <I2C_Slave_AF+0xe4>)
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003160:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800316a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe ffb7 	bl	8002106 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003198:	e031      	b.n	80031fe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b21      	cmp	r3, #33	; 0x21
 800319e:	d129      	bne.n	80031f4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a19      	ldr	r2, [pc, #100]	; (8003208 <I2C_Slave_AF+0xe4>)
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2221      	movs	r2, #33	; 0x21
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fd28 	bl	8001c3c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe ff6b 	bl	80020c8 <HAL_I2C_SlaveTxCpltCallback>
}
 80031f2:	e004      	b.n	80031fe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031fc:	615a      	str	r2, [r3, #20]
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	ffff0000 	.word	0xffff0000

0800320c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003222:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	2b10      	cmp	r3, #16
 8003228:	d002      	beq.n	8003230 <I2C_ITError+0x24>
 800322a:	7bbb      	ldrb	r3, [r7, #14]
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d10a      	bne.n	8003246 <I2C_ITError+0x3a>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b22      	cmp	r3, #34	; 0x22
 8003234:	d107      	bne.n	8003246 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003244:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800324c:	2b28      	cmp	r3, #40	; 0x28
 800324e:	d107      	bne.n	8003260 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2228      	movs	r2, #40	; 0x28
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800325e:	e015      	b.n	800328c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d00a      	beq.n	8003286 <I2C_ITError+0x7a>
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b60      	cmp	r3, #96	; 0x60
 8003274:	d007      	beq.n	8003286 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329a:	d162      	bne.n	8003362 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d020      	beq.n	80032fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4a6a      	ldr	r2, [pc, #424]	; (8003468 <I2C_ITError+0x25c>)
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f900 	bl	80014cc <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8089 	beq.w	80033e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f6:	4610      	mov	r0, r2
 80032f8:	4798      	blx	r3
 80032fa:	e074      	b.n	80033e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	4a59      	ldr	r2, [pc, #356]	; (8003468 <I2C_ITError+0x25c>)
 8003302:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe f8df 	bl	80014cc <HAL_DMA_Abort_IT>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d068      	beq.n	80033e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d10b      	bne.n	800333a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800335c:	4610      	mov	r0, r2
 800335e:	4798      	blx	r3
 8003360:	e041      	b.n	80033e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b60      	cmp	r3, #96	; 0x60
 800336c:	d125      	bne.n	80033ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d10b      	bne.n	80033a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe fecb 	bl	800214e <HAL_I2C_AbortCpltCallback>
 80033b8:	e015      	b.n	80033e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b40      	cmp	r3, #64	; 0x40
 80033c6:	d10b      	bne.n	80033e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fe feab 	bl	800213c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10e      	bne.n	8003414 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d113      	bne.n	8003460 <I2C_ITError+0x254>
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b28      	cmp	r3, #40	; 0x28
 800343c:	d110      	bne.n	8003460 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <I2C_ITError+0x260>)
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe fe53 	bl	8002106 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08003471 	.word	0x08003471
 800346c:	ffff0000 	.word	0xffff0000

08003470 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800348a:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <I2C_DMAAbort+0x148>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	08db      	lsrs	r3, r3, #3
 8003490:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <I2C_DMAAbort+0x14c>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0a1a      	lsrs	r2, r3, #8
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00da      	lsls	r2, r3, #3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034b6:	e00a      	b.n	80034ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d0ea      	beq.n	80034a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	2200      	movs	r2, #0
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	2200      	movs	r2, #0
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	2200      	movs	r2, #0
 8003512:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	2200      	movs	r2, #0
 8003522:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b60      	cmp	r3, #96	; 0x60
 800353e:	d10e      	bne.n	800355e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7fe fdf9 	bl	800214e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800355c:	e027      	b.n	80035ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003564:	2b28      	cmp	r3, #40	; 0x28
 8003566:	d117      	bne.n	8003598 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003586:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2228      	movs	r2, #40	; 0x28
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003596:	e007      	b.n	80035a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035a8:	6978      	ldr	r0, [r7, #20]
 80035aa:	f7fe fdc7 	bl	800213c <HAL_I2C_ErrorCallback>
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000020 	.word	0x20000020
 80035bc:	14f8b589 	.word	0x14f8b589

080035c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	0a1a      	lsrs	r2, r3, #8
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e008      	b.n	8003610 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360c:	d0e9      	beq.n	80035e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000020 	.word	0x20000020
 8003620:	14f8b589 	.word	0x14f8b589

08003624 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003634:	d103      	bne.n	800363e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800363c:	e007      	b.n	800364e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003646:	d102      	bne.n	800364e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2208      	movs	r2, #8
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e26c      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8087 	beq.w	8003786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003678:	4b92      	ldr	r3, [pc, #584]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b04      	cmp	r3, #4
 8003682:	d00c      	beq.n	800369e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003684:	4b8f      	ldr	r3, [pc, #572]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b08      	cmp	r3, #8
 800368e:	d112      	bne.n	80036b6 <HAL_RCC_OscConfig+0x5e>
 8003690:	4b8c      	ldr	r3, [pc, #560]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	d10b      	bne.n	80036b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369e:	4b89      	ldr	r3, [pc, #548]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d06c      	beq.n	8003784 <HAL_RCC_OscConfig+0x12c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d168      	bne.n	8003784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e246      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x76>
 80036c0:	4b80      	ldr	r3, [pc, #512]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7f      	ldr	r2, [pc, #508]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e02e      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x98>
 80036d6:	4b7b      	ldr	r3, [pc, #492]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7a      	ldr	r2, [pc, #488]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b78      	ldr	r3, [pc, #480]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a77      	ldr	r2, [pc, #476]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0xbc>
 80036fa:	4b72      	ldr	r3, [pc, #456]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a71      	ldr	r2, [pc, #452]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b6f      	ldr	r3, [pc, #444]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6e      	ldr	r2, [pc, #440]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 8003714:	4b6b      	ldr	r3, [pc, #428]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6a      	ldr	r2, [pc, #424]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b68      	ldr	r3, [pc, #416]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a67      	ldr	r2, [pc, #412]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fd78 	bl	8001228 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fd74 	bl	8001228 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1fa      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xe4>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fd64 	bl	8001228 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fd60 	bl	8001228 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1e6      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x10c>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003792:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800379e:	4b49      	ldr	r3, [pc, #292]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x18c>
 80037aa:	4b46      	ldr	r3, [pc, #280]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b43      	ldr	r3, [pc, #268]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x176>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1ba      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4939      	ldr	r1, [pc, #228]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_RCC_OscConfig+0x270>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fd19 	bl	8001228 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fd fd15 	bl	8001228 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e19b      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4927      	ldr	r1, [pc, #156]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_RCC_OscConfig+0x270>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fd fcf8 	bl	8001228 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383c:	f7fd fcf4 	bl	8001228 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e17a      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d03a      	beq.n	80038dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d019      	beq.n	80038a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fd fcd8 	bl	8001228 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387c:	f7fd fcd4 	bl	8001228 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e15a      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <HAL_RCC_OscConfig+0x26c>)
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800389a:	2001      	movs	r0, #1
 800389c:	f000 facc 	bl	8003e38 <RCC_Delay>
 80038a0:	e01c      	b.n	80038dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a8:	f7fd fcbe 	bl	8001228 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ae:	e00f      	b.n	80038d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fd fcba 	bl	8001228 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d908      	bls.n	80038d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e140      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	42420000 	.word	0x42420000
 80038cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	4b9e      	ldr	r3, [pc, #632]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e9      	bne.n	80038b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80a6 	beq.w	8003a36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ee:	4b97      	ldr	r3, [pc, #604]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	4b94      	ldr	r3, [pc, #592]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a93      	ldr	r2, [pc, #588]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003904:	61d3      	str	r3, [r2, #28]
 8003906:	4b91      	ldr	r3, [pc, #580]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003912:	2301      	movs	r3, #1
 8003914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003916:	4b8e      	ldr	r3, [pc, #568]	; (8003b50 <HAL_RCC_OscConfig+0x4f8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d118      	bne.n	8003954 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003922:	4b8b      	ldr	r3, [pc, #556]	; (8003b50 <HAL_RCC_OscConfig+0x4f8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a8a      	ldr	r2, [pc, #552]	; (8003b50 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392e:	f7fd fc7b 	bl	8001228 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003936:	f7fd fc77 	bl	8001228 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b64      	cmp	r3, #100	; 0x64
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0fd      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <HAL_RCC_OscConfig+0x4f8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x312>
 800395c:	4b7b      	ldr	r3, [pc, #492]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4a7a      	ldr	r2, [pc, #488]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	e02d      	b.n	80039c6 <HAL_RCC_OscConfig+0x36e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x334>
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4a75      	ldr	r2, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6213      	str	r3, [r2, #32]
 800397e:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4a72      	ldr	r2, [pc, #456]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	6213      	str	r3, [r2, #32]
 800398a:	e01c      	b.n	80039c6 <HAL_RCC_OscConfig+0x36e>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b05      	cmp	r3, #5
 8003992:	d10c      	bne.n	80039ae <HAL_RCC_OscConfig+0x356>
 8003994:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4a6c      	ldr	r2, [pc, #432]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 800399a:	f043 0304 	orr.w	r3, r3, #4
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4a69      	ldr	r2, [pc, #420]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6213      	str	r3, [r2, #32]
 80039ac:	e00b      	b.n	80039c6 <HAL_RCC_OscConfig+0x36e>
 80039ae:	4b67      	ldr	r3, [pc, #412]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4a66      	ldr	r2, [pc, #408]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	6213      	str	r3, [r2, #32]
 80039ba:	4b64      	ldr	r3, [pc, #400]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a63      	ldr	r2, [pc, #396]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80039c0:	f023 0304 	bic.w	r3, r3, #4
 80039c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d015      	beq.n	80039fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fc2b 	bl	8001228 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fd fc27 	bl	8001228 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0ab      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	4b57      	ldr	r3, [pc, #348]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ee      	beq.n	80039d6 <HAL_RCC_OscConfig+0x37e>
 80039f8:	e014      	b.n	8003a24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fa:	f7fd fc15 	bl	8001228 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fd fc11 	bl	8001228 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e095      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a18:	4b4c      	ldr	r3, [pc, #304]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1ee      	bne.n	8003a02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d105      	bne.n	8003a36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2a:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	4a47      	ldr	r2, [pc, #284]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8081 	beq.w	8003b42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a40:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d061      	beq.n	8003b10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d146      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a54:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <HAL_RCC_OscConfig+0x4fc>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fbe5 	bl	8001228 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fd fbe1 	bl	8001228 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e067      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a74:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f0      	bne.n	8003a62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a88:	d108      	bne.n	8003a9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a8a:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	492d      	ldr	r1, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a19      	ldr	r1, [r3, #32]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	430b      	orrs	r3, r1
 8003aae:	4927      	ldr	r1, [pc, #156]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x4fc>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fd fbb5 	bl	8001228 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd fbb1 	bl	8001228 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e037      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x46a>
 8003ae0:	e02f      	b.n	8003b42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <HAL_RCC_OscConfig+0x4fc>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fb9e 	bl	8001228 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fd fb9a 	bl	8001228 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e020      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x498>
 8003b0e:	e018      	b.n	8003b42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e013      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_OscConfig+0x4f4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42420060 	.word	0x42420060

08003b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0d0      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d910      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 0207 	bic.w	r2, r3, #7
 8003b82:	4965      	ldr	r1, [pc, #404]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b63      	ldr	r3, [pc, #396]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0b8      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d020      	beq.n	8003bea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a58      	ldr	r2, [pc, #352]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	494d      	ldr	r1, [pc, #308]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d040      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e07f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c16:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e073      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e06b      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c36:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f023 0203 	bic.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4936      	ldr	r1, [pc, #216]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c48:	f7fd faee 	bl	8001228 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fd faea 	bl	8001228 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e053      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 020c 	and.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1eb      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d210      	bcs.n	8003ca8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 0207 	bic.w	r2, r3, #7
 8003c8e:	4922      	ldr	r1, [pc, #136]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e032      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4916      	ldr	r1, [pc, #88]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	490e      	ldr	r1, [pc, #56]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce6:	f000 f821 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8003cea:	4602      	mov	r2, r0
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	490a      	ldr	r1, [pc, #40]	; (8003d20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	5ccb      	ldrb	r3, [r1, r3]
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1cc>)
 8003d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1d0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fa4c 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	0800512c 	.word	0x0800512c
 8003d24:	20000020 	.word	0x20000020
 8003d28:	20000024 	.word	0x20000024

08003d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d46:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x30>
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x36>
 8003d5a:	e027      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d5e:	613b      	str	r3, [r7, #16]
      break;
 8003d60:	e027      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	0c9b      	lsrs	r3, r3, #18
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d010      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	0c5b      	lsrs	r3, r3, #17
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d86:	5cd3      	ldrb	r3, [r2, r3]
 8003d88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d8e:	fb02 f203 	mul.w	r2, r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e004      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	613b      	str	r3, [r7, #16]
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dae:	613b      	str	r3, [r7, #16]
      break;
 8003db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db2:	693b      	ldr	r3, [r7, #16]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	007a1200 	.word	0x007a1200
 8003dc8:	08005144 	.word	0x08005144
 8003dcc:	08005154 	.word	0x08005154
 8003dd0:	003d0900 	.word	0x003d0900

08003dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b02      	ldr	r3, [pc, #8]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	20000020 	.word	0x20000020

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dec:	f7ff fff2 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	0800513c 	.word	0x0800513c

08003e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e14:	f7ff ffde 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4903      	ldr	r1, [pc, #12]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	0800513c 	.word	0x0800513c

08003e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <RCC_Delay+0x34>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <RCC_Delay+0x38>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0a5b      	lsrs	r3, r3, #9
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e54:	bf00      	nop
  }
  while (Delay --);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	60fa      	str	r2, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f9      	bne.n	8003e54 <RCC_Delay+0x1c>
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20000020 	.word	0x20000020
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e041      	b.n	8003f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd f87e 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fa5c 	bl	8004370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e03a      	b.n	8003fa2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <HAL_TIM_Base_Start_IT+0x98>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x58>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f56:	d009      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x58>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x58>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d010      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	e007      	b.n	8003fa0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40000800 	.word	0x40000800

08003fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d020      	beq.n	800401c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0202 	mvn.w	r2, #2
 8003fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f998 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f98b 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f99a 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d020      	beq.n	8004068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01b      	beq.n	8004068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0204 	mvn.w	r2, #4
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f972 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f965 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f974 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0208 	mvn.w	r2, #8
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f94c 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f93f 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f94e 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d020      	beq.n	8004100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01b      	beq.n	8004100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0210 	mvn.w	r2, #16
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2208      	movs	r2, #8
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f926 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f919 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f928 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0201 	mvn.w	r2, #1
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc fd04 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa7f 	bl	8004646 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8f8 	bl	800435c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00c      	beq.n	8004190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0220 	mvn.w	r2, #32
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa52 	bl	8004634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIM_ConfigClockSource+0x1c>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e0b4      	b.n	800431e <HAL_TIM_ConfigClockSource+0x186>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d03e      	beq.n	800426c <HAL_TIM_ConfigClockSource+0xd4>
 80041ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f2:	f200 8087 	bhi.w	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	f000 8086 	beq.w	800430a <HAL_TIM_ConfigClockSource+0x172>
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d87f      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b70      	cmp	r3, #112	; 0x70
 8004206:	d01a      	beq.n	800423e <HAL_TIM_ConfigClockSource+0xa6>
 8004208:	2b70      	cmp	r3, #112	; 0x70
 800420a:	d87b      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b60      	cmp	r3, #96	; 0x60
 800420e:	d050      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004210:	2b60      	cmp	r3, #96	; 0x60
 8004212:	d877      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b50      	cmp	r3, #80	; 0x50
 8004216:	d03c      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xfa>
 8004218:	2b50      	cmp	r3, #80	; 0x50
 800421a:	d873      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d058      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d86f      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b30      	cmp	r3, #48	; 0x30
 8004226:	d064      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b30      	cmp	r3, #48	; 0x30
 800422a:	d86b      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b20      	cmp	r3, #32
 800422e:	d060      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004230:	2b20      	cmp	r3, #32
 8004232:	d867      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d05c      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004238:	2b10      	cmp	r3, #16
 800423a:	d05a      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x15a>
 800423c:	e062      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f000 f974 	bl	800453a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	609a      	str	r2, [r3, #8]
      break;
 800426a:	e04f      	b.n	800430c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f000 f95d 	bl	800453a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800428e:	609a      	str	r2, [r3, #8]
      break;
 8004290:	e03c      	b.n	800430c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	461a      	mov	r2, r3
 80042a0:	f000 f8d4 	bl	800444c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2150      	movs	r1, #80	; 0x50
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f92b 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 80042b0:	e02c      	b.n	800430c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	461a      	mov	r2, r3
 80042c0:	f000 f8f2 	bl	80044a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2160      	movs	r1, #96	; 0x60
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f91b 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 80042d0:	e01c      	b.n	800430c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	461a      	mov	r2, r3
 80042e0:	f000 f8b4 	bl	800444c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f90b 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 80042f0:	e00c      	b.n	800430c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f000 f902 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 8004302:	e003      	b.n	800430c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      break;
 8004308:	e000      	b.n	800430c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800430a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
	...

08004370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <TIM_Base_SetConfig+0xd0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00b      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438e:	d007      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <TIM_Base_SetConfig+0xd4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <TIM_Base_SetConfig+0xd8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a22      	ldr	r2, [pc, #136]	; (8004440 <TIM_Base_SetConfig+0xd0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <TIM_Base_SetConfig+0xd4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <TIM_Base_SetConfig+0xd8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <TIM_Base_SetConfig+0xd0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f023 0201 	bic.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	611a      	str	r2, [r3, #16]
  }
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800

0800444c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f023 0201 	bic.w	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f023 030a 	bic.w	r3, r3, #10
 8004488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 0210 	bic.w	r2, r3, #16
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	031b      	lsls	r3, r3, #12
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	621a      	str	r2, [r3, #32]
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	f043 0307 	orr.w	r3, r3, #7
 8004528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800453a:	b480      	push	{r7}
 800453c:	b087      	sub	sp, #28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004554:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	021a      	lsls	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	431a      	orrs	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4313      	orrs	r3, r2
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	609a      	str	r2, [r3, #8]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e046      	b.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045dc:	d009      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a12      	ldr	r2, [pc, #72]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a10      	ldr	r2, [pc, #64]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10c      	bne.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4313      	orrs	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800

08004634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e042      	b.n	80046f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc fcb0 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	; 0x24
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fc7f 	bl	8004fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b0ba      	sub	sp, #232	; 0xe8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_UART_IRQHandler+0x66>
 800474a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fb63 	bl	8004e22 <UART_Receive_IT>
      return;
 800475c:	e25b      	b.n	8004c16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800475e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80de 	beq.w	8004924 <HAL_UART_IRQHandler+0x22c>
 8004768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80d1 	beq.w	8004924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_UART_IRQHandler+0xae>
 800478e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_UART_IRQHandler+0xd2>
 80047b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f043 0202 	orr.w	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_UART_IRQHandler+0xf6>
 80047d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d011      	beq.n	800481e <HAL_UART_IRQHandler+0x126>
 80047fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f043 0208 	orr.w	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 81f2 	beq.w	8004c0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_UART_IRQHandler+0x14e>
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 faee 	bl	8004e22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <HAL_UART_IRQHandler+0x17a>
 800486a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d04f      	beq.n	8004912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9f8 	bl	8004c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d041      	beq.n	800490a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800489c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1d9      	bne.n	8004886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d013      	beq.n	8004902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	4a7e      	ldr	r2, [pc, #504]	; (8004ad8 <HAL_UART_IRQHandler+0x3e0>)
 80048e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fdf0 	bl	80014cc <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e00e      	b.n	8004920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f99c 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e00a      	b.n	8004920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f998 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	e006      	b.n	8004920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f994 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800491e:	e175      	b.n	8004c0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	bf00      	nop
    return;
 8004922:	e173      	b.n	8004c0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	2b01      	cmp	r3, #1
 800492a:	f040 814f 	bne.w	8004bcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8148 	beq.w	8004bcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8141 	beq.w	8004bcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80b6 	beq.w	8004adc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800497c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8145 	beq.w	8004c10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800498a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498e:	429a      	cmp	r2, r3
 8004990:	f080 813e 	bcs.w	8004c10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800499a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f000 8088 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1d9      	bne.n	80049a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3314      	adds	r3, #20
 8004a14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a18:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e1      	bne.n	80049f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3314      	adds	r3, #20
 8004a50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a54:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e3      	bne.n	8004a30 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a88:	f023 0310 	bic.w	r3, r3, #16
 8004a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fccf 	bl	8001456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	4619      	mov	r1, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8bf 	bl	8004c52 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ad4:	e09c      	b.n	8004c10 <HAL_UART_IRQHandler+0x518>
 8004ad6:	bf00      	nop
 8004ad8:	08004d2d 	.word	0x08004d2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 808e 	beq.w	8004c14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8089 	beq.w	8004c14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b26:	647a      	str	r2, [r7, #68]	; 0x44
 8004b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e3      	bne.n	8004b02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3314      	adds	r3, #20
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	623b      	str	r3, [r7, #32]
   return(result);
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3314      	adds	r3, #20
 8004b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e3      	bne.n	8004b3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ba4:	61fa      	str	r2, [r7, #28]
 8004ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e3      	bne.n	8004b80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f844 	bl	8004c52 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bca:	e023      	b.n	8004c14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_UART_IRQHandler+0x4f4>
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8b5 	bl	8004d54 <UART_Transmit_IT>
    return;
 8004bea:	e014      	b.n	8004c16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <HAL_UART_IRQHandler+0x51e>
 8004bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f8f4 	bl	8004df2 <UART_EndTransmit_IT>
    return;
 8004c0a:	e004      	b.n	8004c16 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c0c:	bf00      	nop
 8004c0e:	e002      	b.n	8004c16 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c10:	bf00      	nop
 8004c12:	e000      	b.n	8004c16 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c14:	bf00      	nop
  }
}
 8004c16:	37e8      	adds	r7, #232	; 0xe8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b095      	sub	sp, #84	; 0x54
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c90:	643a      	str	r2, [r7, #64]	; 0x40
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d119      	bne.n	8004d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d00:	61ba      	str	r2, [r7, #24]
 8004d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d22:	bf00      	nop
 8004d24:	3754      	adds	r7, #84	; 0x54
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff ff7a 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b21      	cmp	r3, #33	; 0x21
 8004d66:	d13e      	bne.n	8004de6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d114      	bne.n	8004d9c <UART_Transmit_IT+0x48>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d110      	bne.n	8004d9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	1c9a      	adds	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]
 8004d9a:	e008      	b.n	8004dae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	1c59      	adds	r1, r3, #1
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6211      	str	r1, [r2, #32]
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff02 	bl	8004c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b08c      	sub	sp, #48	; 0x30
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b22      	cmp	r3, #34	; 0x22
 8004e34:	f040 80ae 	bne.w	8004f94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d117      	bne.n	8004e72 <UART_Receive_IT+0x50>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d113      	bne.n	8004e72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e70:	e026      	b.n	8004ec0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e84:	d007      	beq.n	8004e96 <UART_Receive_IT+0x74>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <UART_Receive_IT+0x82>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e008      	b.n	8004eb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d15d      	bne.n	8004f90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0220 	bic.w	r2, r2, #32
 8004ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d135      	bne.n	8004f86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f40:	623a      	str	r2, [r7, #32]
 8004f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	69f9      	ldr	r1, [r7, #28]
 8004f46:	6a3a      	ldr	r2, [r7, #32]
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e5      	bne.n	8004f20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d10a      	bne.n	8004f78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe67 	bl	8004c52 <HAL_UARTEx_RxEventCallback>
 8004f84:	e002      	b.n	8004f8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff fe51 	bl	8004c2e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e002      	b.n	8004f96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3730      	adds	r7, #48	; 0x30
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fda:	f023 030c 	bic.w	r3, r3, #12
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2c      	ldr	r2, [pc, #176]	; (80050b4 <UART_SetConfig+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d103      	bne.n	8005010 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005008:	f7fe ff02 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	e002      	b.n	8005016 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005010:	f7fe feea 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8005014:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <UART_SetConfig+0x118>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	0119      	lsls	r1, r3, #4
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	fbb2 f2f3 	udiv	r2, r2, r3
 800504c:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <UART_SetConfig+0x118>)
 800504e:	fba3 0302 	umull	r0, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2064      	movs	r0, #100	; 0x64
 8005056:	fb00 f303 	mul.w	r3, r0, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	3332      	adds	r3, #50	; 0x32
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <UART_SetConfig+0x118>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800506c:	4419      	add	r1, r3
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009a      	lsls	r2, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	fbb2 f2f3 	udiv	r2, r2, r3
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <UART_SetConfig+0x118>)
 8005086:	fba3 0302 	umull	r0, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2064      	movs	r0, #100	; 0x64
 800508e:	fb00 f303 	mul.w	r3, r0, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	3332      	adds	r3, #50	; 0x32
 8005098:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <UART_SetConfig+0x118>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	440a      	add	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40013800 	.word	0x40013800
 80050b8:	51eb851f 	.word	0x51eb851f

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	2600      	movs	r6, #0
 80050c0:	4d0c      	ldr	r5, [pc, #48]	; (80050f4 <__libc_init_array+0x38>)
 80050c2:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c4:	1b64      	subs	r4, r4, r5
 80050c6:	10a4      	asrs	r4, r4, #2
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	f000 f822 	bl	8005114 <_init>
 80050d0:	2600      	movs	r6, #0
 80050d2:	4d0a      	ldr	r5, [pc, #40]	; (80050fc <__libc_init_array+0x40>)
 80050d4:	4c0a      	ldr	r4, [pc, #40]	; (8005100 <__libc_init_array+0x44>)
 80050d6:	1b64      	subs	r4, r4, r5
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	08005158 	.word	0x08005158
 80050f8:	08005158 	.word	0x08005158
 80050fc:	08005158 	.word	0x08005158
 8005100:	0800515c 	.word	0x0800515c

08005104 <memset>:
 8005104:	4603      	mov	r3, r0
 8005106:	4402      	add	r2, r0
 8005108:	4293      	cmp	r3, r2
 800510a:	d100      	bne.n	800510e <memset+0xa>
 800510c:	4770      	bx	lr
 800510e:	f803 1b01 	strb.w	r1, [r3], #1
 8005112:	e7f9      	b.n	8005108 <memset+0x4>

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
