
PROJECT_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004320  08004320  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004320  08004320  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000090  080043b8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  080043b8  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e90  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002890  00000000  00000000  00031f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000347e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00035818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019165  00000000  00000000  00036738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001445f  00000000  00000000  0004f89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbce  00000000  00000000  00063cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f18ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004700  00000000  00000000  000f1920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004298 	.word	0x08004298

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004298 	.word	0x08004298

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_Write>:
#include "string.h"
#include "stdio.h"


void LCD_Write(uint8_t data)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT, LCD_D4, ((data >> 0) & 0x01));
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 0301 	and.w	r3, r3, #1
 800016c:	b2db      	uxtb	r3, r3
 800016e:	461a      	mov	r2, r3
 8000170:	2108      	movs	r1, #8
 8000172:	481a      	ldr	r0, [pc, #104]	; (80001dc <LCD_Write+0x80>)
 8000174:	f001 fd5b 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D5, ((data >> 1) & 0x01));
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	085b      	lsrs	r3, r3, #1
 800017c:	b2db      	uxtb	r3, r3
 800017e:	f003 0301 	and.w	r3, r3, #1
 8000182:	b2db      	uxtb	r3, r3
 8000184:	461a      	mov	r2, r3
 8000186:	2110      	movs	r1, #16
 8000188:	4814      	ldr	r0, [pc, #80]	; (80001dc <LCD_Write+0x80>)
 800018a:	f001 fd50 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D6, ((data >> 2) & 0x01));
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	089b      	lsrs	r3, r3, #2
 8000192:	b2db      	uxtb	r3, r3
 8000194:	f003 0301 	and.w	r3, r3, #1
 8000198:	b2db      	uxtb	r3, r3
 800019a:	461a      	mov	r2, r3
 800019c:	2120      	movs	r1, #32
 800019e:	480f      	ldr	r0, [pc, #60]	; (80001dc <LCD_Write+0x80>)
 80001a0:	f001 fd45 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D7, ((data >> 3) & 0x01));
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	08db      	lsrs	r3, r3, #3
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	f003 0301 	and.w	r3, r3, #1
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	2140      	movs	r1, #64	; 0x40
 80001b4:	4809      	ldr	r0, [pc, #36]	; (80001dc <LCD_Write+0x80>)
 80001b6:	f001 fd3a 	bl	8001c2e <HAL_GPIO_WritePin>

// kich hoat chan enable
	HAL_GPIO_WritePin(LCD_PORT,LCD_E, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2104      	movs	r1, #4
 80001be:	4807      	ldr	r0, [pc, #28]	; (80001dc <LCD_Write+0x80>)
 80001c0:	f001 fd35 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001c4:	2001      	movs	r0, #1
 80001c6:	f001 f9b3 	bl	8001530 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT,LCD_E, 0);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2104      	movs	r1, #4
 80001ce:	4803      	ldr	r0, [pc, #12]	; (80001dc <LCD_Write+0x80>)
 80001d0:	f001 fd2d 	bl	8001c2e <HAL_GPIO_WritePin>
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010800 	.word	0x40010800

080001e0 <LCD_Send>:
void LCD_Send(uint8_t Reg, uint8_t data)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	460a      	mov	r2, r1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	4613      	mov	r3, r2
 80001ee:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_PORT, LCD_RS, Reg);   // Reg = 0 : thanh ghi data ; Reg = 1 : thanh ghi lenh
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	461a      	mov	r2, r3
 80001f4:	2101      	movs	r1, #1
 80001f6:	4808      	ldr	r0, [pc, #32]	; (8000218 <LCD_Send+0x38>)
 80001f8:	f001 fd19 	bl	8001c2e <HAL_GPIO_WritePin>
	LCD_Write(data >> 4);
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	091b      	lsrs	r3, r3, #4
 8000200:	b2db      	uxtb	r3, r3
 8000202:	4618      	mov	r0, r3
 8000204:	f7ff ffaa 	bl	800015c <LCD_Write>
	LCD_Write(data);
 8000208:	79bb      	ldrb	r3, [r7, #6]
 800020a:	4618      	mov	r0, r3
 800020c:	f7ff ffa6 	bl	800015c <LCD_Write>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40010800 	.word	0x40010800

0800021c <LCD_Init>:
void LCD_Init()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT, LCD_RW, 0);    // chon che do ghi
 8000220:	2200      	movs	r2, #0
 8000222:	2102      	movs	r1, #2
 8000224:	480e      	ldr	r0, [pc, #56]	; (8000260 <LCD_Init+0x44>)
 8000226:	f001 fd02 	bl	8001c2e <HAL_GPIO_WritePin>

	LCD_Send(cmd_reg, 0x33);                   // lenh de khoi tao
 800022a:	2133      	movs	r1, #51	; 0x33
 800022c:	2000      	movs	r0, #0
 800022e:	f7ff ffd7 	bl	80001e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x32);                  // lenh de khoi tao
 8000232:	2132      	movs	r1, #50	; 0x32
 8000234:	2000      	movs	r0, #0
 8000236:	f7ff ffd3 	bl	80001e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x28);                   // che do 4 bit, 2 hang, 5x7
 800023a:	2128      	movs	r1, #40	; 0x28
 800023c:	2000      	movs	r0, #0
 800023e:	f7ff ffcf 	bl	80001e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x0C);                   // hien thi man hinh va tat con tro
 8000242:	210c      	movs	r1, #12
 8000244:	2000      	movs	r0, #0
 8000246:	f7ff ffcb 	bl	80001e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x06);                  // tang con tro
 800024a:	2106      	movs	r1, #6
 800024c:	2000      	movs	r0, #0
 800024e:	f7ff ffc7 	bl	80001e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x01);                   // xoa toan man hinh
 8000252:	2101      	movs	r1, #1
 8000254:	2000      	movs	r0, #0
 8000256:	f7ff ffc3 	bl	80001e0 <LCD_Send>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40010800 	.word	0x40010800

08000264 <LCD_Location>:
void LCD_Clear()                                //xoa toan man hinh
{
	LCD_Send(cmd_reg, 0x01);
}
void LCD_Location(uint8_t x, uint8_t y)         // chon vi tri
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	460a      	mov	r2, r1
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	4613      	mov	r3, r2
 8000272:	71bb      	strb	r3, [r7, #6]
  if(x == 0)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d107      	bne.n	800028a <LCD_Location+0x26>
	  LCD_Send(cmd_reg, 0x80 + y);
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	3b80      	subs	r3, #128	; 0x80
 800027e:	b2db      	uxtb	r3, r3
 8000280:	4619      	mov	r1, r3
 8000282:	2000      	movs	r0, #0
 8000284:	f7ff ffac 	bl	80001e0 <LCD_Send>
  else if(x == 1)
	  LCD_Send(cmd_reg, 0xC0 + y);
}
 8000288:	e009      	b.n	800029e <LCD_Location+0x3a>
  else if(x == 1)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d106      	bne.n	800029e <LCD_Location+0x3a>
	  LCD_Send(cmd_reg, 0xC0 + y);
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	3b40      	subs	r3, #64	; 0x40
 8000294:	b2db      	uxtb	r3, r3
 8000296:	4619      	mov	r1, r3
 8000298:	2000      	movs	r0, #0
 800029a:	f7ff ffa1 	bl	80001e0 <LCD_Send>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <LCD_Write_String>:
void LCD_Write_String(char* string)              // ghi chuoi ki tu
{
 80002a6:	b590      	push	{r4, r7, lr}
 80002a8:	b085      	sub	sp, #20
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e00a      	b.n	80002ca <LCD_Write_String+0x24>
	{
		LCD_Send(data_reg, string[i]);
 80002b4:	7bfb      	ldrb	r3, [r7, #15]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	4413      	add	r3, r2
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	2001      	movs	r0, #1
 80002c0:	f7ff ff8e 	bl	80001e0 <LCD_Send>
	for(uint8_t i = 0; i < strlen(string); i++)
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
 80002c6:	3301      	adds	r3, #1
 80002c8:	73fb      	strb	r3, [r7, #15]
 80002ca:	7bfc      	ldrb	r4, [r7, #15]
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f7ff ff3d 	bl	800014c <strlen>
 80002d2:	4603      	mov	r3, r0
 80002d4:	429c      	cmp	r4, r3
 80002d6:	d3ed      	bcc.n	80002b4 <LCD_Write_String+0xe>
	}
}
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd90      	pop	{r4, r7, pc}
	...

080002e4 <LCD_Write_Number>:
void LCD_Write_Number(int number)                 // ghi chu so
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer, "%d", number);
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	4906      	ldr	r1, [pc, #24]	; (800030c <LCD_Write_Number+0x28>)
 80002f4:	4618      	mov	r0, r3
 80002f6:	f003 fb95 	bl	8003a24 <siprintf>
	LCD_Write_String(buffer);
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffd1 	bl	80002a6 <LCD_Write_String>
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	080042b0 	.word	0x080042b0

08000310 <clearLed>:
 *  Created on: Nov 14, 2024
 *      Author: admin
 */
#include <RYG_LED.h>

void clearLed(){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	displayLed(-1);
 8000314:	f04f 30ff 	mov.w	r0, #4294967295
 8000318:	f000 f806 	bl	8000328 <displayLed>
	displayLed2(-1);
 800031c:	f04f 30ff 	mov.w	r0, #4294967295
 8000320:	f000 f848 	bl	80003b4 <displayLed2>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <displayLed>:

void displayLed(int state){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	switch(state){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f240 124d 	movw	r2, #333	; 0x14d
 8000336:	4293      	cmp	r3, r2
 8000338:	d020      	beq.n	800037c <displayLed+0x54>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8000340:	da27      	bge.n	8000392 <displayLed+0x6a>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2b6f      	cmp	r3, #111	; 0x6f
 8000346:	d003      	beq.n	8000350 <displayLed+0x28>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2bde      	cmp	r3, #222	; 0xde
 800034c:	d00b      	beq.n	8000366 <displayLed+0x3e>
 800034e:	e020      	b.n	8000392 <displayLed+0x6a>
		case RED:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000350:	2201      	movs	r2, #1
 8000352:	2108      	movs	r1, #8
 8000354:	4816      	ldr	r0, [pc, #88]	; (80003b0 <displayLed+0x88>)
 8000356:	f001 fc6a 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 800035a:	2201      	movs	r2, #1
 800035c:	2120      	movs	r1, #32
 800035e:	4814      	ldr	r0, [pc, #80]	; (80003b0 <displayLed+0x88>)
 8000360:	f001 fc65 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 8000364:	e020      	b.n	80003a8 <displayLed+0x80>
		case YEL:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	4811      	ldr	r0, [pc, #68]	; (80003b0 <displayLed+0x88>)
 800036c:	f001 fc5f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	2120      	movs	r1, #32
 8000374:	480e      	ldr	r0, [pc, #56]	; (80003b0 <displayLed+0x88>)
 8000376:	f001 fc5a 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 800037a:	e015      	b.n	80003a8 <displayLed+0x80>
		case GREEN:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800037c:	2201      	movs	r2, #1
 800037e:	2108      	movs	r1, #8
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <displayLed+0x88>)
 8000382:	f001 fc54 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2120      	movs	r1, #32
 800038a:	4809      	ldr	r0, [pc, #36]	; (80003b0 <displayLed+0x88>)
 800038c:	f001 fc4f 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 8000390:	e00a      	b.n	80003a8 <displayLed+0x80>
		default:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	2108      	movs	r1, #8
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <displayLed+0x88>)
 8000398:	f001 fc49 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2120      	movs	r1, #32
 80003a0:	4803      	ldr	r0, [pc, #12]	; (80003b0 <displayLed+0x88>)
 80003a2:	f001 fc44 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 80003a6:	bf00      	nop
	}
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <displayLed2>:
void displayLed2(int state){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	switch(state){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f240 124d 	movw	r2, #333	; 0x14d
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d022      	beq.n	800040c <displayLed2+0x58>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 80003cc:	da2a      	bge.n	8000424 <displayLed2+0x70>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2b6f      	cmp	r3, #111	; 0x6f
 80003d2:	d003      	beq.n	80003dc <displayLed2+0x28>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2bde      	cmp	r3, #222	; 0xde
 80003d8:	d00c      	beq.n	80003f4 <displayLed2+0x40>
 80003da:	e023      	b.n	8000424 <displayLed2+0x70>
		case RED:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	4818      	ldr	r0, [pc, #96]	; (8000444 <displayLed2+0x90>)
 80003e2:	f001 fc24 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ec:	4815      	ldr	r0, [pc, #84]	; (8000444 <displayLed2+0x90>)
 80003ee:	f001 fc1e 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 80003f2:	e023      	b.n	800043c <displayLed2+0x88>
		case YEL:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	4812      	ldr	r0, [pc, #72]	; (8000444 <displayLed2+0x90>)
 80003fa:	f001 fc18 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	480f      	ldr	r0, [pc, #60]	; (8000444 <displayLed2+0x90>)
 8000406:	f001 fc12 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 800040a:	e017      	b.n	800043c <displayLed2+0x88>
		case GREEN:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	2110      	movs	r1, #16
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <displayLed2+0x90>)
 8000412:	f001 fc0c 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041c:	4809      	ldr	r0, [pc, #36]	; (8000444 <displayLed2+0x90>)
 800041e:	f001 fc06 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 8000422:	e00b      	b.n	800043c <displayLed2+0x88>
		default:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	4806      	ldr	r0, [pc, #24]	; (8000444 <displayLed2+0x90>)
 800042a:	f001 fc00 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000434:	4803      	ldr	r0, [pc, #12]	; (8000444 <displayLed2+0x90>)
 8000436:	f001 fbfa 	bl	8001c2e <HAL_GPIO_WritePin>
			break;
 800043a:	bf00      	nop
	}
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40010c00 	.word	0x40010c00

08000448 <init_Button>:
int TimeOutForKeyPress[NUM_BUTTON];
int button_pressed[NUM_BUTTON];
int button_long_pressed[NUM_BUTTON];
int button_flag[NUM_BUTTON];

void init_Button(int i){
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
		 KeyReg0[i] = NORMAL_STATE;
 8000450:	4a16      	ldr	r2, [pc, #88]	; (80004ac <init_Button+0x64>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2101      	movs	r1, #1
 8000456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg1[i] = NORMAL_STATE;
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <init_Button+0x68>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2101      	movs	r1, #1
 8000460:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg2[i] = NORMAL_STATE;
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <init_Button+0x6c>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2101      	movs	r1, #1
 800046a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg3[i] = NORMAL_STATE;
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <init_Button+0x70>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2101      	movs	r1, #1
 8000474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 TimeOutForKeyPress[i] =  1000;
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <init_Button+0x74>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000480:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_pressed[i] = 0;
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <init_Button+0x78>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2100      	movs	r1, #0
 800048a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_long_pressed[i] = 0;
 800048e:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <init_Button+0x7c>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2100      	movs	r1, #0
 8000494:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_flag[i] = 0;
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <init_Button+0x80>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	200000d0 	.word	0x200000d0
 80004b0:	200000dc 	.word	0x200000dc
 80004b4:	2000010c 	.word	0x2000010c
 80004b8:	200000c4 	.word	0x200000c4
 80004bc:	200000e8 	.word	0x200000e8
 80004c0:	20000100 	.word	0x20000100
 80004c4:	20000118 	.word	0x20000118
 80004c8:	200000f4 	.word	0x200000f4

080004cc <isButtonPressed>:


GPIO_TypeDef* button_ports[] = {BUTTON1_GPIO_Port,BUTTON2_GPIO_Port,BUTTON3_GPIO_Port};
uint16_t button_pins[] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

int isButtonPressed( int index ){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 80004d4:	4a09      	ldr	r2, [pc, #36]	; (80004fc <isButtonPressed+0x30>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d106      	bne.n	80004ee <isButtonPressed+0x22>
		button_flag[index] = 0;
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <isButtonPressed+0x30>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2100      	movs	r1, #0
 80004e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	e000      	b.n	80004f0 <isButtonPressed+0x24>
	}
	return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	200000f4 	.word	0x200000f4

08000500 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTON; i++){
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e07d      	b.n	8000608 <getKeyInput+0x108>
		KeyReg2[i] = KeyReg1[i];
 800050c:	4a43      	ldr	r2, [pc, #268]	; (800061c <getKeyInput+0x11c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000514:	4942      	ldr	r1, [pc, #264]	; (8000620 <getKeyInput+0x120>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800051c:	4a41      	ldr	r2, [pc, #260]	; (8000624 <getKeyInput+0x124>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000524:	493d      	ldr	r1, [pc, #244]	; (800061c <getKeyInput+0x11c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  KeyReg0[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 800052c:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <getKeyInput+0x128>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000534:	493d      	ldr	r1, [pc, #244]	; (800062c <getKeyInput+0x12c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800053c:	4619      	mov	r1, r3
 800053e:	4610      	mov	r0, r2
 8000540:	f001 fb5e 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	4619      	mov	r1, r3
 8000548:	4a36      	ldr	r2, [pc, #216]	; (8000624 <getKeyInput+0x124>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000550:	4a32      	ldr	r2, [pc, #200]	; (800061c <getKeyInput+0x11c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000558:	4932      	ldr	r1, [pc, #200]	; (8000624 <getKeyInput+0x124>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000560:	429a      	cmp	r2, r3
 8000562:	d14e      	bne.n	8000602 <getKeyInput+0x102>
 8000564:	4a2d      	ldr	r2, [pc, #180]	; (800061c <getKeyInput+0x11c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056c:	492c      	ldr	r1, [pc, #176]	; (8000620 <getKeyInput+0x120>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000574:	429a      	cmp	r2, r3
 8000576:	d144      	bne.n	8000602 <getKeyInput+0x102>
		if (KeyReg2[i] != KeyReg3[i]){
 8000578:	4a29      	ldr	r2, [pc, #164]	; (8000620 <getKeyInput+0x120>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000580:	492b      	ldr	r1, [pc, #172]	; (8000630 <getKeyInput+0x130>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000588:	429a      	cmp	r2, r3
 800058a:	d019      	beq.n	80005c0 <getKeyInput+0xc0>
		  KeyReg3[i] = KeyReg2[i];
 800058c:	4a24      	ldr	r2, [pc, #144]	; (8000620 <getKeyInput+0x120>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000594:	4926      	ldr	r1, [pc, #152]	; (8000630 <getKeyInput+0x130>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 800059c:	4a24      	ldr	r2, [pc, #144]	; (8000630 <getKeyInput+0x130>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d12c      	bne.n	8000602 <getKeyInput+0x102>
			TimeOutForKeyPress[i] = 1000;
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <getKeyInput+0x134>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			//subKeyProcess();
			button_flag[i] = 1;
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <getKeyInput+0x138>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2101      	movs	r1, #1
 80005ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80005be:	e020      	b.n	8000602 <getKeyInput+0x102>
		  }

		}else{
			TimeOutForKeyPress[i] -= 10;
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <getKeyInput+0x134>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	f1a3 020a 	sub.w	r2, r3, #10
 80005cc:	4919      	ldr	r1, [pc, #100]	; (8000634 <getKeyInput+0x134>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <getKeyInput+0x134>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d110      	bne.n	8000602 <getKeyInput+0x102>
				TimeOutForKeyPress[i] = 500;
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <getKeyInput+0x134>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <getKeyInput+0x130>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d104      	bne.n	8000602 <getKeyInput+0x102>
					//subKeyProcess();
					button_flag[i] = 1;
 80005f8:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <getKeyInput+0x138>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2101      	movs	r1, #1
 80005fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTON; i++){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3301      	adds	r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b02      	cmp	r3, #2
 800060c:	f77f af7e 	ble.w	800050c <getKeyInput+0xc>
				}
			}
		}
	  }
	}
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000dc 	.word	0x200000dc
 8000620:	2000010c 	.word	0x2000010c
 8000624:	200000d0 	.word	0x200000d0
 8000628:	20000000 	.word	0x20000000
 800062c:	2000000c 	.word	0x2000000c
 8000630:	200000c4 	.word	0x200000c4
 8000634:	200000e8 	.word	0x200000e8
 8000638:	200000f4 	.word	0x200000f4

0800063c <checkTime>:

//int red_time = 5000;
//int green_time = 3000;
//int yel_time = 2000;

void checkTime(){
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	if(red_time != yel_time + green_time){
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <checkTime+0x2c>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <checkTime+0x30>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	441a      	add	r2, r3
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <checkTime+0x34>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	d006      	beq.n	8000660 <checkTime+0x24>
		red_time = yel_time + green_time;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <checkTime+0x2c>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <checkTime+0x30>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <checkTime+0x34>)
 800065e:	6013      	str	r3, [r2, #0]
	}
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	2000001c 	.word	0x2000001c
 800066c:	20000018 	.word	0x20000018
 8000670:	20000014 	.word	0x20000014

08000674 <fsm_traffic>:

void fsm_traffic(){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	switch(status){
 800067a:	4bc0      	ldr	r3, [pc, #768]	; (800097c <fsm_traffic+0x308>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3b01      	subs	r3, #1
 8000680:	2b08      	cmp	r3, #8
 8000682:	f200 81b1 	bhi.w	80009e8 <fsm_traffic+0x374>
 8000686:	a201      	add	r2, pc, #4	; (adr r2, 800068c <fsm_traffic+0x18>)
 8000688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068c:	080006b1 	.word	0x080006b1
 8000690:	0800075f 	.word	0x0800075f
 8000694:	080007a1 	.word	0x080007a1
 8000698:	080006dd 	.word	0x080006dd
 800069c:	0800071f 	.word	0x0800071f
 80006a0:	08000825 	.word	0x08000825
 80006a4:	080008c3 	.word	0x080008c3
 80006a8:	0800094f 	.word	0x0800094f
 80006ac:	080007e1 	.word	0x080007e1
		case INIT:
			checkTime();
 80006b0:	f7ff ffc4 	bl	800063c <checkTime>
			status = RED_GREEN;
 80006b4:	4bb1      	ldr	r3, [pc, #708]	; (800097c <fsm_traffic+0x308>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	601a      	str	r2, [r3, #0]
			setTimer(0,green_time);
 80006ba:	4bb1      	ldr	r3, [pc, #708]	; (8000980 <fsm_traffic+0x30c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fce9 	bl	8001098 <setTimer>
			if(isButtonPressed(0)) status = MAN_INIT;
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff ff00 	bl	80004cc <isButtonPressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f000 818c 	beq.w	80009ec <fsm_traffic+0x378>
 80006d4:	4ba9      	ldr	r3, [pc, #676]	; (800097c <fsm_traffic+0x308>)
 80006d6:	2209      	movs	r2, #9
 80006d8:	601a      	str	r2, [r3, #0]
			break;
 80006da:	e187      	b.n	80009ec <fsm_traffic+0x378>

		case RED_GREEN:
			displayLed(RED);
 80006dc:	206f      	movs	r0, #111	; 0x6f
 80006de:	f7ff fe23 	bl	8000328 <displayLed>
			displayLed2(GREEN);
 80006e2:	f240 104d 	movw	r0, #333	; 0x14d
 80006e6:	f7ff fe65 	bl	80003b4 <displayLed2>
			if(isTimerExpired(0)){
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fcf4 	bl	80010d8 <isTimerExpired>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d008      	beq.n	8000708 <fsm_traffic+0x94>
				status = RED_YEL;
 80006f6:	4ba1      	ldr	r3, [pc, #644]	; (800097c <fsm_traffic+0x308>)
 80006f8:	2205      	movs	r2, #5
 80006fa:	601a      	str	r2, [r3, #0]
				setTimer(0,yel_time);
 80006fc:	4ba1      	ldr	r3, [pc, #644]	; (8000984 <fsm_traffic+0x310>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	2000      	movs	r0, #0
 8000704:	f000 fcc8 	bl	8001098 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fedf 	bl	80004cc <isButtonPressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	f000 816d 	beq.w	80009f0 <fsm_traffic+0x37c>
 8000716:	4b99      	ldr	r3, [pc, #612]	; (800097c <fsm_traffic+0x308>)
 8000718:	2209      	movs	r2, #9
 800071a:	601a      	str	r2, [r3, #0]
			break;
 800071c:	e168      	b.n	80009f0 <fsm_traffic+0x37c>

		case RED_YEL:
			displayLed(RED);
 800071e:	206f      	movs	r0, #111	; 0x6f
 8000720:	f7ff fe02 	bl	8000328 <displayLed>
			displayLed2(YEL);
 8000724:	20de      	movs	r0, #222	; 0xde
 8000726:	f7ff fe45 	bl	80003b4 <displayLed2>
			if(isTimerExpired(0)){
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fcd4 	bl	80010d8 <isTimerExpired>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d008      	beq.n	8000748 <fsm_traffic+0xd4>
				status = GREEN_RED;
 8000736:	4b91      	ldr	r3, [pc, #580]	; (800097c <fsm_traffic+0x308>)
 8000738:	2202      	movs	r2, #2
 800073a:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 800073c:	4b90      	ldr	r3, [pc, #576]	; (8000980 <fsm_traffic+0x30c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fca8 	bl	8001098 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff febf 	bl	80004cc <isButtonPressed>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	f000 814f 	beq.w	80009f4 <fsm_traffic+0x380>
 8000756:	4b89      	ldr	r3, [pc, #548]	; (800097c <fsm_traffic+0x308>)
 8000758:	2209      	movs	r2, #9
 800075a:	601a      	str	r2, [r3, #0]
			break;
 800075c:	e14a      	b.n	80009f4 <fsm_traffic+0x380>
		case GREEN_RED:
			displayLed(GREEN);
 800075e:	f240 104d 	movw	r0, #333	; 0x14d
 8000762:	f7ff fde1 	bl	8000328 <displayLed>
			displayLed2(RED);
 8000766:	206f      	movs	r0, #111	; 0x6f
 8000768:	f7ff fe24 	bl	80003b4 <displayLed2>
			if(isTimerExpired(0)){
 800076c:	2000      	movs	r0, #0
 800076e:	f000 fcb3 	bl	80010d8 <isTimerExpired>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d008      	beq.n	800078a <fsm_traffic+0x116>
				status = YEL_RED;
 8000778:	4b80      	ldr	r3, [pc, #512]	; (800097c <fsm_traffic+0x308>)
 800077a:	2203      	movs	r2, #3
 800077c:	601a      	str	r2, [r3, #0]
				setTimer(0, yel_time);
 800077e:	4b81      	ldr	r3, [pc, #516]	; (8000984 <fsm_traffic+0x310>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fc87 	bl	8001098 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff fe9e 	bl	80004cc <isButtonPressed>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 8130 	beq.w	80009f8 <fsm_traffic+0x384>
 8000798:	4b78      	ldr	r3, [pc, #480]	; (800097c <fsm_traffic+0x308>)
 800079a:	2209      	movs	r2, #9
 800079c:	601a      	str	r2, [r3, #0]
			break;
 800079e:	e12b      	b.n	80009f8 <fsm_traffic+0x384>
		case YEL_RED:
			displayLed(YEL);
 80007a0:	20de      	movs	r0, #222	; 0xde
 80007a2:	f7ff fdc1 	bl	8000328 <displayLed>
			displayLed2(RED);
 80007a6:	206f      	movs	r0, #111	; 0x6f
 80007a8:	f7ff fe04 	bl	80003b4 <displayLed2>
			if(isTimerExpired(0)){
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fc93 	bl	80010d8 <isTimerExpired>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d008      	beq.n	80007ca <fsm_traffic+0x156>
				status = RED_GREEN;
 80007b8:	4b70      	ldr	r3, [pc, #448]	; (800097c <fsm_traffic+0x308>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 80007be:	4b70      	ldr	r3, [pc, #448]	; (8000980 <fsm_traffic+0x30c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4619      	mov	r1, r3
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 fc67 	bl	8001098 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fe7e 	bl	80004cc <isButtonPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 8112 	beq.w	80009fc <fsm_traffic+0x388>
 80007d8:	4b68      	ldr	r3, [pc, #416]	; (800097c <fsm_traffic+0x308>)
 80007da:	2209      	movs	r2, #9
 80007dc:	601a      	str	r2, [r3, #0]
			break;
 80007de:	e10d      	b.n	80009fc <fsm_traffic+0x388>

		case MAN_INIT:
			 for(int i = 0 ; i < NUM_BUTTON; i++){
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	e005      	b.n	80007f2 <fsm_traffic+0x17e>
				 init_Button(i);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fe2e 	bl	8000448 <init_Button>
			 for(int i = 0 ; i < NUM_BUTTON; i++){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	ddf6      	ble.n	80007e6 <fsm_traffic+0x172>
			 }
			setTimer(0,BLINK_TIME);
 80007f8:	2132      	movs	r1, #50	; 0x32
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fc4c 	bl	8001098 <setTimer>
			status = MAN_RED;
 8000800:	4b5e      	ldr	r3, [pc, #376]	; (800097c <fsm_traffic+0x308>)
 8000802:	2206      	movs	r2, #6
 8000804:	601a      	str	r2, [r3, #0]
			clearLed();
 8000806:	f7ff fd83 	bl	8000310 <clearLed>
			temp[0] = red_time;
 800080a:	4b5f      	ldr	r3, [pc, #380]	; (8000988 <fsm_traffic+0x314>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <fsm_traffic+0x318>)
 8000810:	6013      	str	r3, [r2, #0]
			temp[1] = yel_time;
 8000812:	4b5c      	ldr	r3, [pc, #368]	; (8000984 <fsm_traffic+0x310>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a5d      	ldr	r2, [pc, #372]	; (800098c <fsm_traffic+0x318>)
 8000818:	6053      	str	r3, [r2, #4]
			temp[2] = green_time;
 800081a:	4b59      	ldr	r3, [pc, #356]	; (8000980 <fsm_traffic+0x30c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a5b      	ldr	r2, [pc, #364]	; (800098c <fsm_traffic+0x318>)
 8000820:	6093      	str	r3, [r2, #8]
			break;
 8000822:	e0f2      	b.n	8000a0a <fsm_traffic+0x396>
		case MAN_RED:
			if(isButtonPressed(0)){
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fe51 	bl	80004cc <isButtonPressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d009      	beq.n	8000844 <fsm_traffic+0x1d0>
				status = MAN_YEL;
 8000830:	4b52      	ldr	r3, [pc, #328]	; (800097c <fsm_traffic+0x308>)
 8000832:	2207      	movs	r2, #7
 8000834:	601a      	str	r2, [r3, #0]
				clearLed();
 8000836:	f7ff fd6b 	bl	8000310 <clearLed>
				setTimer(0, BLINK_TIME);
 800083a:	2132      	movs	r1, #50	; 0x32
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fc2b 	bl	8001098 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 8000842:	e0dd      	b.n	8000a00 <fsm_traffic+0x38c>
			else if(isButtonPressed(1)){
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff fe41 	bl	80004cc <isButtonPressed>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <fsm_traffic+0x1ea>
				temp[0] += 1000;
 8000850:	4b4e      	ldr	r3, [pc, #312]	; (800098c <fsm_traffic+0x318>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000858:	4a4c      	ldr	r2, [pc, #304]	; (800098c <fsm_traffic+0x318>)
 800085a:	6013      	str	r3, [r2, #0]
			break;
 800085c:	e0d0      	b.n	8000a00 <fsm_traffic+0x38c>
			}else if(isButtonPressed(2)){
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff fe34 	bl	80004cc <isButtonPressed>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00e      	beq.n	8000888 <fsm_traffic+0x214>
				red_time = temp[0];
 800086a:	4b48      	ldr	r3, [pc, #288]	; (800098c <fsm_traffic+0x318>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a46      	ldr	r2, [pc, #280]	; (8000988 <fsm_traffic+0x314>)
 8000870:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000872:	2100      	movs	r1, #0
 8000874:	2000      	movs	r0, #0
 8000876:	f000 fc0f 	bl	8001098 <setTimer>
				displayLed(RED);
 800087a:	206f      	movs	r0, #111	; 0x6f
 800087c:	f7ff fd54 	bl	8000328 <displayLed>
				displayLed2(RED);
 8000880:	206f      	movs	r0, #111	; 0x6f
 8000882:	f7ff fd97 	bl	80003b4 <displayLed2>
			break;
 8000886:	e0bb      	b.n	8000a00 <fsm_traffic+0x38c>
			else if(isTimerExpired(0)){
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fc25 	bl	80010d8 <isTimerExpired>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	f000 80b5 	beq.w	8000a00 <fsm_traffic+0x38c>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000896:	2110      	movs	r1, #16
 8000898:	483d      	ldr	r0, [pc, #244]	; (8000990 <fsm_traffic+0x31c>)
 800089a:	f001 f9e0 	bl	8001c5e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800089e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a2:	483b      	ldr	r0, [pc, #236]	; (8000990 <fsm_traffic+0x31c>)
 80008a4:	f001 f9db 	bl	8001c5e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80008a8:	2108      	movs	r1, #8
 80008aa:	4839      	ldr	r0, [pc, #228]	; (8000990 <fsm_traffic+0x31c>)
 80008ac:	f001 f9d7 	bl	8001c5e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80008b0:	2120      	movs	r1, #32
 80008b2:	4837      	ldr	r0, [pc, #220]	; (8000990 <fsm_traffic+0x31c>)
 80008b4:	f001 f9d3 	bl	8001c5e <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 80008b8:	2132      	movs	r1, #50	; 0x32
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fbec 	bl	8001098 <setTimer>
			break;
 80008c0:	e09e      	b.n	8000a00 <fsm_traffic+0x38c>

		case MAN_YEL:
			if(isButtonPressed(0)){
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff fe02 	bl	80004cc <isButtonPressed>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d009      	beq.n	80008e2 <fsm_traffic+0x26e>
				status = MAN_GREEN;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <fsm_traffic+0x308>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	601a      	str	r2, [r3, #0]
				clearLed();
 80008d4:	f7ff fd1c 	bl	8000310 <clearLed>
				setTimer(0, BLINK_TIME);
 80008d8:	2132      	movs	r1, #50	; 0x32
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fbdc 	bl	8001098 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);

				setTimer(0, BLINK_TIME);
			}
			break;
 80008e0:	e090      	b.n	8000a04 <fsm_traffic+0x390>
			}else if(isButtonPressed(1)){
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff fdf2 	bl	80004cc <isButtonPressed>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d006      	beq.n	80008fc <fsm_traffic+0x288>
				temp[1] += 1000;
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <fsm_traffic+0x318>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008f6:	4a25      	ldr	r2, [pc, #148]	; (800098c <fsm_traffic+0x318>)
 80008f8:	6053      	str	r3, [r2, #4]
			break;
 80008fa:	e083      	b.n	8000a04 <fsm_traffic+0x390>
			}else if(isButtonPressed(2)){
 80008fc:	2002      	movs	r0, #2
 80008fe:	f7ff fde5 	bl	80004cc <isButtonPressed>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00e      	beq.n	8000926 <fsm_traffic+0x2b2>
				yel_time = temp[1];
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <fsm_traffic+0x318>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <fsm_traffic+0x310>)
 800090e:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000910:	2100      	movs	r1, #0
 8000912:	2000      	movs	r0, #0
 8000914:	f000 fbc0 	bl	8001098 <setTimer>
				displayLed(YEL);
 8000918:	20de      	movs	r0, #222	; 0xde
 800091a:	f7ff fd05 	bl	8000328 <displayLed>
				displayLed2(YEL);
 800091e:	20de      	movs	r0, #222	; 0xde
 8000920:	f7ff fd48 	bl	80003b4 <displayLed2>
			break;
 8000924:	e06e      	b.n	8000a04 <fsm_traffic+0x390>
			else if(isTimerExpired(0)){
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fbd6 	bl	80010d8 <isTimerExpired>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d068      	beq.n	8000a04 <fsm_traffic+0x390>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <fsm_traffic+0x31c>)
 8000938:	f001 f991 	bl	8001c5e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800093c:	2120      	movs	r1, #32
 800093e:	4814      	ldr	r0, [pc, #80]	; (8000990 <fsm_traffic+0x31c>)
 8000940:	f001 f98d 	bl	8001c5e <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000944:	2132      	movs	r1, #50	; 0x32
 8000946:	2000      	movs	r0, #0
 8000948:	f000 fba6 	bl	8001098 <setTimer>
			break;
 800094c:	e05a      	b.n	8000a04 <fsm_traffic+0x390>

		case MAN_GREEN:
			if(isButtonPressed(0)){
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fdbc 	bl	80004cc <isButtonPressed>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <fsm_traffic+0x2ee>
				status = INIT;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <fsm_traffic+0x308>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
			else if(isTimerExpired(0)){
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 8000960:	e052      	b.n	8000a08 <fsm_traffic+0x394>
			}else if(isButtonPressed(1)){
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff fdb2 	bl	80004cc <isButtonPressed>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d012      	beq.n	8000994 <fsm_traffic+0x320>
				temp[2] += 1000;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <fsm_traffic+0x318>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <fsm_traffic+0x318>)
 8000978:	6093      	str	r3, [r2, #8]
			break;
 800097a:	e045      	b.n	8000a08 <fsm_traffic+0x394>
 800097c:	200000ac 	.word	0x200000ac
 8000980:	20000018 	.word	0x20000018
 8000984:	2000001c 	.word	0x2000001c
 8000988:	20000014 	.word	0x20000014
 800098c:	20000124 	.word	0x20000124
 8000990:	40010c00 	.word	0x40010c00
			}else if(isButtonPressed(2)){
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff fd99 	bl	80004cc <isButtonPressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d010      	beq.n	80009c2 <fsm_traffic+0x34e>
				green_time = temp[2];
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <fsm_traffic+0x3a0>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <fsm_traffic+0x3a4>)
 80009a6:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 80009a8:	2100      	movs	r1, #0
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 fb74 	bl	8001098 <setTimer>
				displayLed(GREEN);
 80009b0:	f240 104d 	movw	r0, #333	; 0x14d
 80009b4:	f7ff fcb8 	bl	8000328 <displayLed>
				displayLed2(GREEN);
 80009b8:	f240 104d 	movw	r0, #333	; 0x14d
 80009bc:	f7ff fcfa 	bl	80003b4 <displayLed2>
			break;
 80009c0:	e022      	b.n	8000a08 <fsm_traffic+0x394>
			else if(isTimerExpired(0)){
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fb88 	bl	80010d8 <isTimerExpired>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d01c      	beq.n	8000a08 <fsm_traffic+0x394>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 80009ce:	2110      	movs	r1, #16
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <fsm_traffic+0x3a8>)
 80009d2:	f001 f944 	bl	8001c5e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80009d6:	2108      	movs	r1, #8
 80009d8:	4810      	ldr	r0, [pc, #64]	; (8000a1c <fsm_traffic+0x3a8>)
 80009da:	f001 f940 	bl	8001c5e <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 80009de:	2132      	movs	r1, #50	; 0x32
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fb59 	bl	8001098 <setTimer>
			break;
 80009e6:	e00f      	b.n	8000a08 <fsm_traffic+0x394>

		default:
				break;
 80009e8:	bf00      	nop
 80009ea:	e00e      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 80009ec:	bf00      	nop
 80009ee:	e00c      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 80009f0:	bf00      	nop
 80009f2:	e00a      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 80009f4:	bf00      	nop
 80009f6:	e008      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 80009f8:	bf00      	nop
 80009fa:	e006      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 80009fc:	bf00      	nop
 80009fe:	e004      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 8000a00:	bf00      	nop
 8000a02:	e002      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 8000a04:	bf00      	nop
 8000a06:	e000      	b.n	8000a0a <fsm_traffic+0x396>
			break;
 8000a08:	bf00      	nop
		}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000124 	.word	0x20000124
 8000a18:	20000018 	.word	0x20000018
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f000 fd21 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f861 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f000 f945 	bl	8000cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a32:	f000 f919 	bl	8000c68 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a36:	f000 f8cb 	bl	8000bd0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000a3a:	f000 f89b 	bl	8000b74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <main+0xb0>)
 8000a40:	f001 feea 	bl	8002818 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000a44:	f000 f9ea 	bl	8000e1c <SCH_Init>
  for(int i = 0 ; i < NUM_BUTTON; i++){
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	e005      	b.n	8000a5a <main+0x3a>
	  init_Button(i);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fcfa 	bl	8000448 <init_Button>
  for(int i = 0 ; i < NUM_BUTTON; i++){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	ddf6      	ble.n	8000a4e <main+0x2e>
  }
  LCD_Init();
 8000a60:	f7ff fbdc 	bl	800021c <LCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <main+0xb4>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(getKeyInput, 0, 10);
 8000a6a:	220a      	movs	r2, #10
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <main+0xb8>)
 8000a70:	f000 f9e4 	bl	8000e3c <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 10);
 8000a74:	220a      	movs	r2, #10
 8000a76:	2100      	movs	r1, #0
 8000a78:	4818      	ldr	r0, [pc, #96]	; (8000adc <main+0xbc>)
 8000a7a:	f000 f9df 	bl	8000e3c <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic, 0, 10);
 8000a7e:	220a      	movs	r2, #10
 8000a80:	2100      	movs	r1, #0
 8000a82:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <main+0xc0>)
 8000a84:	f000 f9da 	bl	8000e3c <SCH_Add_Task>
  while (1)
  {
//	  fsm_traffic();
	  SCH_Dispatch_Tasks();
 8000a88:	f000 fa80 	bl	8000f8c <SCH_Dispatch_Tasks>
	  LCD_Location(0, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fbe8 	bl	8000264 <LCD_Location>
	  LCD_Write_String("TRAFFIC1");
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <main+0xc4>)
 8000a96:	f7ff fc06 	bl	80002a6 <LCD_Write_String>
	  LCD_Location(1, 0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff fbe1 	bl	8000264 <LCD_Location>
	  LCD_Write_Number(red_time);
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <main+0xc8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fc1c 	bl	80002e4 <LCD_Write_Number>

	  LCD_Location(0, 8);
 8000aac:	2108      	movs	r1, #8
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fbd8 	bl	8000264 <LCD_Location>
	  LCD_Write_Number(green_time);
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <main+0xcc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fc13 	bl	80002e4 <LCD_Write_Number>
	  LCD_Location(1, 8);
 8000abe:	2108      	movs	r1, #8
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fbcf 	bl	8000264 <LCD_Location>
	  LCD_Write_String("TRAFFIC1");
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <main+0xc4>)
 8000ac8:	f7ff fbed 	bl	80002a6 <LCD_Write_String>
	  SCH_Dispatch_Tasks();
 8000acc:	e7dc      	b.n	8000a88 <main+0x68>
 8000ace:	bf00      	nop
 8000ad0:	20000184 	.word	0x20000184
 8000ad4:	200000ac 	.word	0x200000ac
 8000ad8:	08000501 	.word	0x08000501
 8000adc:	0800110d 	.word	0x0800110d
 8000ae0:	08000675 	.word	0x08000675
 8000ae4:	080042b4 	.word	0x080042b4
 8000ae8:	20000014 	.word	0x20000014
 8000aec:	20000018 	.word	0x20000018

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b090      	sub	sp, #64	; 0x40
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	2228      	movs	r2, #40	; 0x28
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 ff88 	bl	8003a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b16:	2301      	movs	r3, #1
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b26:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fa13 	bl	8001f5c <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b3c:	f000 f968 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
 8000b42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fc7e 	bl	800245c <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b66:	f000 f953 	bl	8000e10 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3740      	adds	r7, #64	; 0x40
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MX_I2C1_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bb2:	f001 f88f 	bl	8001cd4 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 f928 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000130 	.word	0x20000130
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bf6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000bfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c04:	2209      	movs	r2, #9
 8000c06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c14:	4813      	ldr	r0, [pc, #76]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c16:	f001 fdaf 	bl	8002778 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c20:	f000 f8f6 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c32:	f001 ff33 	bl	8002a9c <HAL_TIM_ConfigClockSource>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c3c:	f000 f8e8 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c4e:	f002 f915 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c58:	f000 f8da 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000184 	.word	0x20000184

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART2_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f002 f95c 	bl	8002f5c <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f000 f8b1 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001cc 	.word	0x200001cc
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a44      	ldr	r2, [pc, #272]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b3f      	ldr	r3, [pc, #252]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a3e      	ldr	r2, [pc, #248]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b3c      	ldr	r3, [pc, #240]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a38      	ldr	r2, [pc, #224]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a32      	ldr	r2, [pc, #200]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000d36:	482d      	ldr	r0, [pc, #180]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d38:	f000 ff79 	bl	8001c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d42:	482b      	ldr	r0, [pc, #172]	; (8000df0 <MX_GPIO_Init+0x134>)
 8000d44:	f000 ff73 	bl	8001c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4826      	ldr	r0, [pc, #152]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d5e:	f000 fdcb 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON4_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000d62:	2313      	movs	r3, #19
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	481d      	ldr	r0, [pc, #116]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d76:	f000 fdbf 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin;
 8000d7a:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d94:	f000 fdb0 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_GPIO_Init+0x134>)
 8000dac:	f000 fda4 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000db0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <MX_GPIO_Init+0x134>)
 8000dca:	f000 fd95 	bl	80018f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2028      	movs	r0, #40	; 0x28
 8000dd4:	f000 fca7 	bl	8001726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dd8:	2028      	movs	r0, #40	; 0x28
 8000dda:	f000 fcc0 	bl	800175e <HAL_NVIC_EnableIRQ>

}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	10110000 	.word	0x10110000
 8000df8:	40011000 	.word	0x40011000

08000dfc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e04:	f000 f8b4 	bl	8000f70 <SCH_Update>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
uint32_t global_timer = 0;

void SCH_Init(void) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    current_index_task = 0;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SCH_Init+0x18>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
    global_timer = 0;
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SCH_Init+0x1c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	200000b0 	.word	0x200000b0
 8000e38:	200000b4 	.word	0x200000b4

08000e3c <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
    if (current_index_task < SCH_MAX_TASKS) {
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b27      	cmp	r3, #39	; 0x27
 8000e4e:	d84a      	bhi.n	8000ee6 <SCH_Add_Task+0xaa>
        SCH_tasks_G[current_index_task].pTask = pFunction;
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <SCH_Add_Task+0xb8>)
 8000e58:	460b      	mov	r3, r1
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <SCH_Add_Task+0xbc>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	491f      	ldr	r1, [pc, #124]	; (8000ef4 <SCH_Add_Task+0xb8>)
 8000e78:	4603      	mov	r3, r0
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4403      	add	r3, r0
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	3304      	adds	r3, #4
 8000e84:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <SCH_Add_Task+0xbc>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	4917      	ldr	r1, [pc, #92]	; (8000ef4 <SCH_Add_Task+0xb8>)
 8000e98:	4603      	mov	r3, r0
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4403      	add	r3, r0
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <SCH_Add_Task+0xb8>)
 8000eae:	460b      	mov	r3, r1
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	330c      	adds	r3, #12
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SCH_Add_Task+0xb8>)
 8000ecc:	460b      	mov	r3, r1
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3310      	adds	r3, #16
 8000ed8:	6018      	str	r0, [r3, #0]

        ++current_index_task;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <SCH_Add_Task+0xb4>)
 8000ee4:	701a      	strb	r2, [r3, #0]
    }
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	200000b0 	.word	0x200000b0
 8000ef4:	20000214 	.word	0x20000214
 8000ef8:	cccccccd 	.word	0xcccccccd

08000efc <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t ID) {
 8000efc:	b4b0      	push	{r4, r5, r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    if (current_index_task > ID) {
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <SCH_Delete_Task+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d226      	bcs.n	8000f5e <SCH_Delete_Task+0x62>
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e017      	b.n	8000f46 <SCH_Delete_Task+0x4a>
            SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <SCH_Delete_Task+0x70>)
 8000f1c:	68f9      	ldr	r1, [r7, #12]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4418      	add	r0, r3
 8000f28:	4910      	ldr	r1, [pc, #64]	; (8000f6c <SCH_Delete_Task+0x70>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	4604      	mov	r4, r0
 8000f36:	461d      	mov	r5, r3
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	6023      	str	r3, [r4, #0]
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <SCH_Delete_Task+0x6c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dbe1      	blt.n	8000f16 <SCH_Delete_Task+0x1a>
        }
        --current_index_task;
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SCH_Delete_Task+0x6c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <SCH_Delete_Task+0x6c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
    }
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bcb0      	pop	{r4, r5, r7}
 8000f66:	4770      	bx	lr
 8000f68:	200000b0 	.word	0x200000b0
 8000f6c:	20000214 	.word	0x20000214

08000f70 <SCH_Update>:

void SCH_Update(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	++global_timer;
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SCH_Update+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <SCH_Update+0x18>)
 8000f7c:	6013      	str	r3, [r2, #0]
    if (global_timer > UINT32_MAX) {
    	global_timer = 0;
    }
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200000b4 	.word	0x200000b4

08000f8c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; ++i) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	e06e      	b.n	8001076 <SCH_Dispatch_Tasks+0xea>
        if (global_timer >= SCH_tasks_G[i].Delay) {//Check if task execute
 8000f98:	493c      	ldr	r1, [pc, #240]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <SCH_Dispatch_Tasks+0x104>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d840      	bhi.n	8001034 <SCH_Dispatch_Tasks+0xa8>
            ++SCH_tasks_G[i].RunMe;
 8000fb2:	4936      	ldr	r1, [pc, #216]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2d8      	uxtb	r0, r3
 8000fc8:	4930      	ldr	r1, [pc, #192]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	330c      	adds	r3, #12
 8000fd8:	4602      	mov	r2, r0
 8000fda:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period > 0) {
 8000fdc:	492b      	ldr	r1, [pc, #172]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01c      	beq.n	800102c <SCH_Dispatch_Tasks+0xa0>
            	if (global_timer + SCH_tasks_G[i].Period <= UINT32_MAX) {
            		SCH_tasks_G[i].Delay += SCH_tasks_G[i].Period;
 8000ff2:	4926      	ldr	r1, [pc, #152]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	3304      	adds	r3, #4
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4821      	ldr	r0, [pc, #132]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4403      	add	r3, r0
 8001012:	3308      	adds	r3, #8
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4419      	add	r1, r3
 8001018:	481c      	ldr	r0, [pc, #112]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4403      	add	r3, r0
 8001026:	3304      	adds	r3, #4
 8001028:	6019      	str	r1, [r3, #0]
 800102a:	e003      	b.n	8001034 <SCH_Dispatch_Tasks+0xa8>
            		SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period - (UINT32_MAX - SCH_tasks_G[i].Delay);
            		--SCH_tasks_G[i].RunMe;
            	}
            }
            else {
                SCH_Delete_Task(i);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff64 	bl	8000efc <SCH_Delete_Task>
            }
        }
        if (SCH_tasks_G[i].RunMe > 0) {
 8001034:	4915      	ldr	r1, [pc, #84]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	330c      	adds	r3, #12
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d012      	beq.n	8001070 <SCH_Dispatch_Tasks+0xe4>
            SCH_tasks_G[i].RunMe = 0;
 800104a:	4910      	ldr	r1, [pc, #64]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	330c      	adds	r3, #12
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
            (*SCH_tasks_G[i].pTask)();
 800105e:	490b      	ldr	r1, [pc, #44]	; (800108c <SCH_Dispatch_Tasks+0x100>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4798      	blx	r3
    for (int i = 0; i < current_index_task; ++i) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3301      	adds	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <SCH_Dispatch_Tasks+0x108>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4293      	cmp	r3, r2
 8001080:	db8a      	blt.n	8000f98 <SCH_Dispatch_Tasks+0xc>
        }
    }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000214 	.word	0x20000214
 8001090:	200000b4 	.word	0x200000b4
 8001094:	200000b0 	.word	0x200000b0

08001098 <setTimer>:
#include "global.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value/TICK;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	4a09      	ldr	r2, [pc, #36]	; (80010cc <setTimer+0x34>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1092      	asrs	r2, r2, #2
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <setTimer+0x38>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <setTimer+0x3c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2100      	movs	r1, #0
 80010be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	66666667 	.word	0x66666667
 80010d0:	20000534 	.word	0x20000534
 80010d4:	20000560 	.word	0x20000560

080010d8 <isTimerExpired>:

int isTimerExpired(int index) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <isTimerExpired+0x30>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d106      	bne.n	80010fa <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <isTimerExpired+0x30>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2100      	movs	r1, #0
 80010f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <isTimerExpired+0x24>
	}
	return 0;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000560 	.word	0x20000560

0800110c <timerRun>:

void timerRun() {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	e01c      	b.n	8001152 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <timerRun+0x58>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dd13      	ble.n	800114c <timerRun+0x40>
			--timer_counter[i];
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <timerRun+0x58>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <timerRun+0x58>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <timerRun+0x58>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dc04      	bgt.n	800114c <timerRun+0x40>
				timer_flag[i] = 1;
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <timerRun+0x5c>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2101      	movs	r1, #1
 8001148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0a      	cmp	r3, #10
 8001156:	dddf      	ble.n	8001118 <timerRun+0xc>
			}
		}
	}
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000534 	.word	0x20000534
 8001168:	20000560 	.word	0x20000560

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_MspInit+0x5c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x5c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_MspInit+0x60>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_MspInit+0x60>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000

080011d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_I2C_MspInit+0x70>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d123      	bne.n	8001238 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_I2C_MspInit+0x74>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_I2C_MspInit+0x74>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_I2C_MspInit+0x74>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120c:	2312      	movs	r3, #18
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_I2C_MspInit+0x78>)
 800121c:	f000 fb6c 	bl	80018f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_I2C_MspInit+0x74>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_I2C_MspInit+0x74>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_I2C_MspInit+0x74>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40005400 	.word	0x40005400
 8001244:	40021000 	.word	0x40021000
 8001248:	40010c00 	.word	0x40010c00

0800124c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800125c:	d113      	bne.n	8001286 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_TIM_Base_MspInit+0x44>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_TIM_Base_MspInit+0x44>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_TIM_Base_MspInit+0x44>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	201c      	movs	r0, #28
 800127c:	f000 fa53 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001280:	201c      	movs	r0, #28
 8001282:	f000 fa6c 	bl	800175e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_UART_MspInit+0x80>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d12b      	bne.n	800130c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_UART_MspInit+0x84>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_UART_MspInit+0x84>)
 80012ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012be:	61d3      	str	r3, [r2, #28]
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_UART_MspInit+0x84>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_UART_MspInit+0x84>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_UART_MspInit+0x84>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_UART_MspInit+0x84>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e4:	230c      	movs	r3, #12
 80012e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <HAL_UART_MspInit+0x88>)
 80012f8:	f000 fafe 	bl	80018f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2026      	movs	r0, #38	; 0x26
 8001302:	f000 fa10 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001306:	2026      	movs	r0, #38	; 0x26
 8001308:	f000 fa29 	bl	800175e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40004400 	.word	0x40004400
 8001318:	40021000 	.word	0x40021000
 800131c:	40010800 	.word	0x40010800

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler+0x4>

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <MemManage_Handler+0x4>

08001332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler+0x4>

0800133e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f8c7 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM2_IRQHandler+0x10>)
 8001376:	f001 faa1 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000184 	.word	0x20000184

08001384 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USART2_IRQHandler+0x10>)
 800138a:	f001 fe37 	bl	8002ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200001cc 	.word	0x200001cc

08001398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800139c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a0:	f000 fc76 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f002 faf2 	bl	80039c0 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20005000 	.word	0x20005000
 8001408:	00000400 	.word	0x00000400
 800140c:	200000b8 	.word	0x200000b8
 8001410:	200005a0 	.word	0x200005a0

08001414 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001420:	f7ff fff8 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001426:	490c      	ldr	r1, [pc, #48]	; (8001458 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <LoopFillZerobss+0x16>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800143c:	4c09      	ldr	r4, [pc, #36]	; (8001464 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144a:	f002 fabf 	bl	80039cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800144e:	f7ff fae7 	bl	8000a20 <main>
  bx lr
 8001452:	4770      	bx	lr
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800145c:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8001460:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001464:	200005a0 	.word	0x200005a0

08001468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_2_IRQHandler>
	...

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_Init+0x28>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x28>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f947 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f808 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001488:	f7ff fe70 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f95f 	bl	800177a <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f000 f927 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000020 	.word	0x20000020
 80014f0:	20000028 	.word	0x20000028
 80014f4:	20000024 	.word	0x20000024

080014f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_IncTick+0x1c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_IncTick+0x20>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_IncTick+0x20>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	20000028 	.word	0x20000028
 8001518:	2000058c 	.word	0x2000058c

0800151c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <HAL_GetTick+0x10>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	2000058c 	.word	0x2000058c

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff fff0 	bl	800151c <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffe0 	bl	800151c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000028 	.word	0x20000028

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4906      	ldr	r1, [pc, #24]	; (8001610 <__NVIC_EnableIRQ+0x34>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff90 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff2d 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff42 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff90 	bl	8001668 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5f 	bl	8001614 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff35 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffa2 	bl	80016cc <SysTick_Config>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d008      	beq.n	80017bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e020      	b.n	80017fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 020e 	bic.w	r2, r2, #14
 80017ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d005      	beq.n	800182c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e051      	b.n	80018d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020e 	bic.w	r2, r2, #14
 800183a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a22      	ldr	r2, [pc, #136]	; (80018dc <HAL_DMA_Abort_IT+0xd4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d029      	beq.n	80018aa <HAL_DMA_Abort_IT+0xa2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_DMA_Abort_IT+0xd8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d022      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x9e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_DMA_Abort_IT+0xdc>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01a      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x98>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_DMA_Abort_IT+0xe0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d012      	beq.n	800189a <HAL_DMA_Abort_IT+0x92>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_DMA_Abort_IT+0xe4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00a      	beq.n	8001894 <HAL_DMA_Abort_IT+0x8c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_DMA_Abort_IT+0xe8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d102      	bne.n	800188e <HAL_DMA_Abort_IT+0x86>
 8001888:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800188c:	e00e      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 800188e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001892:	e00b      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	e008      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	e005      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 80018a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a4:	e002      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 80018a6:	2310      	movs	r3, #16
 80018a8:	e000      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 80018aa:	2301      	movs	r3, #1
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_DMA_Abort_IT+0xec>)
 80018ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
    } 
  }
  return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020008 	.word	0x40020008
 80018e0:	4002001c 	.word	0x4002001c
 80018e4:	40020030 	.word	0x40020030
 80018e8:	40020044 	.word	0x40020044
 80018ec:	40020058 	.word	0x40020058
 80018f0:	4002006c 	.word	0x4002006c
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e169      	b.n	8001be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800190c:	2201      	movs	r2, #1
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8158 	bne.w	8001bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a9a      	ldr	r2, [pc, #616]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d05e      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001934:	4a98      	ldr	r2, [pc, #608]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d875      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 800193a:	4a98      	ldr	r2, [pc, #608]	; (8001b9c <HAL_GPIO_Init+0x2a4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d058      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001940:	4a96      	ldr	r2, [pc, #600]	; (8001b9c <HAL_GPIO_Init+0x2a4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d86f      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 8001946:	4a96      	ldr	r2, [pc, #600]	; (8001ba0 <HAL_GPIO_Init+0x2a8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d052      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 800194c:	4a94      	ldr	r2, [pc, #592]	; (8001ba0 <HAL_GPIO_Init+0x2a8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d869      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 8001952:	4a94      	ldr	r2, [pc, #592]	; (8001ba4 <HAL_GPIO_Init+0x2ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d04c      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001958:	4a92      	ldr	r2, [pc, #584]	; (8001ba4 <HAL_GPIO_Init+0x2ac>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d863      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 800195e:	4a92      	ldr	r2, [pc, #584]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d046      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001964:	4a90      	ldr	r2, [pc, #576]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d85d      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 800196a:	2b12      	cmp	r3, #18
 800196c:	d82a      	bhi.n	80019c4 <HAL_GPIO_Init+0xcc>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d859      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <HAL_GPIO_Init+0x80>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	080019f3 	.word	0x080019f3
 800197c:	080019cd 	.word	0x080019cd
 8001980:	080019df 	.word	0x080019df
 8001984:	08001a21 	.word	0x08001a21
 8001988:	08001a27 	.word	0x08001a27
 800198c:	08001a27 	.word	0x08001a27
 8001990:	08001a27 	.word	0x08001a27
 8001994:	08001a27 	.word	0x08001a27
 8001998:	08001a27 	.word	0x08001a27
 800199c:	08001a27 	.word	0x08001a27
 80019a0:	08001a27 	.word	0x08001a27
 80019a4:	08001a27 	.word	0x08001a27
 80019a8:	08001a27 	.word	0x08001a27
 80019ac:	08001a27 	.word	0x08001a27
 80019b0:	08001a27 	.word	0x08001a27
 80019b4:	08001a27 	.word	0x08001a27
 80019b8:	08001a27 	.word	0x08001a27
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019e9 	.word	0x080019e9
 80019c4:	4a79      	ldr	r2, [pc, #484]	; (8001bac <HAL_GPIO_Init+0x2b4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ca:	e02c      	b.n	8001a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e029      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	3304      	adds	r3, #4
 80019da:	623b      	str	r3, [r7, #32]
          break;
 80019dc:	e024      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	3308      	adds	r3, #8
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e01f      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	330c      	adds	r3, #12
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e01a      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fa:	2304      	movs	r3, #4
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e013      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	611a      	str	r2, [r3, #16]
          break;
 8001a12:	e009      	b.n	8001a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a14:	2308      	movs	r3, #8
 8001a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	615a      	str	r2, [r3, #20]
          break;
 8001a1e:	e003      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          break;
 8001a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d801      	bhi.n	8001a32 <HAL_GPIO_Init+0x13a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	e001      	b.n	8001a36 <HAL_GPIO_Init+0x13e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d802      	bhi.n	8001a44 <HAL_GPIO_Init+0x14c>
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x152>
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	3b08      	subs	r3, #8
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	210f      	movs	r1, #15
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	6a39      	ldr	r1, [r7, #32]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 80b1 	beq.w	8001bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2bc>)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a40      	ldr	r2, [pc, #256]	; (8001bb8 <HAL_GPIO_Init+0x2c0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_GPIO_Init+0x1ec>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3f      	ldr	r2, [pc, #252]	; (8001bbc <HAL_GPIO_Init+0x2c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3e      	ldr	r2, [pc, #248]	; (8001bc0 <HAL_GPIO_Init+0x2c8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d007      	beq.n	8001adc <HAL_GPIO_Init+0x1e4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <HAL_GPIO_Init+0x2cc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_GPIO_Init+0x1e0>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e006      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001ad8:	2304      	movs	r3, #4
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af6:	492f      	ldr	r1, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x2bc>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	492c      	ldr	r1, [pc, #176]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4928      	ldr	r1, [pc, #160]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	491e      	ldr	r1, [pc, #120]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4918      	ldr	r1, [pc, #96]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4914      	ldr	r1, [pc, #80]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d021      	beq.n	8001bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e021      	b.n	8001bda <HAL_GPIO_Init+0x2e2>
 8001b96:	bf00      	nop
 8001b98:	10320000 	.word	0x10320000
 8001b9c:	10310000 	.word	0x10310000
 8001ba0:	10220000 	.word	0x10220000
 8001ba4:	10210000 	.word	0x10210000
 8001ba8:	10120000 	.word	0x10120000
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40011400 	.word	0x40011400
 8001bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_GPIO_Init+0x304>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4909      	ldr	r1, [pc, #36]	; (8001bfc <HAL_GPIO_Init+0x304>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3301      	adds	r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f47f ae8e 	bne.w	800190c <HAL_GPIO_Init+0x14>
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	372c      	adds	r7, #44	; 0x2c
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	807b      	strh	r3, [r7, #2]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3e:	787b      	ldrb	r3, [r7, #1]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c44:	887a      	ldrh	r2, [r7, #2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	041a      	lsls	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	611a      	str	r2, [r3, #16]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	041a      	lsls	r2, r3, #16
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	400b      	ands	r3, r1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f806 	bl	8001cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e12b      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fa68 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d38:	f000 fcd8 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a81      	ldr	r2, [pc, #516]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d807      	bhi.n	8001d58 <HAL_I2C_Init+0x84>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a80      	ldr	r2, [pc, #512]	; (8001f4c <HAL_I2C_Init+0x278>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e006      	b.n	8001d66 <HAL_I2C_Init+0x92>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	; (8001f50 <HAL_I2C_Init+0x27c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0e7      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <HAL_I2C_Init+0x280>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d802      	bhi.n	8001da8 <HAL_I2C_Init+0xd4>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	e009      	b.n	8001dbc <HAL_I2C_Init+0xe8>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_I2C_Init+0x284>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	3301      	adds	r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	495c      	ldr	r1, [pc, #368]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d819      	bhi.n	8001e10 <HAL_I2C_Init+0x13c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e59      	subs	r1, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001df0:	400b      	ands	r3, r1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_I2C_Init+0x138>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e59      	subs	r1, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	e051      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e04f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_I2C_Init+0x168>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e012      	b.n	8001e62 <HAL_I2C_Init+0x18e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x196>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e022      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10e      	bne.n	8001e90 <HAL_I2C_Init+0x1bc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e58      	subs	r0, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	e00f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6809      	ldr	r1, [r1, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6911      	ldr	r1, [r2, #16]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	000186a0 	.word	0x000186a0
 8001f4c:	001e847f 	.word	0x001e847f
 8001f50:	003d08ff 	.word	0x003d08ff
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e26c      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7c:	4b92      	ldr	r3, [pc, #584]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f88:	4b8f      	ldr	r3, [pc, #572]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d112      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
 8001f94:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06c      	beq.n	8002088 <HAL_RCC_OscConfig+0x12c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d168      	bne.n	8002088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e246      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x76>
 8001fc4:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7f      	ldr	r2, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7a      	ldr	r2, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b78      	ldr	r3, [pc, #480]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a77      	ldr	r2, [pc, #476]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0xbc>
 8001ffe:	4b72      	ldr	r3, [pc, #456]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a71      	ldr	r2, [pc, #452]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6e      	ldr	r2, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8002018:	4b6b      	ldr	r3, [pc, #428]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a67      	ldr	r2, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fa70 	bl	800151c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fa6c 	bl	800151c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1fa      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0xe4>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fa5c 	bl	800151c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fa58 	bl	800151c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1e6      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x10c>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d063      	beq.n	800215e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002096:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d11c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e1ba      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4939      	ldr	r1, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	e03a      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff fa11 	bl	800151c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fe:	f7ff fa0d 	bl	800151c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e19b      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4927      	ldr	r1, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e015      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f9f0 	bl	800151c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff f9ec 	bl	800151c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e17a      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03a      	beq.n	80021e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d019      	beq.n	80021a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7ff f9d0 	bl	800151c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff f9cc 	bl	800151c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e15a      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 facc 	bl	800273c <RCC_Delay>
 80021a4:	e01c      	b.n	80021e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7ff f9b6 	bl	800151c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b2:	e00f      	b.n	80021d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7ff f9b2 	bl	800151c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d908      	bls.n	80021d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e140      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	42420000 	.word	0x42420000
 80021d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e9      	bne.n	80021b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a6 	beq.w	800233a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b97      	ldr	r3, [pc, #604]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b94      	ldr	r3, [pc, #592]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a93      	ldr	r2, [pc, #588]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]
 800220a:	4b91      	ldr	r3, [pc, #580]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b8b      	ldr	r3, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a8a      	ldr	r2, [pc, #552]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7ff f973 	bl	800151c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7ff f96f 	bl	800151c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0fd      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x312>
 8002260:	4b7b      	ldr	r3, [pc, #492]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a7a      	ldr	r2, [pc, #488]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e02d      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x334>
 8002276:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a72      	ldr	r2, [pc, #456]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x356>
 8002298:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a6c      	ldr	r2, [pc, #432]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a69      	ldr	r2, [pc, #420]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a66      	ldr	r2, [pc, #408]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b64      	ldr	r3, [pc, #400]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a63      	ldr	r2, [pc, #396]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f923 	bl	800151c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff f91f 	bl	800151c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0ab      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x37e>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7ff f90d 	bl	800151c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff f909 	bl	800151c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e095      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b48      	ldr	r3, [pc, #288]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a47      	ldr	r2, [pc, #284]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8081 	beq.w	8002446 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4b42      	ldr	r3, [pc, #264]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d061      	beq.n	8002414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d146      	bne.n	80023e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff f8dd 	bl	800151c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff f8d9 	bl	800151c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e067      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	4b35      	ldr	r3, [pc, #212]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d108      	bne.n	80023a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800238e:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	492d      	ldr	r1, [pc, #180]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a19      	ldr	r1, [r3, #32]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	430b      	orrs	r3, r1
 80023b2:	4927      	ldr	r1, [pc, #156]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff f8ad 	bl	800151c <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7ff f8a9 	bl	800151c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e037      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46a>
 80023e4:	e02f      	b.n	8002446 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff f896 	bl	800151c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7ff f892 	bl	800151c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e020      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x498>
 8002412:	e018      	b.n	8002446 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e013      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	42420060 	.word	0x42420060

0800245c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d0      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d910      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4965      	ldr	r1, [pc, #404]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494d      	ldr	r1, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d040      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e073      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06b      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4936      	ldr	r1, [pc, #216]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe ffe6 	bl	800151c <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe ffe2 	bl	800151c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e053      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d210      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4922      	ldr	r1, [pc, #136]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4916      	ldr	r1, [pc, #88]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490e      	ldr	r1, [pc, #56]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490a      	ldr	r1, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1cc>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1d0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe ff44 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40022000 	.word	0x40022000
 8002620:	40021000 	.word	0x40021000
 8002624:	080042c0 	.word	0x080042c0
 8002628:	20000020 	.word	0x20000020
 800262c:	20000024 	.word	0x20000024

08002630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b04      	cmp	r3, #4
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x30>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x36>
 800265e:	e027      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002662:	613b      	str	r3, [r7, #16]
      break;
 8002664:	e027      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0c9b      	lsrs	r3, r3, #18
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002670:	5cd3      	ldrb	r3, [r2, r3]
 8002672:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0c5b      	lsrs	r3, r3, #17
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002692:	fb02 f203 	mul.w	r2, r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e004      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	613b      	str	r3, [r7, #16]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026b2:	613b      	str	r3, [r7, #16]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	693b      	ldr	r3, [r7, #16]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	007a1200 	.word	0x007a1200
 80026cc:	080042d8 	.word	0x080042d8
 80026d0:	080042e8 	.word	0x080042e8
 80026d4:	003d0900 	.word	0x003d0900

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000020 	.word	0x20000020

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff2 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	080042d0 	.word	0x080042d0

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffde 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0adb      	lsrs	r3, r3, #11
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	080042d0 	.word	0x080042d0

0800273c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <RCC_Delay+0x34>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <RCC_Delay+0x38>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002758:	bf00      	nop
  }
  while (Delay --);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	60fa      	str	r2, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f9      	bne.n	8002758 <RCC_Delay+0x1c>
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	20000020 	.word	0x20000020
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fd54 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 fa5c 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e03a      	b.n	80028a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_TIM_Base_Start_IT+0x98>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d009      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d010      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	e007      	b.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d020      	beq.n	8002920 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01b      	beq.n	8002920 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0202 	mvn.w	r2, #2
 80028f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f998 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f98b 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f99a 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d020      	beq.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f972 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f965 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f974 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d020      	beq.n	80029b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0208 	mvn.w	r2, #8
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2204      	movs	r2, #4
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f94c 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f93f 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f94e 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d020      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01b      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0210 	mvn.w	r2, #16
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2208      	movs	r2, #8
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f926 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f919 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f928 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00c      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0201 	mvn.w	r2, #1
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe f9ea 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fa7f 	bl	8002f4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8f8 	bl	8002c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0220 	mvn.w	r2, #32
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa52 	bl	8002f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e0b4      	b.n	8002c22 <HAL_TIM_ConfigClockSource+0x186>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af0:	d03e      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0xd4>
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	f200 8087 	bhi.w	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afe:	f000 8086 	beq.w	8002c0e <HAL_TIM_ConfigClockSource+0x172>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	d87f      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b70      	cmp	r3, #112	; 0x70
 8002b0a:	d01a      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0xa6>
 8002b0c:	2b70      	cmp	r3, #112	; 0x70
 8002b0e:	d87b      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b60      	cmp	r3, #96	; 0x60
 8002b12:	d050      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b14:	2b60      	cmp	r3, #96	; 0x60
 8002b16:	d877      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b50      	cmp	r3, #80	; 0x50
 8002b1a:	d03c      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0xfa>
 8002b1c:	2b50      	cmp	r3, #80	; 0x50
 8002b1e:	d873      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d058      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d86f      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b30      	cmp	r3, #48	; 0x30
 8002b2a:	d064      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b2c:	2b30      	cmp	r3, #48	; 0x30
 8002b2e:	d86b      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d060      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d867      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d05c      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d05a      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b40:	e062      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f000 f974 	bl	8002e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	609a      	str	r2, [r3, #8]
      break;
 8002b6e:	e04f      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f000 f95d 	bl	8002e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b92:	609a      	str	r2, [r3, #8]
      break;
 8002b94:	e03c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f000 f8d4 	bl	8002d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2150      	movs	r1, #80	; 0x50
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f92b 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002bb4:	e02c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f000 f8f2 	bl	8002dac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2160      	movs	r1, #96	; 0x60
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f91b 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002bd4:	e01c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f000 f8b4 	bl	8002d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2140      	movs	r1, #64	; 0x40
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f90b 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002bf4:	e00c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f000 f902 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002c06:	e003      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e000      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
	...

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a2f      	ldr	r2, [pc, #188]	; (8002d44 <TIM_Base_SetConfig+0xd0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <TIM_Base_SetConfig+0xd4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a2b      	ldr	r2, [pc, #172]	; (8002d4c <TIM_Base_SetConfig+0xd8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <TIM_Base_SetConfig+0xd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d007      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <TIM_Base_SetConfig+0xd4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <TIM_Base_SetConfig+0xd8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <TIM_Base_SetConfig+0xd0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800

08002d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0201 	bic.w	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 030a 	bic.w	r3, r3, #10
 8002d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0210 	bic.w	r2, r3, #16
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	031b      	lsls	r3, r3, #12
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	621a      	str	r2, [r3, #32]
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f043 0307 	orr.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	021a      	lsls	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	609a      	str	r2, [r3, #8]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e046      	b.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800

08002f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e042      	b.n	8002ff4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe f986 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fc7f 	bl	80038a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0ba      	sub	sp, #232	; 0xe8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800303a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_UART_IRQHandler+0x66>
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fb63 	bl	8003726 <UART_Receive_IT>
      return;
 8003060:	e25b      	b.n	800351a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80de 	beq.w	8003228 <HAL_UART_IRQHandler+0x22c>
 800306c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80d1 	beq.w	8003228 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_UART_IRQHandler+0xae>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_UART_IRQHandler+0xd2>
 80030b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f043 0202 	orr.w	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_UART_IRQHandler+0xf6>
 80030da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_UART_IRQHandler+0x126>
 80030fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800310a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0208 	orr.w	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 81f2 	beq.w	8003510 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_UART_IRQHandler+0x14e>
 8003138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 faee 	bl	8003726 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_UART_IRQHandler+0x17a>
 800316e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d04f      	beq.n	8003216 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f9f8 	bl	800356c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d041      	beq.n	800320e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1d9      	bne.n	800318a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d013      	beq.n	8003206 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	4a7e      	ldr	r2, [pc, #504]	; (80033dc <HAL_UART_IRQHandler+0x3e0>)
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fb0c 	bl	8001808 <HAL_DMA_Abort_IT>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003200:	4610      	mov	r0, r2
 8003202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	e00e      	b.n	8003224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f99c 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	e00a      	b.n	8003224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f998 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003214:	e006      	b.n	8003224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f994 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003222:	e175      	b.n	8003510 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	bf00      	nop
    return;
 8003226:	e173      	b.n	8003510 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	2b01      	cmp	r3, #1
 800322e:	f040 814f 	bne.w	80034d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8148 	beq.w	80034d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8141 	beq.w	80034d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80b6 	beq.w	80033e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8145 	beq.w	8003514 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800328e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003292:	429a      	cmp	r2, r3
 8003294:	f080 813e 	bcs.w	8003514 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800329e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	f000 8088 	beq.w	80033bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032e8:	e841 2300 	strex	r3, r2, [r1]
 80032ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1d9      	bne.n	80032ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3314      	adds	r3, #20
 80032fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3314      	adds	r3, #20
 8003318:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800331c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003320:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003324:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003328:	e841 2300 	strex	r3, r2, [r1]
 800332c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800332e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e1      	bne.n	80032f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003358:	66fa      	str	r2, [r7, #108]	; 0x6c
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800335e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e3      	bne.n	8003334 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338c:	f023 0310 	bic.w	r3, r3, #16
 8003390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800339e:	65ba      	str	r2, [r7, #88]	; 0x58
 80033a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e3      	bne.n	800337a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe f9eb 	bl	8001792 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8bf 	bl	8003556 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033d8:	e09c      	b.n	8003514 <HAL_UART_IRQHandler+0x518>
 80033da:	bf00      	nop
 80033dc:	08003631 	.word	0x08003631
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 808e 	beq.w	8003518 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8089 	beq.w	8003518 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800341c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800342a:	647a      	str	r2, [r7, #68]	; 0x44
 800342c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e3      	bne.n	8003406 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	623b      	str	r3, [r7, #32]
   return(result);
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003462:	633a      	str	r2, [r7, #48]	; 0x30
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e3      	bne.n	800343e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	60fb      	str	r3, [r7, #12]
   return(result);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0310 	bic.w	r3, r3, #16
 800349a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034a8:	61fa      	str	r2, [r7, #28]
 80034aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	69b9      	ldr	r1, [r7, #24]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	617b      	str	r3, [r7, #20]
   return(result);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e3      	bne.n	8003484 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f844 	bl	8003556 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034ce:	e023      	b.n	8003518 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_UART_IRQHandler+0x4f4>
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8b5 	bl	8003658 <UART_Transmit_IT>
    return;
 80034ee:	e014      	b.n	800351a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00e      	beq.n	800351a <HAL_UART_IRQHandler+0x51e>
 80034fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f8f4 	bl	80036f6 <UART_EndTransmit_IT>
    return;
 800350e:	e004      	b.n	800351a <HAL_UART_IRQHandler+0x51e>
    return;
 8003510:	bf00      	nop
 8003512:	e002      	b.n	800351a <HAL_UART_IRQHandler+0x51e>
      return;
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <HAL_UART_IRQHandler+0x51e>
      return;
 8003518:	bf00      	nop
  }
}
 800351a:	37e8      	adds	r7, #232	; 0xe8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b095      	sub	sp, #84	; 0x54
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	330c      	adds	r3, #12
 8003592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003594:	643a      	str	r2, [r7, #64]	; 0x40
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800359a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e5      	bne.n	8003574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3314      	adds	r3, #20
 80035ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3314      	adds	r3, #20
 80035c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d119      	bne.n	8003618 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f023 0310 	bic.w	r3, r3, #16
 80035fa:	647b      	str	r3, [r7, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003604:	61ba      	str	r2, [r7, #24]
 8003606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6979      	ldr	r1, [r7, #20]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	613b      	str	r3, [r7, #16]
   return(result);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003626:	bf00      	nop
 8003628:	3754      	adds	r7, #84	; 0x54
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff ff7a 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b21      	cmp	r3, #33	; 0x21
 800366a:	d13e      	bne.n	80036ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003674:	d114      	bne.n	80036a0 <UART_Transmit_IT+0x48>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d110      	bne.n	80036a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003692:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]
 800369e:	e008      	b.n	80036b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6211      	str	r1, [r2, #32]
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4619      	mov	r1, r3
 80036c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ff02 	bl	8003520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b08c      	sub	sp, #48	; 0x30
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b22      	cmp	r3, #34	; 0x22
 8003738:	f040 80ae 	bne.w	8003898 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	d117      	bne.n	8003776 <UART_Receive_IT+0x50>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d113      	bne.n	8003776 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	b29b      	uxth	r3, r3
 8003760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003764:	b29a      	uxth	r2, r3
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
 8003774:	e026      	b.n	80037c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d007      	beq.n	800379a <UART_Receive_IT+0x74>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <UART_Receive_IT+0x82>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e008      	b.n	80037ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4619      	mov	r1, r3
 80037d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d15d      	bne.n	8003894 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0220 	bic.w	r2, r2, #32
 80037e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	2b01      	cmp	r3, #1
 800381c:	d135      	bne.n	800388a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	613b      	str	r3, [r7, #16]
   return(result);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	623a      	str	r2, [r7, #32]
 8003846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	69f9      	ldr	r1, [r7, #28]
 800384a:	6a3a      	ldr	r2, [r7, #32]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	61bb      	str	r3, [r7, #24]
   return(result);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b10      	cmp	r3, #16
 8003864:	d10a      	bne.n	800387c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003880:	4619      	mov	r1, r3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fe67 	bl	8003556 <HAL_UARTEx_RxEventCallback>
 8003888:	e002      	b.n	8003890 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fe51 	bl	8003532 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e002      	b.n	800389a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3730      	adds	r7, #48	; 0x30
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038de:	f023 030c 	bic.w	r3, r3, #12
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2c      	ldr	r2, [pc, #176]	; (80039b8 <UART_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d103      	bne.n	8003914 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7fe ff02 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	e002      	b.n	800391a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7fe feea 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8003918:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	4a22      	ldr	r2, [pc, #136]	; (80039bc <UART_SetConfig+0x118>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	0119      	lsls	r1, r3, #4
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009a      	lsls	r2, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <UART_SetConfig+0x118>)
 8003952:	fba3 0302 	umull	r0, r3, r3, r2
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2064      	movs	r0, #100	; 0x64
 800395a:	fb00 f303 	mul.w	r3, r0, r3
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	3332      	adds	r3, #50	; 0x32
 8003964:	4a15      	ldr	r2, [pc, #84]	; (80039bc <UART_SetConfig+0x118>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003970:	4419      	add	r1, r3
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fbb2 f2f3 	udiv	r2, r2, r3
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <UART_SetConfig+0x118>)
 800398a:	fba3 0302 	umull	r0, r3, r3, r2
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2064      	movs	r0, #100	; 0x64
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	3332      	adds	r3, #50	; 0x32
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <UART_SetConfig+0x118>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	f003 020f 	and.w	r2, r3, #15
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	440a      	add	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40013800 	.word	0x40013800
 80039bc:	51eb851f 	.word	0x51eb851f

080039c0 <__errno>:
 80039c0:	4b01      	ldr	r3, [pc, #4]	; (80039c8 <__errno+0x8>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	2000002c 	.word	0x2000002c

080039cc <__libc_init_array>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	2600      	movs	r6, #0
 80039d0:	4d0c      	ldr	r5, [pc, #48]	; (8003a04 <__libc_init_array+0x38>)
 80039d2:	4c0d      	ldr	r4, [pc, #52]	; (8003a08 <__libc_init_array+0x3c>)
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	42a6      	cmp	r6, r4
 80039da:	d109      	bne.n	80039f0 <__libc_init_array+0x24>
 80039dc:	f000 fc5c 	bl	8004298 <_init>
 80039e0:	2600      	movs	r6, #0
 80039e2:	4d0a      	ldr	r5, [pc, #40]	; (8003a0c <__libc_init_array+0x40>)
 80039e4:	4c0a      	ldr	r4, [pc, #40]	; (8003a10 <__libc_init_array+0x44>)
 80039e6:	1b64      	subs	r4, r4, r5
 80039e8:	10a4      	asrs	r4, r4, #2
 80039ea:	42a6      	cmp	r6, r4
 80039ec:	d105      	bne.n	80039fa <__libc_init_array+0x2e>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f4:	4798      	blx	r3
 80039f6:	3601      	adds	r6, #1
 80039f8:	e7ee      	b.n	80039d8 <__libc_init_array+0xc>
 80039fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fe:	4798      	blx	r3
 8003a00:	3601      	adds	r6, #1
 8003a02:	e7f2      	b.n	80039ea <__libc_init_array+0x1e>
 8003a04:	08004320 	.word	0x08004320
 8003a08:	08004320 	.word	0x08004320
 8003a0c:	08004320 	.word	0x08004320
 8003a10:	08004324 	.word	0x08004324

08003a14 <memset>:
 8003a14:	4603      	mov	r3, r0
 8003a16:	4402      	add	r2, r0
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <memset+0xa>
 8003a1c:	4770      	bx	lr
 8003a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a22:	e7f9      	b.n	8003a18 <memset+0x4>

08003a24 <siprintf>:
 8003a24:	b40e      	push	{r1, r2, r3}
 8003a26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a2a:	b500      	push	{lr}
 8003a2c:	b09c      	sub	sp, #112	; 0x70
 8003a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8003a30:	9002      	str	r0, [sp, #8]
 8003a32:	9006      	str	r0, [sp, #24]
 8003a34:	9107      	str	r1, [sp, #28]
 8003a36:	9104      	str	r1, [sp, #16]
 8003a38:	4808      	ldr	r0, [pc, #32]	; (8003a5c <siprintf+0x38>)
 8003a3a:	4909      	ldr	r1, [pc, #36]	; (8003a60 <siprintf+0x3c>)
 8003a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a40:	9105      	str	r1, [sp, #20]
 8003a42:	6800      	ldr	r0, [r0, #0]
 8003a44:	a902      	add	r1, sp, #8
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	f000 f868 	bl	8003b1c <_svfiprintf_r>
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	9b02      	ldr	r3, [sp, #8]
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	b01c      	add	sp, #112	; 0x70
 8003a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a58:	b003      	add	sp, #12
 8003a5a:	4770      	bx	lr
 8003a5c:	2000002c 	.word	0x2000002c
 8003a60:	ffff0208 	.word	0xffff0208

08003a64 <__ssputs_r>:
 8003a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	688e      	ldr	r6, [r1, #8]
 8003a6a:	4682      	mov	sl, r0
 8003a6c:	429e      	cmp	r6, r3
 8003a6e:	460c      	mov	r4, r1
 8003a70:	4690      	mov	r8, r2
 8003a72:	461f      	mov	r7, r3
 8003a74:	d838      	bhi.n	8003ae8 <__ssputs_r+0x84>
 8003a76:	898a      	ldrh	r2, [r1, #12]
 8003a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a7c:	d032      	beq.n	8003ae4 <__ssputs_r+0x80>
 8003a7e:	6825      	ldr	r5, [r4, #0]
 8003a80:	6909      	ldr	r1, [r1, #16]
 8003a82:	3301      	adds	r3, #1
 8003a84:	eba5 0901 	sub.w	r9, r5, r1
 8003a88:	6965      	ldr	r5, [r4, #20]
 8003a8a:	444b      	add	r3, r9
 8003a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a94:	106d      	asrs	r5, r5, #1
 8003a96:	429d      	cmp	r5, r3
 8003a98:	bf38      	it	cc
 8003a9a:	461d      	movcc	r5, r3
 8003a9c:	0553      	lsls	r3, r2, #21
 8003a9e:	d531      	bpl.n	8003b04 <__ssputs_r+0xa0>
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f000 fb53 	bl	800414c <_malloc_r>
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	b950      	cbnz	r0, 8003ac0 <__ssputs_r+0x5c>
 8003aaa:	230c      	movs	r3, #12
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	f8ca 3000 	str.w	r3, [sl]
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac0:	464a      	mov	r2, r9
 8003ac2:	6921      	ldr	r1, [r4, #16]
 8003ac4:	f000 face 	bl	8004064 <memcpy>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	6126      	str	r6, [r4, #16]
 8003ad6:	444e      	add	r6, r9
 8003ad8:	6026      	str	r6, [r4, #0]
 8003ada:	463e      	mov	r6, r7
 8003adc:	6165      	str	r5, [r4, #20]
 8003ade:	eba5 0509 	sub.w	r5, r5, r9
 8003ae2:	60a5      	str	r5, [r4, #8]
 8003ae4:	42be      	cmp	r6, r7
 8003ae6:	d900      	bls.n	8003aea <__ssputs_r+0x86>
 8003ae8:	463e      	mov	r6, r7
 8003aea:	4632      	mov	r2, r6
 8003aec:	4641      	mov	r1, r8
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	f000 fac6 	bl	8004080 <memmove>
 8003af4:	68a3      	ldr	r3, [r4, #8]
 8003af6:	6822      	ldr	r2, [r4, #0]
 8003af8:	1b9b      	subs	r3, r3, r6
 8003afa:	4432      	add	r2, r6
 8003afc:	2000      	movs	r0, #0
 8003afe:	60a3      	str	r3, [r4, #8]
 8003b00:	6022      	str	r2, [r4, #0]
 8003b02:	e7db      	b.n	8003abc <__ssputs_r+0x58>
 8003b04:	462a      	mov	r2, r5
 8003b06:	f000 fb7b 	bl	8004200 <_realloc_r>
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d1e1      	bne.n	8003ad4 <__ssputs_r+0x70>
 8003b10:	4650      	mov	r0, sl
 8003b12:	6921      	ldr	r1, [r4, #16]
 8003b14:	f000 face 	bl	80040b4 <_free_r>
 8003b18:	e7c7      	b.n	8003aaa <__ssputs_r+0x46>
	...

08003b1c <_svfiprintf_r>:
 8003b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	4698      	mov	r8, r3
 8003b22:	898b      	ldrh	r3, [r1, #12]
 8003b24:	4607      	mov	r7, r0
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	460d      	mov	r5, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	b09d      	sub	sp, #116	; 0x74
 8003b2e:	d50e      	bpl.n	8003b4e <_svfiprintf_r+0x32>
 8003b30:	690b      	ldr	r3, [r1, #16]
 8003b32:	b963      	cbnz	r3, 8003b4e <_svfiprintf_r+0x32>
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	f000 fb09 	bl	800414c <_malloc_r>
 8003b3a:	6028      	str	r0, [r5, #0]
 8003b3c:	6128      	str	r0, [r5, #16]
 8003b3e:	b920      	cbnz	r0, 8003b4a <_svfiprintf_r+0x2e>
 8003b40:	230c      	movs	r3, #12
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e0d1      	b.n	8003cee <_svfiprintf_r+0x1d2>
 8003b4a:	2340      	movs	r3, #64	; 0x40
 8003b4c:	616b      	str	r3, [r5, #20]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9309      	str	r3, [sp, #36]	; 0x24
 8003b52:	2320      	movs	r3, #32
 8003b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b58:	2330      	movs	r3, #48	; 0x30
 8003b5a:	f04f 0901 	mov.w	r9, #1
 8003b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d08 <_svfiprintf_r+0x1ec>
 8003b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	469a      	mov	sl, r3
 8003b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b72:	b10a      	cbz	r2, 8003b78 <_svfiprintf_r+0x5c>
 8003b74:	2a25      	cmp	r2, #37	; 0x25
 8003b76:	d1f9      	bne.n	8003b6c <_svfiprintf_r+0x50>
 8003b78:	ebba 0b04 	subs.w	fp, sl, r4
 8003b7c:	d00b      	beq.n	8003b96 <_svfiprintf_r+0x7a>
 8003b7e:	465b      	mov	r3, fp
 8003b80:	4622      	mov	r2, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	4638      	mov	r0, r7
 8003b86:	f7ff ff6d 	bl	8003a64 <__ssputs_r>
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	f000 80aa 	beq.w	8003ce4 <_svfiprintf_r+0x1c8>
 8003b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b92:	445a      	add	r2, fp
 8003b94:	9209      	str	r2, [sp, #36]	; 0x24
 8003b96:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a2 	beq.w	8003ce4 <_svfiprintf_r+0x1c8>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003baa:	f10a 0a01 	add.w	sl, sl, #1
 8003bae:	9304      	str	r3, [sp, #16]
 8003bb0:	9307      	str	r3, [sp, #28]
 8003bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8003bb8:	4654      	mov	r4, sl
 8003bba:	2205      	movs	r2, #5
 8003bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc0:	4851      	ldr	r0, [pc, #324]	; (8003d08 <_svfiprintf_r+0x1ec>)
 8003bc2:	f000 fa41 	bl	8004048 <memchr>
 8003bc6:	9a04      	ldr	r2, [sp, #16]
 8003bc8:	b9d8      	cbnz	r0, 8003c02 <_svfiprintf_r+0xe6>
 8003bca:	06d0      	lsls	r0, r2, #27
 8003bcc:	bf44      	itt	mi
 8003bce:	2320      	movmi	r3, #32
 8003bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bd4:	0711      	lsls	r1, r2, #28
 8003bd6:	bf44      	itt	mi
 8003bd8:	232b      	movmi	r3, #43	; 0x2b
 8003bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bde:	f89a 3000 	ldrb.w	r3, [sl]
 8003be2:	2b2a      	cmp	r3, #42	; 0x2a
 8003be4:	d015      	beq.n	8003c12 <_svfiprintf_r+0xf6>
 8003be6:	4654      	mov	r4, sl
 8003be8:	2000      	movs	r0, #0
 8003bea:	f04f 0c0a 	mov.w	ip, #10
 8003bee:	9a07      	ldr	r2, [sp, #28]
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bf6:	3b30      	subs	r3, #48	; 0x30
 8003bf8:	2b09      	cmp	r3, #9
 8003bfa:	d94e      	bls.n	8003c9a <_svfiprintf_r+0x17e>
 8003bfc:	b1b0      	cbz	r0, 8003c2c <_svfiprintf_r+0x110>
 8003bfe:	9207      	str	r2, [sp, #28]
 8003c00:	e014      	b.n	8003c2c <_svfiprintf_r+0x110>
 8003c02:	eba0 0308 	sub.w	r3, r0, r8
 8003c06:	fa09 f303 	lsl.w	r3, r9, r3
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	46a2      	mov	sl, r4
 8003c0e:	9304      	str	r3, [sp, #16]
 8003c10:	e7d2      	b.n	8003bb8 <_svfiprintf_r+0x9c>
 8003c12:	9b03      	ldr	r3, [sp, #12]
 8003c14:	1d19      	adds	r1, r3, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	9103      	str	r1, [sp, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfbb      	ittet	lt
 8003c1e:	425b      	neglt	r3, r3
 8003c20:	f042 0202 	orrlt.w	r2, r2, #2
 8003c24:	9307      	strge	r3, [sp, #28]
 8003c26:	9307      	strlt	r3, [sp, #28]
 8003c28:	bfb8      	it	lt
 8003c2a:	9204      	strlt	r2, [sp, #16]
 8003c2c:	7823      	ldrb	r3, [r4, #0]
 8003c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c30:	d10c      	bne.n	8003c4c <_svfiprintf_r+0x130>
 8003c32:	7863      	ldrb	r3, [r4, #1]
 8003c34:	2b2a      	cmp	r3, #42	; 0x2a
 8003c36:	d135      	bne.n	8003ca4 <_svfiprintf_r+0x188>
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	3402      	adds	r4, #2
 8003c3c:	1d1a      	adds	r2, r3, #4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	9203      	str	r2, [sp, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bfb8      	it	lt
 8003c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c4a:	9305      	str	r3, [sp, #20]
 8003c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d18 <_svfiprintf_r+0x1fc>
 8003c50:	2203      	movs	r2, #3
 8003c52:	4650      	mov	r0, sl
 8003c54:	7821      	ldrb	r1, [r4, #0]
 8003c56:	f000 f9f7 	bl	8004048 <memchr>
 8003c5a:	b140      	cbz	r0, 8003c6e <_svfiprintf_r+0x152>
 8003c5c:	2340      	movs	r3, #64	; 0x40
 8003c5e:	eba0 000a 	sub.w	r0, r0, sl
 8003c62:	fa03 f000 	lsl.w	r0, r3, r0
 8003c66:	9b04      	ldr	r3, [sp, #16]
 8003c68:	3401      	adds	r4, #1
 8003c6a:	4303      	orrs	r3, r0
 8003c6c:	9304      	str	r3, [sp, #16]
 8003c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c72:	2206      	movs	r2, #6
 8003c74:	4825      	ldr	r0, [pc, #148]	; (8003d0c <_svfiprintf_r+0x1f0>)
 8003c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c7a:	f000 f9e5 	bl	8004048 <memchr>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d038      	beq.n	8003cf4 <_svfiprintf_r+0x1d8>
 8003c82:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <_svfiprintf_r+0x1f4>)
 8003c84:	bb1b      	cbnz	r3, 8003cce <_svfiprintf_r+0x1b2>
 8003c86:	9b03      	ldr	r3, [sp, #12]
 8003c88:	3307      	adds	r3, #7
 8003c8a:	f023 0307 	bic.w	r3, r3, #7
 8003c8e:	3308      	adds	r3, #8
 8003c90:	9303      	str	r3, [sp, #12]
 8003c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c94:	4433      	add	r3, r6
 8003c96:	9309      	str	r3, [sp, #36]	; 0x24
 8003c98:	e767      	b.n	8003b6a <_svfiprintf_r+0x4e>
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ca2:	e7a5      	b.n	8003bf0 <_svfiprintf_r+0xd4>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f04f 0c0a 	mov.w	ip, #10
 8003caa:	4619      	mov	r1, r3
 8003cac:	3401      	adds	r4, #1
 8003cae:	9305      	str	r3, [sp, #20]
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb6:	3a30      	subs	r2, #48	; 0x30
 8003cb8:	2a09      	cmp	r2, #9
 8003cba:	d903      	bls.n	8003cc4 <_svfiprintf_r+0x1a8>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0c5      	beq.n	8003c4c <_svfiprintf_r+0x130>
 8003cc0:	9105      	str	r1, [sp, #20]
 8003cc2:	e7c3      	b.n	8003c4c <_svfiprintf_r+0x130>
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ccc:	e7f0      	b.n	8003cb0 <_svfiprintf_r+0x194>
 8003cce:	ab03      	add	r3, sp, #12
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	462a      	mov	r2, r5
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <_svfiprintf_r+0x1f8>)
 8003cd8:	a904      	add	r1, sp, #16
 8003cda:	f3af 8000 	nop.w
 8003cde:	1c42      	adds	r2, r0, #1
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	d1d6      	bne.n	8003c92 <_svfiprintf_r+0x176>
 8003ce4:	89ab      	ldrh	r3, [r5, #12]
 8003ce6:	065b      	lsls	r3, r3, #25
 8003ce8:	f53f af2c 	bmi.w	8003b44 <_svfiprintf_r+0x28>
 8003cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cee:	b01d      	add	sp, #116	; 0x74
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	ab03      	add	r3, sp, #12
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	462a      	mov	r2, r5
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <_svfiprintf_r+0x1f8>)
 8003cfe:	a904      	add	r1, sp, #16
 8003d00:	f000 f87c 	bl	8003dfc <_printf_i>
 8003d04:	e7eb      	b.n	8003cde <_svfiprintf_r+0x1c2>
 8003d06:	bf00      	nop
 8003d08:	080042ea 	.word	0x080042ea
 8003d0c:	080042f4 	.word	0x080042f4
 8003d10:	00000000 	.word	0x00000000
 8003d14:	08003a65 	.word	0x08003a65
 8003d18:	080042f0 	.word	0x080042f0

08003d1c <_printf_common>:
 8003d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	4616      	mov	r6, r2
 8003d22:	4699      	mov	r9, r3
 8003d24:	688a      	ldr	r2, [r1, #8]
 8003d26:	690b      	ldr	r3, [r1, #16]
 8003d28:	4607      	mov	r7, r0
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	bfb8      	it	lt
 8003d2e:	4613      	movlt	r3, r2
 8003d30:	6033      	str	r3, [r6, #0]
 8003d32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d36:	460c      	mov	r4, r1
 8003d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d3c:	b10a      	cbz	r2, 8003d42 <_printf_common+0x26>
 8003d3e:	3301      	adds	r3, #1
 8003d40:	6033      	str	r3, [r6, #0]
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	0699      	lsls	r1, r3, #26
 8003d46:	bf42      	ittt	mi
 8003d48:	6833      	ldrmi	r3, [r6, #0]
 8003d4a:	3302      	addmi	r3, #2
 8003d4c:	6033      	strmi	r3, [r6, #0]
 8003d4e:	6825      	ldr	r5, [r4, #0]
 8003d50:	f015 0506 	ands.w	r5, r5, #6
 8003d54:	d106      	bne.n	8003d64 <_printf_common+0x48>
 8003d56:	f104 0a19 	add.w	sl, r4, #25
 8003d5a:	68e3      	ldr	r3, [r4, #12]
 8003d5c:	6832      	ldr	r2, [r6, #0]
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	42ab      	cmp	r3, r5
 8003d62:	dc28      	bgt.n	8003db6 <_printf_common+0x9a>
 8003d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d68:	1e13      	subs	r3, r2, #0
 8003d6a:	6822      	ldr	r2, [r4, #0]
 8003d6c:	bf18      	it	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	0692      	lsls	r2, r2, #26
 8003d72:	d42d      	bmi.n	8003dd0 <_printf_common+0xb4>
 8003d74:	4649      	mov	r1, r9
 8003d76:	4638      	mov	r0, r7
 8003d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d020      	beq.n	8003dc4 <_printf_common+0xa8>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	68e5      	ldr	r5, [r4, #12]
 8003d86:	f003 0306 	and.w	r3, r3, #6
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	bf18      	it	ne
 8003d8e:	2500      	movne	r5, #0
 8003d90:	6832      	ldr	r2, [r6, #0]
 8003d92:	f04f 0600 	mov.w	r6, #0
 8003d96:	68a3      	ldr	r3, [r4, #8]
 8003d98:	bf08      	it	eq
 8003d9a:	1aad      	subeq	r5, r5, r2
 8003d9c:	6922      	ldr	r2, [r4, #16]
 8003d9e:	bf08      	it	eq
 8003da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bfc4      	itt	gt
 8003da8:	1a9b      	subgt	r3, r3, r2
 8003daa:	18ed      	addgt	r5, r5, r3
 8003dac:	341a      	adds	r4, #26
 8003dae:	42b5      	cmp	r5, r6
 8003db0:	d11a      	bne.n	8003de8 <_printf_common+0xcc>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e008      	b.n	8003dc8 <_printf_common+0xac>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4652      	mov	r2, sl
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	47c0      	blx	r8
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d103      	bne.n	8003dcc <_printf_common+0xb0>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	3501      	adds	r5, #1
 8003dce:	e7c4      	b.n	8003d5a <_printf_common+0x3e>
 8003dd0:	2030      	movs	r0, #48	; 0x30
 8003dd2:	18e1      	adds	r1, r4, r3
 8003dd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dde:	4422      	add	r2, r4
 8003de0:	3302      	adds	r3, #2
 8003de2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003de6:	e7c5      	b.n	8003d74 <_printf_common+0x58>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4622      	mov	r2, r4
 8003dec:	4649      	mov	r1, r9
 8003dee:	4638      	mov	r0, r7
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d0e6      	beq.n	8003dc4 <_printf_common+0xa8>
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7d9      	b.n	8003dae <_printf_common+0x92>
	...

08003dfc <_printf_i>:
 8003dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	460c      	mov	r4, r1
 8003e02:	7e27      	ldrb	r7, [r4, #24]
 8003e04:	4691      	mov	r9, r2
 8003e06:	2f78      	cmp	r7, #120	; 0x78
 8003e08:	4680      	mov	r8, r0
 8003e0a:	469a      	mov	sl, r3
 8003e0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e12:	d807      	bhi.n	8003e24 <_printf_i+0x28>
 8003e14:	2f62      	cmp	r7, #98	; 0x62
 8003e16:	d80a      	bhi.n	8003e2e <_printf_i+0x32>
 8003e18:	2f00      	cmp	r7, #0
 8003e1a:	f000 80d9 	beq.w	8003fd0 <_printf_i+0x1d4>
 8003e1e:	2f58      	cmp	r7, #88	; 0x58
 8003e20:	f000 80a4 	beq.w	8003f6c <_printf_i+0x170>
 8003e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e2c:	e03a      	b.n	8003ea4 <_printf_i+0xa8>
 8003e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e32:	2b15      	cmp	r3, #21
 8003e34:	d8f6      	bhi.n	8003e24 <_printf_i+0x28>
 8003e36:	a001      	add	r0, pc, #4	; (adr r0, 8003e3c <_printf_i+0x40>)
 8003e38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e3c:	08003e95 	.word	0x08003e95
 8003e40:	08003ea9 	.word	0x08003ea9
 8003e44:	08003e25 	.word	0x08003e25
 8003e48:	08003e25 	.word	0x08003e25
 8003e4c:	08003e25 	.word	0x08003e25
 8003e50:	08003e25 	.word	0x08003e25
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003e25 	.word	0x08003e25
 8003e5c:	08003e25 	.word	0x08003e25
 8003e60:	08003e25 	.word	0x08003e25
 8003e64:	08003e25 	.word	0x08003e25
 8003e68:	08003fb7 	.word	0x08003fb7
 8003e6c:	08003ed9 	.word	0x08003ed9
 8003e70:	08003f99 	.word	0x08003f99
 8003e74:	08003e25 	.word	0x08003e25
 8003e78:	08003e25 	.word	0x08003e25
 8003e7c:	08003fd9 	.word	0x08003fd9
 8003e80:	08003e25 	.word	0x08003e25
 8003e84:	08003ed9 	.word	0x08003ed9
 8003e88:	08003e25 	.word	0x08003e25
 8003e8c:	08003e25 	.word	0x08003e25
 8003e90:	08003fa1 	.word	0x08003fa1
 8003e94:	680b      	ldr	r3, [r1, #0]
 8003e96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	600a      	str	r2, [r1, #0]
 8003ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0a4      	b.n	8003ff2 <_printf_i+0x1f6>
 8003ea8:	6825      	ldr	r5, [r4, #0]
 8003eaa:	6808      	ldr	r0, [r1, #0]
 8003eac:	062e      	lsls	r6, r5, #24
 8003eae:	f100 0304 	add.w	r3, r0, #4
 8003eb2:	d50a      	bpl.n	8003eca <_printf_i+0xce>
 8003eb4:	6805      	ldr	r5, [r0, #0]
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	da03      	bge.n	8003ec4 <_printf_i+0xc8>
 8003ebc:	232d      	movs	r3, #45	; 0x2d
 8003ebe:	426d      	negs	r5, r5
 8003ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	485e      	ldr	r0, [pc, #376]	; (8004040 <_printf_i+0x244>)
 8003ec8:	e019      	b.n	8003efe <_printf_i+0x102>
 8003eca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ece:	6805      	ldr	r5, [r0, #0]
 8003ed0:	600b      	str	r3, [r1, #0]
 8003ed2:	bf18      	it	ne
 8003ed4:	b22d      	sxthne	r5, r5
 8003ed6:	e7ef      	b.n	8003eb8 <_printf_i+0xbc>
 8003ed8:	680b      	ldr	r3, [r1, #0]
 8003eda:	6825      	ldr	r5, [r4, #0]
 8003edc:	1d18      	adds	r0, r3, #4
 8003ede:	6008      	str	r0, [r1, #0]
 8003ee0:	0628      	lsls	r0, r5, #24
 8003ee2:	d501      	bpl.n	8003ee8 <_printf_i+0xec>
 8003ee4:	681d      	ldr	r5, [r3, #0]
 8003ee6:	e002      	b.n	8003eee <_printf_i+0xf2>
 8003ee8:	0669      	lsls	r1, r5, #25
 8003eea:	d5fb      	bpl.n	8003ee4 <_printf_i+0xe8>
 8003eec:	881d      	ldrh	r5, [r3, #0]
 8003eee:	2f6f      	cmp	r7, #111	; 0x6f
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2308      	moveq	r3, #8
 8003ef4:	230a      	movne	r3, #10
 8003ef6:	4852      	ldr	r0, [pc, #328]	; (8004040 <_printf_i+0x244>)
 8003ef8:	2100      	movs	r1, #0
 8003efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003efe:	6866      	ldr	r6, [r4, #4]
 8003f00:	2e00      	cmp	r6, #0
 8003f02:	bfa8      	it	ge
 8003f04:	6821      	ldrge	r1, [r4, #0]
 8003f06:	60a6      	str	r6, [r4, #8]
 8003f08:	bfa4      	itt	ge
 8003f0a:	f021 0104 	bicge.w	r1, r1, #4
 8003f0e:	6021      	strge	r1, [r4, #0]
 8003f10:	b90d      	cbnz	r5, 8003f16 <_printf_i+0x11a>
 8003f12:	2e00      	cmp	r6, #0
 8003f14:	d04d      	beq.n	8003fb2 <_printf_i+0x1b6>
 8003f16:	4616      	mov	r6, r2
 8003f18:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f1c:	fb03 5711 	mls	r7, r3, r1, r5
 8003f20:	5dc7      	ldrb	r7, [r0, r7]
 8003f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f26:	462f      	mov	r7, r5
 8003f28:	42bb      	cmp	r3, r7
 8003f2a:	460d      	mov	r5, r1
 8003f2c:	d9f4      	bls.n	8003f18 <_printf_i+0x11c>
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d10b      	bne.n	8003f4a <_printf_i+0x14e>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	07df      	lsls	r7, r3, #31
 8003f36:	d508      	bpl.n	8003f4a <_printf_i+0x14e>
 8003f38:	6923      	ldr	r3, [r4, #16]
 8003f3a:	6861      	ldr	r1, [r4, #4]
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	bfde      	ittt	le
 8003f40:	2330      	movle	r3, #48	; 0x30
 8003f42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f4a:	1b92      	subs	r2, r2, r6
 8003f4c:	6122      	str	r2, [r4, #16]
 8003f4e:	464b      	mov	r3, r9
 8003f50:	4621      	mov	r1, r4
 8003f52:	4640      	mov	r0, r8
 8003f54:	f8cd a000 	str.w	sl, [sp]
 8003f58:	aa03      	add	r2, sp, #12
 8003f5a:	f7ff fedf 	bl	8003d1c <_printf_common>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d14c      	bne.n	8003ffc <_printf_i+0x200>
 8003f62:	f04f 30ff 	mov.w	r0, #4294967295
 8003f66:	b004      	add	sp, #16
 8003f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6c:	4834      	ldr	r0, [pc, #208]	; (8004040 <_printf_i+0x244>)
 8003f6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f72:	680e      	ldr	r6, [r1, #0]
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f7a:	061f      	lsls	r7, r3, #24
 8003f7c:	600e      	str	r6, [r1, #0]
 8003f7e:	d514      	bpl.n	8003faa <_printf_i+0x1ae>
 8003f80:	07d9      	lsls	r1, r3, #31
 8003f82:	bf44      	itt	mi
 8003f84:	f043 0320 	orrmi.w	r3, r3, #32
 8003f88:	6023      	strmi	r3, [r4, #0]
 8003f8a:	b91d      	cbnz	r5, 8003f94 <_printf_i+0x198>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	f023 0320 	bic.w	r3, r3, #32
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	2310      	movs	r3, #16
 8003f96:	e7af      	b.n	8003ef8 <_printf_i+0xfc>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f043 0320 	orr.w	r3, r3, #32
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	2378      	movs	r3, #120	; 0x78
 8003fa2:	4828      	ldr	r0, [pc, #160]	; (8004044 <_printf_i+0x248>)
 8003fa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fa8:	e7e3      	b.n	8003f72 <_printf_i+0x176>
 8003faa:	065e      	lsls	r6, r3, #25
 8003fac:	bf48      	it	mi
 8003fae:	b2ad      	uxthmi	r5, r5
 8003fb0:	e7e6      	b.n	8003f80 <_printf_i+0x184>
 8003fb2:	4616      	mov	r6, r2
 8003fb4:	e7bb      	b.n	8003f2e <_printf_i+0x132>
 8003fb6:	680b      	ldr	r3, [r1, #0]
 8003fb8:	6826      	ldr	r6, [r4, #0]
 8003fba:	1d1d      	adds	r5, r3, #4
 8003fbc:	6960      	ldr	r0, [r4, #20]
 8003fbe:	600d      	str	r5, [r1, #0]
 8003fc0:	0635      	lsls	r5, r6, #24
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	d501      	bpl.n	8003fca <_printf_i+0x1ce>
 8003fc6:	6018      	str	r0, [r3, #0]
 8003fc8:	e002      	b.n	8003fd0 <_printf_i+0x1d4>
 8003fca:	0671      	lsls	r1, r6, #25
 8003fcc:	d5fb      	bpl.n	8003fc6 <_printf_i+0x1ca>
 8003fce:	8018      	strh	r0, [r3, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4616      	mov	r6, r2
 8003fd4:	6123      	str	r3, [r4, #16]
 8003fd6:	e7ba      	b.n	8003f4e <_printf_i+0x152>
 8003fd8:	680b      	ldr	r3, [r1, #0]
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	600a      	str	r2, [r1, #0]
 8003fde:	681e      	ldr	r6, [r3, #0]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	6862      	ldr	r2, [r4, #4]
 8003fe6:	f000 f82f 	bl	8004048 <memchr>
 8003fea:	b108      	cbz	r0, 8003ff0 <_printf_i+0x1f4>
 8003fec:	1b80      	subs	r0, r0, r6
 8003fee:	6060      	str	r0, [r4, #4]
 8003ff0:	6863      	ldr	r3, [r4, #4]
 8003ff2:	6123      	str	r3, [r4, #16]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ffa:	e7a8      	b.n	8003f4e <_printf_i+0x152>
 8003ffc:	4632      	mov	r2, r6
 8003ffe:	4649      	mov	r1, r9
 8004000:	4640      	mov	r0, r8
 8004002:	6923      	ldr	r3, [r4, #16]
 8004004:	47d0      	blx	sl
 8004006:	3001      	adds	r0, #1
 8004008:	d0ab      	beq.n	8003f62 <_printf_i+0x166>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	079b      	lsls	r3, r3, #30
 800400e:	d413      	bmi.n	8004038 <_printf_i+0x23c>
 8004010:	68e0      	ldr	r0, [r4, #12]
 8004012:	9b03      	ldr	r3, [sp, #12]
 8004014:	4298      	cmp	r0, r3
 8004016:	bfb8      	it	lt
 8004018:	4618      	movlt	r0, r3
 800401a:	e7a4      	b.n	8003f66 <_printf_i+0x16a>
 800401c:	2301      	movs	r3, #1
 800401e:	4632      	mov	r2, r6
 8004020:	4649      	mov	r1, r9
 8004022:	4640      	mov	r0, r8
 8004024:	47d0      	blx	sl
 8004026:	3001      	adds	r0, #1
 8004028:	d09b      	beq.n	8003f62 <_printf_i+0x166>
 800402a:	3501      	adds	r5, #1
 800402c:	68e3      	ldr	r3, [r4, #12]
 800402e:	9903      	ldr	r1, [sp, #12]
 8004030:	1a5b      	subs	r3, r3, r1
 8004032:	42ab      	cmp	r3, r5
 8004034:	dcf2      	bgt.n	800401c <_printf_i+0x220>
 8004036:	e7eb      	b.n	8004010 <_printf_i+0x214>
 8004038:	2500      	movs	r5, #0
 800403a:	f104 0619 	add.w	r6, r4, #25
 800403e:	e7f5      	b.n	800402c <_printf_i+0x230>
 8004040:	080042fb 	.word	0x080042fb
 8004044:	0800430c 	.word	0x0800430c

08004048 <memchr>:
 8004048:	4603      	mov	r3, r0
 800404a:	b510      	push	{r4, lr}
 800404c:	b2c9      	uxtb	r1, r1
 800404e:	4402      	add	r2, r0
 8004050:	4293      	cmp	r3, r2
 8004052:	4618      	mov	r0, r3
 8004054:	d101      	bne.n	800405a <memchr+0x12>
 8004056:	2000      	movs	r0, #0
 8004058:	e003      	b.n	8004062 <memchr+0x1a>
 800405a:	7804      	ldrb	r4, [r0, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	428c      	cmp	r4, r1
 8004060:	d1f6      	bne.n	8004050 <memchr+0x8>
 8004062:	bd10      	pop	{r4, pc}

08004064 <memcpy>:
 8004064:	440a      	add	r2, r1
 8004066:	4291      	cmp	r1, r2
 8004068:	f100 33ff 	add.w	r3, r0, #4294967295
 800406c:	d100      	bne.n	8004070 <memcpy+0xc>
 800406e:	4770      	bx	lr
 8004070:	b510      	push	{r4, lr}
 8004072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004076:	4291      	cmp	r1, r2
 8004078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800407c:	d1f9      	bne.n	8004072 <memcpy+0xe>
 800407e:	bd10      	pop	{r4, pc}

08004080 <memmove>:
 8004080:	4288      	cmp	r0, r1
 8004082:	b510      	push	{r4, lr}
 8004084:	eb01 0402 	add.w	r4, r1, r2
 8004088:	d902      	bls.n	8004090 <memmove+0x10>
 800408a:	4284      	cmp	r4, r0
 800408c:	4623      	mov	r3, r4
 800408e:	d807      	bhi.n	80040a0 <memmove+0x20>
 8004090:	1e43      	subs	r3, r0, #1
 8004092:	42a1      	cmp	r1, r4
 8004094:	d008      	beq.n	80040a8 <memmove+0x28>
 8004096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800409a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800409e:	e7f8      	b.n	8004092 <memmove+0x12>
 80040a0:	4601      	mov	r1, r0
 80040a2:	4402      	add	r2, r0
 80040a4:	428a      	cmp	r2, r1
 80040a6:	d100      	bne.n	80040aa <memmove+0x2a>
 80040a8:	bd10      	pop	{r4, pc}
 80040aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040b2:	e7f7      	b.n	80040a4 <memmove+0x24>

080040b4 <_free_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4605      	mov	r5, r0
 80040b8:	2900      	cmp	r1, #0
 80040ba:	d043      	beq.n	8004144 <_free_r+0x90>
 80040bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c0:	1f0c      	subs	r4, r1, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfb8      	it	lt
 80040c6:	18e4      	addlt	r4, r4, r3
 80040c8:	f000 f8d0 	bl	800426c <__malloc_lock>
 80040cc:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <_free_r+0x94>)
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	4610      	mov	r0, r2
 80040d2:	b933      	cbnz	r3, 80040e2 <_free_r+0x2e>
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	6014      	str	r4, [r2, #0]
 80040d8:	4628      	mov	r0, r5
 80040da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040de:	f000 b8cb 	b.w	8004278 <__malloc_unlock>
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	d90a      	bls.n	80040fc <_free_r+0x48>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	1862      	adds	r2, r4, r1
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bf01      	itttt	eq
 80040ee:	681a      	ldreq	r2, [r3, #0]
 80040f0:	685b      	ldreq	r3, [r3, #4]
 80040f2:	1852      	addeq	r2, r2, r1
 80040f4:	6022      	streq	r2, [r4, #0]
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6004      	str	r4, [r0, #0]
 80040fa:	e7ed      	b.n	80040d8 <_free_r+0x24>
 80040fc:	461a      	mov	r2, r3
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	b10b      	cbz	r3, 8004106 <_free_r+0x52>
 8004102:	42a3      	cmp	r3, r4
 8004104:	d9fa      	bls.n	80040fc <_free_r+0x48>
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	1850      	adds	r0, r2, r1
 800410a:	42a0      	cmp	r0, r4
 800410c:	d10b      	bne.n	8004126 <_free_r+0x72>
 800410e:	6820      	ldr	r0, [r4, #0]
 8004110:	4401      	add	r1, r0
 8004112:	1850      	adds	r0, r2, r1
 8004114:	4283      	cmp	r3, r0
 8004116:	6011      	str	r1, [r2, #0]
 8004118:	d1de      	bne.n	80040d8 <_free_r+0x24>
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4401      	add	r1, r0
 8004120:	6011      	str	r1, [r2, #0]
 8004122:	6053      	str	r3, [r2, #4]
 8004124:	e7d8      	b.n	80040d8 <_free_r+0x24>
 8004126:	d902      	bls.n	800412e <_free_r+0x7a>
 8004128:	230c      	movs	r3, #12
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	e7d4      	b.n	80040d8 <_free_r+0x24>
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	1821      	adds	r1, r4, r0
 8004132:	428b      	cmp	r3, r1
 8004134:	bf01      	itttt	eq
 8004136:	6819      	ldreq	r1, [r3, #0]
 8004138:	685b      	ldreq	r3, [r3, #4]
 800413a:	1809      	addeq	r1, r1, r0
 800413c:	6021      	streq	r1, [r4, #0]
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6054      	str	r4, [r2, #4]
 8004142:	e7c9      	b.n	80040d8 <_free_r+0x24>
 8004144:	bd38      	pop	{r3, r4, r5, pc}
 8004146:	bf00      	nop
 8004148:	200000bc 	.word	0x200000bc

0800414c <_malloc_r>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	1ccd      	adds	r5, r1, #3
 8004150:	f025 0503 	bic.w	r5, r5, #3
 8004154:	3508      	adds	r5, #8
 8004156:	2d0c      	cmp	r5, #12
 8004158:	bf38      	it	cc
 800415a:	250c      	movcc	r5, #12
 800415c:	2d00      	cmp	r5, #0
 800415e:	4606      	mov	r6, r0
 8004160:	db01      	blt.n	8004166 <_malloc_r+0x1a>
 8004162:	42a9      	cmp	r1, r5
 8004164:	d903      	bls.n	800416e <_malloc_r+0x22>
 8004166:	230c      	movs	r3, #12
 8004168:	6033      	str	r3, [r6, #0]
 800416a:	2000      	movs	r0, #0
 800416c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416e:	f000 f87d 	bl	800426c <__malloc_lock>
 8004172:	4921      	ldr	r1, [pc, #132]	; (80041f8 <_malloc_r+0xac>)
 8004174:	680a      	ldr	r2, [r1, #0]
 8004176:	4614      	mov	r4, r2
 8004178:	b99c      	cbnz	r4, 80041a2 <_malloc_r+0x56>
 800417a:	4f20      	ldr	r7, [pc, #128]	; (80041fc <_malloc_r+0xb0>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b923      	cbnz	r3, 800418a <_malloc_r+0x3e>
 8004180:	4621      	mov	r1, r4
 8004182:	4630      	mov	r0, r6
 8004184:	f000 f862 	bl	800424c <_sbrk_r>
 8004188:	6038      	str	r0, [r7, #0]
 800418a:	4629      	mov	r1, r5
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f85d 	bl	800424c <_sbrk_r>
 8004192:	1c43      	adds	r3, r0, #1
 8004194:	d123      	bne.n	80041de <_malloc_r+0x92>
 8004196:	230c      	movs	r3, #12
 8004198:	4630      	mov	r0, r6
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	f000 f86c 	bl	8004278 <__malloc_unlock>
 80041a0:	e7e3      	b.n	800416a <_malloc_r+0x1e>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	1b5b      	subs	r3, r3, r5
 80041a6:	d417      	bmi.n	80041d8 <_malloc_r+0x8c>
 80041a8:	2b0b      	cmp	r3, #11
 80041aa:	d903      	bls.n	80041b4 <_malloc_r+0x68>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	441c      	add	r4, r3
 80041b0:	6025      	str	r5, [r4, #0]
 80041b2:	e004      	b.n	80041be <_malloc_r+0x72>
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	42a2      	cmp	r2, r4
 80041b8:	bf0c      	ite	eq
 80041ba:	600b      	streq	r3, [r1, #0]
 80041bc:	6053      	strne	r3, [r2, #4]
 80041be:	4630      	mov	r0, r6
 80041c0:	f000 f85a 	bl	8004278 <__malloc_unlock>
 80041c4:	f104 000b 	add.w	r0, r4, #11
 80041c8:	1d23      	adds	r3, r4, #4
 80041ca:	f020 0007 	bic.w	r0, r0, #7
 80041ce:	1ac2      	subs	r2, r0, r3
 80041d0:	d0cc      	beq.n	800416c <_malloc_r+0x20>
 80041d2:	1a1b      	subs	r3, r3, r0
 80041d4:	50a3      	str	r3, [r4, r2]
 80041d6:	e7c9      	b.n	800416c <_malloc_r+0x20>
 80041d8:	4622      	mov	r2, r4
 80041da:	6864      	ldr	r4, [r4, #4]
 80041dc:	e7cc      	b.n	8004178 <_malloc_r+0x2c>
 80041de:	1cc4      	adds	r4, r0, #3
 80041e0:	f024 0403 	bic.w	r4, r4, #3
 80041e4:	42a0      	cmp	r0, r4
 80041e6:	d0e3      	beq.n	80041b0 <_malloc_r+0x64>
 80041e8:	1a21      	subs	r1, r4, r0
 80041ea:	4630      	mov	r0, r6
 80041ec:	f000 f82e 	bl	800424c <_sbrk_r>
 80041f0:	3001      	adds	r0, #1
 80041f2:	d1dd      	bne.n	80041b0 <_malloc_r+0x64>
 80041f4:	e7cf      	b.n	8004196 <_malloc_r+0x4a>
 80041f6:	bf00      	nop
 80041f8:	200000bc 	.word	0x200000bc
 80041fc:	200000c0 	.word	0x200000c0

08004200 <_realloc_r>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	4607      	mov	r7, r0
 8004204:	4614      	mov	r4, r2
 8004206:	460e      	mov	r6, r1
 8004208:	b921      	cbnz	r1, 8004214 <_realloc_r+0x14>
 800420a:	4611      	mov	r1, r2
 800420c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004210:	f7ff bf9c 	b.w	800414c <_malloc_r>
 8004214:	b922      	cbnz	r2, 8004220 <_realloc_r+0x20>
 8004216:	f7ff ff4d 	bl	80040b4 <_free_r>
 800421a:	4625      	mov	r5, r4
 800421c:	4628      	mov	r0, r5
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004220:	f000 f830 	bl	8004284 <_malloc_usable_size_r>
 8004224:	42a0      	cmp	r0, r4
 8004226:	d20f      	bcs.n	8004248 <_realloc_r+0x48>
 8004228:	4621      	mov	r1, r4
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff ff8e 	bl	800414c <_malloc_r>
 8004230:	4605      	mov	r5, r0
 8004232:	2800      	cmp	r0, #0
 8004234:	d0f2      	beq.n	800421c <_realloc_r+0x1c>
 8004236:	4631      	mov	r1, r6
 8004238:	4622      	mov	r2, r4
 800423a:	f7ff ff13 	bl	8004064 <memcpy>
 800423e:	4631      	mov	r1, r6
 8004240:	4638      	mov	r0, r7
 8004242:	f7ff ff37 	bl	80040b4 <_free_r>
 8004246:	e7e9      	b.n	800421c <_realloc_r+0x1c>
 8004248:	4635      	mov	r5, r6
 800424a:	e7e7      	b.n	800421c <_realloc_r+0x1c>

0800424c <_sbrk_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	2300      	movs	r3, #0
 8004250:	4d05      	ldr	r5, [pc, #20]	; (8004268 <_sbrk_r+0x1c>)
 8004252:	4604      	mov	r4, r0
 8004254:	4608      	mov	r0, r1
 8004256:	602b      	str	r3, [r5, #0]
 8004258:	f7fd f8a6 	bl	80013a8 <_sbrk>
 800425c:	1c43      	adds	r3, r0, #1
 800425e:	d102      	bne.n	8004266 <_sbrk_r+0x1a>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	b103      	cbz	r3, 8004266 <_sbrk_r+0x1a>
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	20000590 	.word	0x20000590

0800426c <__malloc_lock>:
 800426c:	4801      	ldr	r0, [pc, #4]	; (8004274 <__malloc_lock+0x8>)
 800426e:	f000 b811 	b.w	8004294 <__retarget_lock_acquire_recursive>
 8004272:	bf00      	nop
 8004274:	20000598 	.word	0x20000598

08004278 <__malloc_unlock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_unlock+0x8>)
 800427a:	f000 b80c 	b.w	8004296 <__retarget_lock_release_recursive>
 800427e:	bf00      	nop
 8004280:	20000598 	.word	0x20000598

08004284 <_malloc_usable_size_r>:
 8004284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004288:	1f18      	subs	r0, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfbc      	itt	lt
 800428e:	580b      	ldrlt	r3, [r1, r0]
 8004290:	18c0      	addlt	r0, r0, r3
 8004292:	4770      	bx	lr

08004294 <__retarget_lock_acquire_recursive>:
 8004294:	4770      	bx	lr

08004296 <__retarget_lock_release_recursive>:
 8004296:	4770      	bx	lr

08004298 <_init>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr

080042a4 <_fini>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr
