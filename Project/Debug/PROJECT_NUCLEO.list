
PROJECT_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc8  08004dc8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004dc8  08004dc8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dc8  08004dc8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dcc  08004dcc  00014dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000090  08004e60  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  08004e60  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001510d  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9f  00000000  00000000  000351c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00037f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00038f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001995b  00000000  00000000  00039eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015177  00000000  00000000  0005380b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2e3  00000000  00000000  00068982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046cc  00000000  00000000  000f6cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d04 	.word	0x08004d04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004d04 	.word	0x08004d04

0800014c <clearLed>:
 *  Created on: Nov 14, 2024
 *      Author: admin
 */
#include <RYG_LED.h>

void clearLed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	displayLed(-1);
 8000150:	f04f 30ff 	mov.w	r0, #4294967295
 8000154:	f000 f806 	bl	8000164 <displayLed>
	displayLed2(-1);
 8000158:	f04f 30ff 	mov.w	r0, #4294967295
 800015c:	f000 f848 	bl	80001f0 <displayLed2>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <displayLed>:

void displayLed(int state){
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	switch(state){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f240 124d 	movw	r2, #333	; 0x14d
 8000172:	4293      	cmp	r3, r2
 8000174:	d020      	beq.n	80001b8 <displayLed+0x54>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 800017c:	da27      	bge.n	80001ce <displayLed+0x6a>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b6f      	cmp	r3, #111	; 0x6f
 8000182:	d003      	beq.n	800018c <displayLed+0x28>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2bde      	cmp	r3, #222	; 0xde
 8000188:	d00b      	beq.n	80001a2 <displayLed+0x3e>
 800018a:	e020      	b.n	80001ce <displayLed+0x6a>
		case RED:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2108      	movs	r1, #8
 8000190:	4816      	ldr	r0, [pc, #88]	; (80001ec <displayLed+0x88>)
 8000192:	f001 ff2a 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	2120      	movs	r1, #32
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <displayLed+0x88>)
 800019c:	f001 ff25 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 80001a0:	e020      	b.n	80001e4 <displayLed+0x80>
		case YEL:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2108      	movs	r1, #8
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <displayLed+0x88>)
 80001a8:	f001 ff1f 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2120      	movs	r1, #32
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <displayLed+0x88>)
 80001b2:	f001 ff1a 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 80001b6:	e015      	b.n	80001e4 <displayLed+0x80>
		case GREEN:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2108      	movs	r1, #8
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <displayLed+0x88>)
 80001be:	f001 ff14 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2120      	movs	r1, #32
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <displayLed+0x88>)
 80001c8:	f001 ff0f 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 80001cc:	e00a      	b.n	80001e4 <displayLed+0x80>
		default:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2108      	movs	r1, #8
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <displayLed+0x88>)
 80001d4:	f001 ff09 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2120      	movs	r1, #32
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <displayLed+0x88>)
 80001de:	f001 ff04 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 80001e2:	bf00      	nop
	}
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <displayLed2>:
void displayLed2(int state){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	switch(state){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f240 124d 	movw	r2, #333	; 0x14d
 80001fe:	4293      	cmp	r3, r2
 8000200:	d022      	beq.n	8000248 <displayLed2+0x58>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8000208:	da2a      	bge.n	8000260 <displayLed2+0x70>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b6f      	cmp	r3, #111	; 0x6f
 800020e:	d003      	beq.n	8000218 <displayLed2+0x28>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2bde      	cmp	r3, #222	; 0xde
 8000214:	d00c      	beq.n	8000230 <displayLed2+0x40>
 8000216:	e023      	b.n	8000260 <displayLed2+0x70>
		case RED:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2110      	movs	r1, #16
 800021c:	4818      	ldr	r0, [pc, #96]	; (8000280 <displayLed2+0x90>)
 800021e:	f001 fee4 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000228:	4815      	ldr	r0, [pc, #84]	; (8000280 <displayLed2+0x90>)
 800022a:	f001 fede 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 800022e:	e023      	b.n	8000278 <displayLed2+0x88>
		case YEL:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4812      	ldr	r0, [pc, #72]	; (8000280 <displayLed2+0x90>)
 8000236:	f001 fed8 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	480f      	ldr	r0, [pc, #60]	; (8000280 <displayLed2+0x90>)
 8000242:	f001 fed2 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 8000246:	e017      	b.n	8000278 <displayLed2+0x88>
		case GREEN:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <displayLed2+0x90>)
 800024e:	f001 fecc 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4809      	ldr	r0, [pc, #36]	; (8000280 <displayLed2+0x90>)
 800025a:	f001 fec6 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 800025e:	e00b      	b.n	8000278 <displayLed2+0x88>
		default:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2110      	movs	r1, #16
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <displayLed2+0x90>)
 8000266:	f001 fec0 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <displayLed2+0x90>)
 8000272:	f001 feba 	bl	8001fea <HAL_GPIO_WritePin>
			break;
 8000276:	bf00      	nop
	}
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010c00 	.word	0x40010c00

08000284 <init_Button>:
int TimeOutForKeyPress[NUM_BUTTON];
int button_pressed[NUM_BUTTON];
int button_long_pressed[NUM_BUTTON];
int button_flag[NUM_BUTTON];

void init_Button(int i){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
		 KeyReg0[i] = NORMAL_STATE;
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <init_Button+0x64>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2101      	movs	r1, #1
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg1[i] = NORMAL_STATE;
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <init_Button+0x68>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2101      	movs	r1, #1
 800029c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg2[i] = NORMAL_STATE;
 80002a0:	4a13      	ldr	r2, [pc, #76]	; (80002f0 <init_Button+0x6c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2101      	movs	r1, #1
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg3[i] = NORMAL_STATE;
 80002aa:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <init_Button+0x70>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2101      	movs	r1, #1
 80002b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 TimeOutForKeyPress[i] =  1000;
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <init_Button+0x74>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_pressed[i] = 0;
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <init_Button+0x78>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2100      	movs	r1, #0
 80002c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_long_pressed[i] = 0;
 80002ca:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <init_Button+0x7c>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2100      	movs	r1, #0
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_flag[i] = 0;
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <init_Button+0x80>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2100      	movs	r1, #0
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	200000d8 	.word	0x200000d8
 80002ec:	200000e4 	.word	0x200000e4
 80002f0:	20000114 	.word	0x20000114
 80002f4:	200000cc 	.word	0x200000cc
 80002f8:	200000f0 	.word	0x200000f0
 80002fc:	20000108 	.word	0x20000108
 8000300:	20000120 	.word	0x20000120
 8000304:	200000fc 	.word	0x200000fc

08000308 <isButtonPressed>:


GPIO_TypeDef* button_ports[] = {BUTTON1_GPIO_Port,BUTTON2_GPIO_Port,BUTTON3_GPIO_Port};
uint16_t button_pins[] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

int isButtonPressed( int index ){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000310:	4a09      	ldr	r2, [pc, #36]	; (8000338 <isButtonPressed+0x30>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d106      	bne.n	800032a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <isButtonPressed+0x30>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2100      	movs	r1, #0
 8000322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000326:	2301      	movs	r3, #1
 8000328:	e000      	b.n	800032c <isButtonPressed+0x24>
	}
	return 0;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	200000fc 	.word	0x200000fc

0800033c <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTON; i++){
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	e07d      	b.n	8000444 <getKeyInput+0x108>
		KeyReg2[i] = KeyReg1[i];
 8000348:	4a43      	ldr	r2, [pc, #268]	; (8000458 <getKeyInput+0x11c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000350:	4942      	ldr	r1, [pc, #264]	; (800045c <getKeyInput+0x120>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000358:	4a41      	ldr	r2, [pc, #260]	; (8000460 <getKeyInput+0x124>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000360:	493d      	ldr	r1, [pc, #244]	; (8000458 <getKeyInput+0x11c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  KeyReg0[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000368:	4a3e      	ldr	r2, [pc, #248]	; (8000464 <getKeyInput+0x128>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	493d      	ldr	r1, [pc, #244]	; (8000468 <getKeyInput+0x12c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000378:	4619      	mov	r1, r3
 800037a:	4610      	mov	r0, r2
 800037c:	f001 fe1e 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000380:	4603      	mov	r3, r0
 8000382:	4619      	mov	r1, r3
 8000384:	4a36      	ldr	r2, [pc, #216]	; (8000460 <getKeyInput+0x124>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800038c:	4a32      	ldr	r2, [pc, #200]	; (8000458 <getKeyInput+0x11c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000394:	4932      	ldr	r1, [pc, #200]	; (8000460 <getKeyInput+0x124>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039c:	429a      	cmp	r2, r3
 800039e:	d14e      	bne.n	800043e <getKeyInput+0x102>
 80003a0:	4a2d      	ldr	r2, [pc, #180]	; (8000458 <getKeyInput+0x11c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003a8:	492c      	ldr	r1, [pc, #176]	; (800045c <getKeyInput+0x120>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d144      	bne.n	800043e <getKeyInput+0x102>
		if (KeyReg2[i] != KeyReg3[i]){
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <getKeyInput+0x120>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003bc:	492b      	ldr	r1, [pc, #172]	; (800046c <getKeyInput+0x130>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d019      	beq.n	80003fc <getKeyInput+0xc0>
		  KeyReg3[i] = KeyReg2[i];
 80003c8:	4a24      	ldr	r2, [pc, #144]	; (800045c <getKeyInput+0x120>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d0:	4926      	ldr	r1, [pc, #152]	; (800046c <getKeyInput+0x130>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 80003d8:	4a24      	ldr	r2, [pc, #144]	; (800046c <getKeyInput+0x130>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d12c      	bne.n	800043e <getKeyInput+0x102>
			TimeOutForKeyPress[i] = 1000;
 80003e4:	4a22      	ldr	r2, [pc, #136]	; (8000470 <getKeyInput+0x134>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			//subKeyProcess();
			button_flag[i] = 1;
 80003f0:	4a20      	ldr	r2, [pc, #128]	; (8000474 <getKeyInput+0x138>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2101      	movs	r1, #1
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80003fa:	e020      	b.n	800043e <getKeyInput+0x102>
		  }

		}else{
			TimeOutForKeyPress[i] -= 10;
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <getKeyInput+0x134>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000404:	f1a3 020a 	sub.w	r2, r3, #10
 8000408:	4919      	ldr	r1, [pc, #100]	; (8000470 <getKeyInput+0x134>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <getKeyInput+0x134>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d110      	bne.n	800043e <getKeyInput+0x102>
				TimeOutForKeyPress[i] = 500;
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <getKeyInput+0x134>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000424:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <getKeyInput+0x130>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d104      	bne.n	800043e <getKeyInput+0x102>
					//subKeyProcess();
					button_flag[i] = 1;
 8000434:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <getKeyInput+0x138>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2101      	movs	r1, #1
 800043a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTON; i++){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b02      	cmp	r3, #2
 8000448:	f77f af7e 	ble.w	8000348 <getKeyInput+0xc>
				}
			}
		}
	  }
	}
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000e4 	.word	0x200000e4
 800045c:	20000114 	.word	0x20000114
 8000460:	200000d8 	.word	0x200000d8
 8000464:	20000000 	.word	0x20000000
 8000468:	2000000c 	.word	0x2000000c
 800046c:	200000cc 	.word	0x200000cc
 8000470:	200000f0 	.word	0x200000f0
 8000474:	200000fc 	.word	0x200000fc

08000478 <checkTime>:
 */

#include "fsm_traffic_light.h"


void checkTime() {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	if(red_time != yel_time + green_time){
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <checkTime+0x2c>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <checkTime+0x30>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	441a      	add	r2, r3
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <checkTime+0x34>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	d006      	beq.n	800049c <checkTime+0x24>
		red_time = yel_time + green_time;
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <checkTime+0x2c>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <checkTime+0x30>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <checkTime+0x34>)
 800049a:	6013      	str	r3, [r2, #0]
	}
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	2000001c 	.word	0x2000001c
 80004a8:	20000018 	.word	0x20000018
 80004ac:	20000014 	.word	0x20000014

080004b0 <AUTO_LCD>:

void AUTO_LCD() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	lcd_clear();
 80004b4:	f000 fc2c 	bl	8000d10 <lcd_clear>
	lcd_put_cur(0, 0);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fc3f 	bl	8000d3e <lcd_put_cur>
	lcd_send_string("TRAFFIC1");
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <AUTO_LCD+0x28>)
 80004c2:	f000 fc98 	bl	8000df6 <lcd_send_string>
	lcd_put_cur(8, 1);
 80004c6:	2101      	movs	r1, #1
 80004c8:	2008      	movs	r0, #8
 80004ca:	f000 fc38 	bl	8000d3e <lcd_put_cur>
	lcd_send_string("TRAFFIC2");
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <AUTO_LCD+0x2c>)
 80004d0:	f000 fc91 	bl	8000df6 <lcd_send_string>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	08004d1c 	.word	0x08004d1c
 80004dc:	08004d28 	.word	0x08004d28

080004e0 <fsm_traffic>:

void fsm_traffic(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	switch(status){
 80004e4:	4bab      	ldr	r3, [pc, #684]	; (8000794 <fsm_traffic+0x2b4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	2b08      	cmp	r3, #8
 80004ec:	f200 838a 	bhi.w	8000c04 <fsm_traffic+0x724>
 80004f0:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <fsm_traffic+0x18>)
 80004f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f6:	bf00      	nop
 80004f8:	0800051d 	.word	0x0800051d
 80004fc:	080006c7 	.word	0x080006c7
 8000500:	080007bd 	.word	0x080007bd
 8000504:	0800053f 	.word	0x0800053f
 8000508:	0800060d 	.word	0x0800060d
 800050c:	080008b9 	.word	0x080008b9
 8000510:	080009c9 	.word	0x080009c9
 8000514:	08000b11 	.word	0x08000b11
 8000518:	08000877 	.word	0x08000877
		case INIT:
			checkTime();
 800051c:	f7ff ffac 	bl	8000478 <checkTime>
			status = RED_GREEN;
 8000520:	4b9c      	ldr	r3, [pc, #624]	; (8000794 <fsm_traffic+0x2b4>)
 8000522:	2204      	movs	r2, #4
 8000524:	601a      	str	r2, [r3, #0]
			setTimer(0, green_time);
 8000526:	4b9c      	ldr	r3, [pc, #624]	; (8000798 <fsm_traffic+0x2b8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	2000      	movs	r0, #0
 800052e:	f000 ff7f 	bl	8001430 <setTimer>
			setTimer(1, 1000);
 8000532:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000536:	2001      	movs	r0, #1
 8000538:	f000 ff7a 	bl	8001430 <setTimer>
			break;
 800053c:	e371      	b.n	8000c22 <fsm_traffic+0x742>

		case RED_GREEN:
			val1 = timer_counter[0]/100 + yel_time / 1000;
 800053e:	4b97      	ldr	r3, [pc, #604]	; (800079c <fsm_traffic+0x2bc>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a97      	ldr	r2, [pc, #604]	; (80007a0 <fsm_traffic+0x2c0>)
 8000544:	fb82 1203 	smull	r1, r2, r2, r3
 8000548:	1152      	asrs	r2, r2, #5
 800054a:	17db      	asrs	r3, r3, #31
 800054c:	1ad2      	subs	r2, r2, r3
 800054e:	4b95      	ldr	r3, [pc, #596]	; (80007a4 <fsm_traffic+0x2c4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4995      	ldr	r1, [pc, #596]	; (80007a8 <fsm_traffic+0x2c8>)
 8000554:	fb81 0103 	smull	r0, r1, r1, r3
 8000558:	1189      	asrs	r1, r1, #6
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1acb      	subs	r3, r1, r3
 800055e:	4413      	add	r3, r2
 8000560:	4a92      	ldr	r2, [pc, #584]	; (80007ac <fsm_traffic+0x2cc>)
 8000562:	6013      	str	r3, [r2, #0]
			val2 = timer_counter[0]/100;
 8000564:	4b8d      	ldr	r3, [pc, #564]	; (800079c <fsm_traffic+0x2bc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a8d      	ldr	r2, [pc, #564]	; (80007a0 <fsm_traffic+0x2c0>)
 800056a:	fb82 1203 	smull	r1, r2, r2, r3
 800056e:	1152      	asrs	r2, r2, #5
 8000570:	17db      	asrs	r3, r3, #31
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	4a8e      	ldr	r2, [pc, #568]	; (80007b0 <fsm_traffic+0x2d0>)
 8000576:	6013      	str	r3, [r2, #0]
			displayLed(RED);
 8000578:	206f      	movs	r0, #111	; 0x6f
 800057a:	f7ff fdf3 	bl	8000164 <displayLed>
			displayLed2(GREEN);
 800057e:	f240 104d 	movw	r0, #333	; 0x14d
 8000582:	f7ff fe35 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000586:	2000      	movs	r0, #0
 8000588:	f000 ff72 	bl	8001470 <isTimerExpired>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <fsm_traffic+0xc4>
				status = RED_YEL;
 8000592:	4b80      	ldr	r3, [pc, #512]	; (8000794 <fsm_traffic+0x2b4>)
 8000594:	2205      	movs	r2, #5
 8000596:	601a      	str	r2, [r3, #0]
				setTimer(0, yel_time);
 8000598:	4b82      	ldr	r3, [pc, #520]	; (80007a4 <fsm_traffic+0x2c4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 ff46 	bl	8001430 <setTimer>
			}
			if (isTimerExpired(1)) {
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 ff63 	bl	8001470 <isTimerExpired>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d022      	beq.n	80005f6 <fsm_traffic+0x116>
				AUTO_LCD();
 80005b0:	f7ff ff7e 	bl	80004b0 <AUTO_LCD>
				lcd_put_cur(2, 1);
 80005b4:	2101      	movs	r1, #1
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 fbc1 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val1);
 80005bc:	4b7b      	ldr	r3, [pc, #492]	; (80007ac <fsm_traffic+0x2cc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	497c      	ldr	r1, [pc, #496]	; (80007b4 <fsm_traffic+0x2d4>)
 80005c4:	487c      	ldr	r0, [pc, #496]	; (80007b8 <fsm_traffic+0x2d8>)
 80005c6:	f003 ff63 	bl	8004490 <siprintf>
				lcd_send_string(str);
 80005ca:	487b      	ldr	r0, [pc, #492]	; (80007b8 <fsm_traffic+0x2d8>)
 80005cc:	f000 fc13 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(10, 0);
 80005d0:	2100      	movs	r1, #0
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fbb3 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val2);
 80005d8:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <fsm_traffic+0x2d0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4975      	ldr	r1, [pc, #468]	; (80007b4 <fsm_traffic+0x2d4>)
 80005e0:	4875      	ldr	r0, [pc, #468]	; (80007b8 <fsm_traffic+0x2d8>)
 80005e2:	f003 ff55 	bl	8004490 <siprintf>
				lcd_send_string(str);
 80005e6:	4874      	ldr	r0, [pc, #464]	; (80007b8 <fsm_traffic+0x2d8>)
 80005e8:	f000 fc05 	bl	8000df6 <lcd_send_string>
				setTimer(1, 1000);
 80005ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 ff1d 	bl	8001430 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fe86 	bl	8000308 <isButtonPressed>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	f000 8302 	beq.w	8000c08 <fsm_traffic+0x728>
 8000604:	4b63      	ldr	r3, [pc, #396]	; (8000794 <fsm_traffic+0x2b4>)
 8000606:	2209      	movs	r2, #9
 8000608:	601a      	str	r2, [r3, #0]
			break;
 800060a:	e2fd      	b.n	8000c08 <fsm_traffic+0x728>

		case RED_YEL:
			val1 = timer_counter[0]/100;
 800060c:	4b63      	ldr	r3, [pc, #396]	; (800079c <fsm_traffic+0x2bc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a63      	ldr	r2, [pc, #396]	; (80007a0 <fsm_traffic+0x2c0>)
 8000612:	fb82 1203 	smull	r1, r2, r2, r3
 8000616:	1152      	asrs	r2, r2, #5
 8000618:	17db      	asrs	r3, r3, #31
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	4a63      	ldr	r2, [pc, #396]	; (80007ac <fsm_traffic+0x2cc>)
 800061e:	6013      	str	r3, [r2, #0]
			val2 = timer_counter[0]/100;
 8000620:	4b5e      	ldr	r3, [pc, #376]	; (800079c <fsm_traffic+0x2bc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a5e      	ldr	r2, [pc, #376]	; (80007a0 <fsm_traffic+0x2c0>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1152      	asrs	r2, r2, #5
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4a5f      	ldr	r2, [pc, #380]	; (80007b0 <fsm_traffic+0x2d0>)
 8000632:	6013      	str	r3, [r2, #0]
			displayLed(RED);
 8000634:	206f      	movs	r0, #111	; 0x6f
 8000636:	f7ff fd95 	bl	8000164 <displayLed>
			displayLed2(YEL);
 800063a:	20de      	movs	r0, #222	; 0xde
 800063c:	f7ff fdd8 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000640:	2000      	movs	r0, #0
 8000642:	f000 ff15 	bl	8001470 <isTimerExpired>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <fsm_traffic+0x17e>
				status = GREEN_RED;
 800064c:	4b51      	ldr	r3, [pc, #324]	; (8000794 <fsm_traffic+0x2b4>)
 800064e:	2202      	movs	r2, #2
 8000650:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 8000652:	4b51      	ldr	r3, [pc, #324]	; (8000798 <fsm_traffic+0x2b8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4619      	mov	r1, r3
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fee9 	bl	8001430 <setTimer>
			}
			if (isTimerExpired(1)) {
 800065e:	2001      	movs	r0, #1
 8000660:	f000 ff06 	bl	8001470 <isTimerExpired>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d022      	beq.n	80006b0 <fsm_traffic+0x1d0>
				AUTO_LCD();
 800066a:	f7ff ff21 	bl	80004b0 <AUTO_LCD>
				lcd_put_cur(2, 1);
 800066e:	2101      	movs	r1, #1
 8000670:	2002      	movs	r0, #2
 8000672:	f000 fb64 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val1);
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <fsm_traffic+0x2cc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	494d      	ldr	r1, [pc, #308]	; (80007b4 <fsm_traffic+0x2d4>)
 800067e:	484e      	ldr	r0, [pc, #312]	; (80007b8 <fsm_traffic+0x2d8>)
 8000680:	f003 ff06 	bl	8004490 <siprintf>
				lcd_send_string(str);
 8000684:	484c      	ldr	r0, [pc, #304]	; (80007b8 <fsm_traffic+0x2d8>)
 8000686:	f000 fbb6 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(10, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	200a      	movs	r0, #10
 800068e:	f000 fb56 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val2);
 8000692:	4b47      	ldr	r3, [pc, #284]	; (80007b0 <fsm_traffic+0x2d0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4946      	ldr	r1, [pc, #280]	; (80007b4 <fsm_traffic+0x2d4>)
 800069a:	4847      	ldr	r0, [pc, #284]	; (80007b8 <fsm_traffic+0x2d8>)
 800069c:	f003 fef8 	bl	8004490 <siprintf>
				lcd_send_string(str);
 80006a0:	4845      	ldr	r0, [pc, #276]	; (80007b8 <fsm_traffic+0x2d8>)
 80006a2:	f000 fba8 	bl	8000df6 <lcd_send_string>
				setTimer(1, 1000);
 80006a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 fec0 	bl	8001430 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff fe29 	bl	8000308 <isButtonPressed>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f000 82a7 	beq.w	8000c0c <fsm_traffic+0x72c>
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <fsm_traffic+0x2b4>)
 80006c0:	2209      	movs	r2, #9
 80006c2:	601a      	str	r2, [r3, #0]
			break;
 80006c4:	e2a2      	b.n	8000c0c <fsm_traffic+0x72c>

		case GREEN_RED:
			val1 = timer_counter[0]/100;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <fsm_traffic+0x2bc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a35      	ldr	r2, [pc, #212]	; (80007a0 <fsm_traffic+0x2c0>)
 80006cc:	fb82 1203 	smull	r1, r2, r2, r3
 80006d0:	1152      	asrs	r2, r2, #5
 80006d2:	17db      	asrs	r3, r3, #31
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4a35      	ldr	r2, [pc, #212]	; (80007ac <fsm_traffic+0x2cc>)
 80006d8:	6013      	str	r3, [r2, #0]
			val2 = timer_counter[0]/100 + yel_time / 1000;
 80006da:	4b30      	ldr	r3, [pc, #192]	; (800079c <fsm_traffic+0x2bc>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <fsm_traffic+0x2c0>)
 80006e0:	fb82 1203 	smull	r1, r2, r2, r3
 80006e4:	1152      	asrs	r2, r2, #5
 80006e6:	17db      	asrs	r3, r3, #31
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <fsm_traffic+0x2c4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	492e      	ldr	r1, [pc, #184]	; (80007a8 <fsm_traffic+0x2c8>)
 80006f0:	fb81 0103 	smull	r0, r1, r1, r3
 80006f4:	1189      	asrs	r1, r1, #6
 80006f6:	17db      	asrs	r3, r3, #31
 80006f8:	1acb      	subs	r3, r1, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <fsm_traffic+0x2d0>)
 80006fe:	6013      	str	r3, [r2, #0]
			displayLed(GREEN);
 8000700:	f240 104d 	movw	r0, #333	; 0x14d
 8000704:	f7ff fd2e 	bl	8000164 <displayLed>
			displayLed2(RED);
 8000708:	206f      	movs	r0, #111	; 0x6f
 800070a:	f7ff fd71 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 800070e:	2000      	movs	r0, #0
 8000710:	f000 feae 	bl	8001470 <isTimerExpired>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d008      	beq.n	800072c <fsm_traffic+0x24c>
				status = YEL_RED;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <fsm_traffic+0x2b4>)
 800071c:	2203      	movs	r2, #3
 800071e:	601a      	str	r2, [r3, #0]
				setTimer(0, yel_time);
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <fsm_traffic+0x2c4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	2000      	movs	r0, #0
 8000728:	f000 fe82 	bl	8001430 <setTimer>
			}
			if (isTimerExpired(1)) {
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fe9f 	bl	8001470 <isTimerExpired>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d022      	beq.n	800077e <fsm_traffic+0x29e>
				AUTO_LCD();
 8000738:	f7ff feba 	bl	80004b0 <AUTO_LCD>
				lcd_put_cur(2, 1);
 800073c:	2101      	movs	r1, #1
 800073e:	2002      	movs	r0, #2
 8000740:	f000 fafd 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val1);
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <fsm_traffic+0x2cc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	491a      	ldr	r1, [pc, #104]	; (80007b4 <fsm_traffic+0x2d4>)
 800074c:	481a      	ldr	r0, [pc, #104]	; (80007b8 <fsm_traffic+0x2d8>)
 800074e:	f003 fe9f 	bl	8004490 <siprintf>
				lcd_send_string(str);
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <fsm_traffic+0x2d8>)
 8000754:	f000 fb4f 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(10, 0);
 8000758:	2100      	movs	r1, #0
 800075a:	200a      	movs	r0, #10
 800075c:	f000 faef 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val2);
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <fsm_traffic+0x2d0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4913      	ldr	r1, [pc, #76]	; (80007b4 <fsm_traffic+0x2d4>)
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <fsm_traffic+0x2d8>)
 800076a:	f003 fe91 	bl	8004490 <siprintf>
				lcd_send_string(str);
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <fsm_traffic+0x2d8>)
 8000770:	f000 fb41 	bl	8000df6 <lcd_send_string>
				setTimer(1, 1000);
 8000774:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fe59 	bl	8001430 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fdc2 	bl	8000308 <isButtonPressed>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	f000 8242 	beq.w	8000c10 <fsm_traffic+0x730>
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <fsm_traffic+0x2b4>)
 800078e:	2209      	movs	r2, #9
 8000790:	601a      	str	r2, [r3, #0]
			break;
 8000792:	e23d      	b.n	8000c10 <fsm_traffic+0x730>
 8000794:	200000ac 	.word	0x200000ac
 8000798:	20000018 	.word	0x20000018
 800079c:	20000598 	.word	0x20000598
 80007a0:	51eb851f 	.word	0x51eb851f
 80007a4:	2000001c 	.word	0x2000001c
 80007a8:	10624dd3 	.word	0x10624dd3
 80007ac:	200000b0 	.word	0x200000b0
 80007b0:	200000b4 	.word	0x200000b4
 80007b4:	08004d34 	.word	0x08004d34
 80007b8:	20000138 	.word	0x20000138

		case YEL_RED:
			val1 = timer_counter[0]/100;
 80007bc:	4bc2      	ldr	r3, [pc, #776]	; (8000ac8 <fsm_traffic+0x5e8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4ac2      	ldr	r2, [pc, #776]	; (8000acc <fsm_traffic+0x5ec>)
 80007c2:	fb82 1203 	smull	r1, r2, r2, r3
 80007c6:	1152      	asrs	r2, r2, #5
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	4ac0      	ldr	r2, [pc, #768]	; (8000ad0 <fsm_traffic+0x5f0>)
 80007ce:	6013      	str	r3, [r2, #0]
			val2 = timer_counter[0]/100;
 80007d0:	4bbd      	ldr	r3, [pc, #756]	; (8000ac8 <fsm_traffic+0x5e8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4abd      	ldr	r2, [pc, #756]	; (8000acc <fsm_traffic+0x5ec>)
 80007d6:	fb82 1203 	smull	r1, r2, r2, r3
 80007da:	1152      	asrs	r2, r2, #5
 80007dc:	17db      	asrs	r3, r3, #31
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	4abc      	ldr	r2, [pc, #752]	; (8000ad4 <fsm_traffic+0x5f4>)
 80007e2:	6013      	str	r3, [r2, #0]
			displayLed(YEL);
 80007e4:	20de      	movs	r0, #222	; 0xde
 80007e6:	f7ff fcbd 	bl	8000164 <displayLed>
			displayLed2(RED);
 80007ea:	206f      	movs	r0, #111	; 0x6f
 80007ec:	f7ff fd00 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fe3d 	bl	8001470 <isTimerExpired>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d008      	beq.n	800080e <fsm_traffic+0x32e>
				status = RED_GREEN;
 80007fc:	4bb6      	ldr	r3, [pc, #728]	; (8000ad8 <fsm_traffic+0x5f8>)
 80007fe:	2204      	movs	r2, #4
 8000800:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 8000802:	4bb6      	ldr	r3, [pc, #728]	; (8000adc <fsm_traffic+0x5fc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fe11 	bl	8001430 <setTimer>
			}
			if (isTimerExpired(1)) {
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fe2e 	bl	8001470 <isTimerExpired>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d022      	beq.n	8000860 <fsm_traffic+0x380>
				AUTO_LCD();
 800081a:	f7ff fe49 	bl	80004b0 <AUTO_LCD>
				lcd_put_cur(2, 1);
 800081e:	2101      	movs	r1, #1
 8000820:	2002      	movs	r0, #2
 8000822:	f000 fa8c 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val1);
 8000826:	4baa      	ldr	r3, [pc, #680]	; (8000ad0 <fsm_traffic+0x5f0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	49ac      	ldr	r1, [pc, #688]	; (8000ae0 <fsm_traffic+0x600>)
 800082e:	48ad      	ldr	r0, [pc, #692]	; (8000ae4 <fsm_traffic+0x604>)
 8000830:	f003 fe2e 	bl	8004490 <siprintf>
				lcd_send_string(str);
 8000834:	48ab      	ldr	r0, [pc, #684]	; (8000ae4 <fsm_traffic+0x604>)
 8000836:	f000 fade 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(10, 0);
 800083a:	2100      	movs	r1, #0
 800083c:	200a      	movs	r0, #10
 800083e:	f000 fa7e 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", val2);
 8000842:	4ba4      	ldr	r3, [pc, #656]	; (8000ad4 <fsm_traffic+0x5f4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	49a5      	ldr	r1, [pc, #660]	; (8000ae0 <fsm_traffic+0x600>)
 800084a:	48a6      	ldr	r0, [pc, #664]	; (8000ae4 <fsm_traffic+0x604>)
 800084c:	f003 fe20 	bl	8004490 <siprintf>
				lcd_send_string(str);
 8000850:	48a4      	ldr	r0, [pc, #656]	; (8000ae4 <fsm_traffic+0x604>)
 8000852:	f000 fad0 	bl	8000df6 <lcd_send_string>
				setTimer(1, 1000);
 8000856:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800085a:	2001      	movs	r0, #1
 800085c:	f000 fde8 	bl	8001430 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd51 	bl	8000308 <isButtonPressed>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 81d3 	beq.w	8000c14 <fsm_traffic+0x734>
 800086e:	4b9a      	ldr	r3, [pc, #616]	; (8000ad8 <fsm_traffic+0x5f8>)
 8000870:	2209      	movs	r2, #9
 8000872:	601a      	str	r2, [r3, #0]
			break;
 8000874:	e1ce      	b.n	8000c14 <fsm_traffic+0x734>

		case MAN_INIT:
			setTimer(0,BLINK_TIME);
 8000876:	2132      	movs	r1, #50	; 0x32
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fdd9 	bl	8001430 <setTimer>
			setTimer(1, 1000);
 800087e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fdd4 	bl	8001430 <setTimer>
			status = MAN_RED;
 8000888:	4b93      	ldr	r3, [pc, #588]	; (8000ad8 <fsm_traffic+0x5f8>)
 800088a:	2206      	movs	r2, #6
 800088c:	601a      	str	r2, [r3, #0]
			init_Button(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fcf8 	bl	8000284 <init_Button>
			init_Button(2);
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff fcf5 	bl	8000284 <init_Button>
			clearLed();
 800089a:	f7ff fc57 	bl	800014c <clearLed>
			temp[0] = red_time;
 800089e:	4b92      	ldr	r3, [pc, #584]	; (8000ae8 <fsm_traffic+0x608>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a92      	ldr	r2, [pc, #584]	; (8000aec <fsm_traffic+0x60c>)
 80008a4:	6013      	str	r3, [r2, #0]
			temp[1] = yel_time;
 80008a6:	4b92      	ldr	r3, [pc, #584]	; (8000af0 <fsm_traffic+0x610>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a90      	ldr	r2, [pc, #576]	; (8000aec <fsm_traffic+0x60c>)
 80008ac:	6053      	str	r3, [r2, #4]
			temp[2] = green_time;
 80008ae:	4b8b      	ldr	r3, [pc, #556]	; (8000adc <fsm_traffic+0x5fc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a8e      	ldr	r2, [pc, #568]	; (8000aec <fsm_traffic+0x60c>)
 80008b4:	6093      	str	r3, [r2, #8]
			break;
 80008b6:	e1b4      	b.n	8000c22 <fsm_traffic+0x742>

		case MAN_RED:
			if(isTimerExpired(0)){
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 fdd9 	bl	8001470 <isTimerExpired>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d014      	beq.n	80008ee <fsm_traffic+0x40e>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 80008c4:	2110      	movs	r1, #16
 80008c6:	488b      	ldr	r0, [pc, #556]	; (8000af4 <fsm_traffic+0x614>)
 80008c8:	f001 fba7 	bl	800201a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	4888      	ldr	r0, [pc, #544]	; (8000af4 <fsm_traffic+0x614>)
 80008d2:	f001 fba2 	bl	800201a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80008d6:	2108      	movs	r1, #8
 80008d8:	4886      	ldr	r0, [pc, #536]	; (8000af4 <fsm_traffic+0x614>)
 80008da:	f001 fb9e 	bl	800201a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80008de:	2120      	movs	r1, #32
 80008e0:	4884      	ldr	r0, [pc, #528]	; (8000af4 <fsm_traffic+0x614>)
 80008e2:	f001 fb9a 	bl	800201a <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fda1 	bl	8001430 <setTimer>
			}
			if (isTimerExpired(1)) {
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fdbe 	bl	8001470 <isTimerExpired>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d02f      	beq.n	800095a <fsm_traffic+0x47a>
				lcd_clear();
 80008fa:	f000 fa09 	bl	8000d10 <lcd_clear>
				lcd_put_cur(0, 0);
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f000 fa1c 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("VAL_RED");
 8000906:	487c      	ldr	r0, [pc, #496]	; (8000af8 <fsm_traffic+0x618>)
 8000908:	f000 fa75 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(8, 1);
 800090c:	2101      	movs	r1, #1
 800090e:	2008      	movs	r0, #8
 8000910:	f000 fa15 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("MODE");
 8000914:	4879      	ldr	r0, [pc, #484]	; (8000afc <fsm_traffic+0x61c>)
 8000916:	f000 fa6e 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(2, 1);
 800091a:	2101      	movs	r1, #1
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fa0e 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", temp[0] / 1000);
 8000922:	4b72      	ldr	r3, [pc, #456]	; (8000aec <fsm_traffic+0x60c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a76      	ldr	r2, [pc, #472]	; (8000b00 <fsm_traffic+0x620>)
 8000928:	fb82 1203 	smull	r1, r2, r2, r3
 800092c:	1192      	asrs	r2, r2, #6
 800092e:	17db      	asrs	r3, r3, #31
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	461a      	mov	r2, r3
 8000934:	496a      	ldr	r1, [pc, #424]	; (8000ae0 <fsm_traffic+0x600>)
 8000936:	486b      	ldr	r0, [pc, #428]	; (8000ae4 <fsm_traffic+0x604>)
 8000938:	f003 fdaa 	bl	8004490 <siprintf>
				lcd_send_string(str);
 800093c:	4869      	ldr	r0, [pc, #420]	; (8000ae4 <fsm_traffic+0x604>)
 800093e:	f000 fa5a 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(10, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	200a      	movs	r0, #10
 8000946:	f000 f9fa 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("2");
 800094a:	486e      	ldr	r0, [pc, #440]	; (8000b04 <fsm_traffic+0x624>)
 800094c:	f000 fa53 	bl	8000df6 <lcd_send_string>
				setTimer(1, 1000);
 8000950:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000954:	2001      	movs	r0, #1
 8000956:	f000 fd6b 	bl	8001430 <setTimer>
			}
			if(isButtonPressed(0)){
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fcd4 	bl	8000308 <isButtonPressed>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d009      	beq.n	800097a <fsm_traffic+0x49a>
				status = MAN_YEL;
 8000966:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <fsm_traffic+0x5f8>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
				clearLed();
 800096c:	f7ff fbee 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 8000970:	2132      	movs	r1, #50	; 0x32
 8000972:	2000      	movs	r0, #0
 8000974:	f000 fd5c 	bl	8001430 <setTimer>
				setTimer(0, 0);
				displayLed(RED);
				displayLed2(RED);
			}

			break;
 8000978:	e14e      	b.n	8000c18 <fsm_traffic+0x738>
			else if(isButtonPressed(1)){
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fcc4 	bl	8000308 <isButtonPressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00a      	beq.n	800099c <fsm_traffic+0x4bc>
				temp[0] += 1000;
 8000986:	4b59      	ldr	r3, [pc, #356]	; (8000aec <fsm_traffic+0x60c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800098e:	4a57      	ldr	r2, [pc, #348]	; (8000aec <fsm_traffic+0x60c>)
 8000990:	6013      	str	r3, [r2, #0]
				setTimer(0, BLINK_TIME);
 8000992:	2132      	movs	r1, #50	; 0x32
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fd4b 	bl	8001430 <setTimer>
			break;
 800099a:	e13d      	b.n	8000c18 <fsm_traffic+0x738>
			}else if(isButtonPressed(2)){
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff fcb3 	bl	8000308 <isButtonPressed>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 8137 	beq.w	8000c18 <fsm_traffic+0x738>
				red_time = temp[0];
 80009aa:	4b50      	ldr	r3, [pc, #320]	; (8000aec <fsm_traffic+0x60c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a4e      	ldr	r2, [pc, #312]	; (8000ae8 <fsm_traffic+0x608>)
 80009b0:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 fd3b 	bl	8001430 <setTimer>
				displayLed(RED);
 80009ba:	206f      	movs	r0, #111	; 0x6f
 80009bc:	f7ff fbd2 	bl	8000164 <displayLed>
				displayLed2(RED);
 80009c0:	206f      	movs	r0, #111	; 0x6f
 80009c2:	f7ff fc15 	bl	80001f0 <displayLed2>
			break;
 80009c6:	e127      	b.n	8000c18 <fsm_traffic+0x738>

		case MAN_YEL:
			if(isTimerExpired(0)){
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fd51 	bl	8001470 <isTimerExpired>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d00c      	beq.n	80009ee <fsm_traffic+0x50e>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	4846      	ldr	r0, [pc, #280]	; (8000af4 <fsm_traffic+0x614>)
 80009da:	f001 fb1e 	bl	800201a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80009de:	2120      	movs	r1, #32
 80009e0:	4844      	ldr	r0, [pc, #272]	; (8000af4 <fsm_traffic+0x614>)
 80009e2:	f001 fb1a 	bl	800201a <HAL_GPIO_TogglePin>

				setTimer(0, BLINK_TIME);
 80009e6:	2132      	movs	r1, #50	; 0x32
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fd21 	bl	8001430 <setTimer>
			}
			if (isTimerExpired(1)) {
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fd3e 	bl	8001470 <isTimerExpired>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d02f      	beq.n	8000a5a <fsm_traffic+0x57a>
				lcd_clear();
 80009fa:	f000 f989 	bl	8000d10 <lcd_clear>
				lcd_put_cur(0, 0);
 80009fe:	2100      	movs	r1, #0
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 f99c 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("VAL_YEL");
 8000a06:	4840      	ldr	r0, [pc, #256]	; (8000b08 <fsm_traffic+0x628>)
 8000a08:	f000 f9f5 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(8, 1);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2008      	movs	r0, #8
 8000a10:	f000 f995 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("MODE");
 8000a14:	4839      	ldr	r0, [pc, #228]	; (8000afc <fsm_traffic+0x61c>)
 8000a16:	f000 f9ee 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(2, 1);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 f98e 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", temp[1] / 1000);
 8000a22:	4b32      	ldr	r3, [pc, #200]	; (8000aec <fsm_traffic+0x60c>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4a36      	ldr	r2, [pc, #216]	; (8000b00 <fsm_traffic+0x620>)
 8000a28:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2c:	1192      	asrs	r2, r2, #6
 8000a2e:	17db      	asrs	r3, r3, #31
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	492a      	ldr	r1, [pc, #168]	; (8000ae0 <fsm_traffic+0x600>)
 8000a36:	482b      	ldr	r0, [pc, #172]	; (8000ae4 <fsm_traffic+0x604>)
 8000a38:	f003 fd2a 	bl	8004490 <siprintf>
				lcd_send_string(str);
 8000a3c:	4829      	ldr	r0, [pc, #164]	; (8000ae4 <fsm_traffic+0x604>)
 8000a3e:	f000 f9da 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(10, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	200a      	movs	r0, #10
 8000a46:	f000 f97a 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("3");
 8000a4a:	4830      	ldr	r0, [pc, #192]	; (8000b0c <fsm_traffic+0x62c>)
 8000a4c:	f000 f9d3 	bl	8000df6 <lcd_send_string>
				setTimer(1, 1000);
 8000a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fceb 	bl	8001430 <setTimer>
			}
			if(isButtonPressed(0)){
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fc54 	bl	8000308 <isButtonPressed>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d009      	beq.n	8000a7a <fsm_traffic+0x59a>
				status = MAN_GREEN;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <fsm_traffic+0x5f8>)
 8000a68:	2208      	movs	r2, #8
 8000a6a:	601a      	str	r2, [r3, #0]
				clearLed();
 8000a6c:	f7ff fb6e 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 8000a70:	2132      	movs	r1, #50	; 0x32
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fcdc 	bl	8001430 <setTimer>
				yel_time = temp[1];
				setTimer(0, 0);
				displayLed(YEL);
				displayLed2(YEL);
			}
			break;
 8000a78:	e0d0      	b.n	8000c1c <fsm_traffic+0x73c>
			}else if(isButtonPressed(1)){
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fc44 	bl	8000308 <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00a      	beq.n	8000a9c <fsm_traffic+0x5bc>
				temp[1] += 1000;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <fsm_traffic+0x60c>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <fsm_traffic+0x60c>)
 8000a90:	6053      	str	r3, [r2, #4]
				setTimer(0, BLINK_TIME);
 8000a92:	2132      	movs	r1, #50	; 0x32
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 fccb 	bl	8001430 <setTimer>
			break;
 8000a9a:	e0bf      	b.n	8000c1c <fsm_traffic+0x73c>
			}else if(isButtonPressed(2)){
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f7ff fc33 	bl	8000308 <isButtonPressed>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80b9 	beq.w	8000c1c <fsm_traffic+0x73c>
				yel_time = temp[1];
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <fsm_traffic+0x60c>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <fsm_traffic+0x610>)
 8000ab0:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fcbb 	bl	8001430 <setTimer>
				displayLed(YEL);
 8000aba:	20de      	movs	r0, #222	; 0xde
 8000abc:	f7ff fb52 	bl	8000164 <displayLed>
				displayLed2(YEL);
 8000ac0:	20de      	movs	r0, #222	; 0xde
 8000ac2:	f7ff fb95 	bl	80001f0 <displayLed2>
			break;
 8000ac6:	e0a9      	b.n	8000c1c <fsm_traffic+0x73c>
 8000ac8:	20000598 	.word	0x20000598
 8000acc:	51eb851f 	.word	0x51eb851f
 8000ad0:	200000b0 	.word	0x200000b0
 8000ad4:	200000b4 	.word	0x200000b4
 8000ad8:	200000ac 	.word	0x200000ac
 8000adc:	20000018 	.word	0x20000018
 8000ae0:	08004d34 	.word	0x08004d34
 8000ae4:	20000138 	.word	0x20000138
 8000ae8:	20000014 	.word	0x20000014
 8000aec:	2000012c 	.word	0x2000012c
 8000af0:	2000001c 	.word	0x2000001c
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	08004d38 	.word	0x08004d38
 8000afc:	08004d40 	.word	0x08004d40
 8000b00:	10624dd3 	.word	0x10624dd3
 8000b04:	08004d48 	.word	0x08004d48
 8000b08:	08004d4c 	.word	0x08004d4c
 8000b0c:	08004d54 	.word	0x08004d54

		case MAN_GREEN:
			if(isTimerExpired(0)){
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 fcad 	bl	8001470 <isTimerExpired>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00b      	beq.n	8000b34 <fsm_traffic+0x654>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4842      	ldr	r0, [pc, #264]	; (8000c28 <fsm_traffic+0x748>)
 8000b20:	f001 fa7b 	bl	800201a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000b24:	2108      	movs	r1, #8
 8000b26:	4840      	ldr	r0, [pc, #256]	; (8000c28 <fsm_traffic+0x748>)
 8000b28:	f001 fa77 	bl	800201a <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000b2c:	2132      	movs	r1, #50	; 0x32
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 fc7e 	bl	8001430 <setTimer>
			}
			if (isTimerExpired(1)) {
 8000b34:	2001      	movs	r0, #1
 8000b36:	f000 fc9b 	bl	8001470 <isTimerExpired>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d02f      	beq.n	8000ba0 <fsm_traffic+0x6c0>
				lcd_clear();
 8000b40:	f000 f8e6 	bl	8000d10 <lcd_clear>
				lcd_put_cur(0, 0);
 8000b44:	2100      	movs	r1, #0
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 f8f9 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("VALGREEN");
 8000b4c:	4837      	ldr	r0, [pc, #220]	; (8000c2c <fsm_traffic+0x74c>)
 8000b4e:	f000 f952 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(8, 1);
 8000b52:	2101      	movs	r1, #1
 8000b54:	2008      	movs	r0, #8
 8000b56:	f000 f8f2 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("MODE");
 8000b5a:	4835      	ldr	r0, [pc, #212]	; (8000c30 <fsm_traffic+0x750>)
 8000b5c:	f000 f94b 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(2, 1);
 8000b60:	2101      	movs	r1, #1
 8000b62:	2002      	movs	r0, #2
 8000b64:	f000 f8eb 	bl	8000d3e <lcd_put_cur>
				sprintf(str, "%d", temp[2] / 1000);
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <fsm_traffic+0x754>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <fsm_traffic+0x758>)
 8000b6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b72:	1192      	asrs	r2, r2, #6
 8000b74:	17db      	asrs	r3, r3, #31
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4930      	ldr	r1, [pc, #192]	; (8000c3c <fsm_traffic+0x75c>)
 8000b7c:	4830      	ldr	r0, [pc, #192]	; (8000c40 <fsm_traffic+0x760>)
 8000b7e:	f003 fc87 	bl	8004490 <siprintf>
				lcd_send_string(str);
 8000b82:	482f      	ldr	r0, [pc, #188]	; (8000c40 <fsm_traffic+0x760>)
 8000b84:	f000 f937 	bl	8000df6 <lcd_send_string>
				lcd_put_cur(10, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f000 f8d7 	bl	8000d3e <lcd_put_cur>
				lcd_send_string("4");
 8000b90:	482c      	ldr	r0, [pc, #176]	; (8000c44 <fsm_traffic+0x764>)
 8000b92:	f000 f930 	bl	8000df6 <lcd_send_string>
				setTimer(1, 1000);
 8000b96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 fc48 	bl	8001430 <setTimer>
			}
			if(isButtonPressed(0)){
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fbb1 	bl	8000308 <isButtonPressed>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <fsm_traffic+0x6d4>
				status = INIT;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <fsm_traffic+0x768>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
				green_time = temp[2];
				setTimer(0, 0);
				displayLed(GREEN);
				displayLed2(GREEN);
			}
			break;
 8000bb2:	e035      	b.n	8000c20 <fsm_traffic+0x740>
			}else if(isButtonPressed(1)){
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fba7 	bl	8000308 <isButtonPressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00a      	beq.n	8000bd6 <fsm_traffic+0x6f6>
				temp[2] += 1000;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <fsm_traffic+0x754>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <fsm_traffic+0x754>)
 8000bca:	6093      	str	r3, [r2, #8]
				setTimer(0, BLINK_TIME);
 8000bcc:	2132      	movs	r1, #50	; 0x32
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 fc2e 	bl	8001430 <setTimer>
			break;
 8000bd4:	e024      	b.n	8000c20 <fsm_traffic+0x740>
			}else if(isButtonPressed(2)){
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff fb96 	bl	8000308 <isButtonPressed>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d01e      	beq.n	8000c20 <fsm_traffic+0x740>
				green_time = temp[2];
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <fsm_traffic+0x754>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <fsm_traffic+0x76c>)
 8000be8:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fc1f 	bl	8001430 <setTimer>
				displayLed(GREEN);
 8000bf2:	f240 104d 	movw	r0, #333	; 0x14d
 8000bf6:	f7ff fab5 	bl	8000164 <displayLed>
				displayLed2(GREEN);
 8000bfa:	f240 104d 	movw	r0, #333	; 0x14d
 8000bfe:	f7ff faf7 	bl	80001f0 <displayLed2>
			break;
 8000c02:	e00d      	b.n	8000c20 <fsm_traffic+0x740>

		default:
				break;
 8000c04:	bf00      	nop
 8000c06:	e00c      	b.n	8000c22 <fsm_traffic+0x742>
			break;
 8000c08:	bf00      	nop
 8000c0a:	e00a      	b.n	8000c22 <fsm_traffic+0x742>
			break;
 8000c0c:	bf00      	nop
 8000c0e:	e008      	b.n	8000c22 <fsm_traffic+0x742>
			break;
 8000c10:	bf00      	nop
 8000c12:	e006      	b.n	8000c22 <fsm_traffic+0x742>
			break;
 8000c14:	bf00      	nop
 8000c16:	e004      	b.n	8000c22 <fsm_traffic+0x742>
			break;
 8000c18:	bf00      	nop
 8000c1a:	e002      	b.n	8000c22 <fsm_traffic+0x742>
			break;
 8000c1c:	bf00      	nop
 8000c1e:	e000      	b.n	8000c22 <fsm_traffic+0x742>
			break;
 8000c20:	bf00      	nop
		}
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	08004d58 	.word	0x08004d58
 8000c30:	08004d40 	.word	0x08004d40
 8000c34:	2000012c 	.word	0x2000012c
 8000c38:	10624dd3 	.word	0x10624dd3
 8000c3c:	08004d34 	.word	0x08004d34
 8000c40:	20000138 	.word	0x20000138
 8000c44:	08004d64 	.word	0x08004d64
 8000c48:	200000ac 	.word	0x200000ac
 8000c4c:	20000018 	.word	0x20000018

08000c50 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x42 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	f043 030c 	orr.w	r3, r3, #12
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	f043 030c 	orr.w	r3, r3, #12
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c90:	f107 0208 	add.w	r2, r7, #8
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2304      	movs	r3, #4
 8000c9a:	2142      	movs	r1, #66	; 0x42
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <lcd_send_cmd+0x5c>)
 8000c9e:	f001 fb3b 	bl	8002318 <HAL_I2C_Master_Transmit>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000194 	.word	0x20000194

08000cb0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f023 030f 	bic.w	r3, r3, #15
 8000cc0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	f043 030d 	orr.w	r3, r3, #13
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	f043 0309 	orr.w	r3, r3, #9
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	f043 030d 	orr.w	r3, r3, #13
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	f043 0309 	orr.w	r3, r3, #9
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cf0:	f107 0208 	add.w	r2, r7, #8
 8000cf4:	2364      	movs	r3, #100	; 0x64
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	2142      	movs	r1, #66	; 0x42
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <lcd_send_data+0x5c>)
 8000cfe:	f001 fb0b 	bl	8002318 <HAL_I2C_Master_Transmit>
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000194 	.word	0x20000194

08000d10 <lcd_clear>:

void lcd_clear (void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000d16:	2080      	movs	r0, #128	; 0x80
 8000d18:	f7ff ff9a 	bl	8000c50 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	e005      	b.n	8000d2e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000d22:	2020      	movs	r0, #32
 8000d24:	f7ff ffc4 	bl	8000cb0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b45      	cmp	r3, #69	; 0x45
 8000d32:	ddf6      	ble.n	8000d22 <lcd_clear+0x12>
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <lcd_put_cur+0x18>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d005      	beq.n	8000d60 <lcd_put_cur+0x22>
 8000d54:	e009      	b.n	8000d6a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	603b      	str	r3, [r7, #0]
            break;
 8000d5e:	e004      	b.n	8000d6a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d66:	603b      	str	r3, [r7, #0]
            break;
 8000d68:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff6e 	bl	8000c50 <lcd_send_cmd>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <lcd_init>:


void lcd_init (void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d80:	2032      	movs	r0, #50	; 0x32
 8000d82:	f000 fdb3 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d86:	2030      	movs	r0, #48	; 0x30
 8000d88:	f7ff ff62 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f000 fdad 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d92:	2030      	movs	r0, #48	; 0x30
 8000d94:	f7ff ff5c 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f000 fda7 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d9e:	2030      	movs	r0, #48	; 0x30
 8000da0:	f7ff ff56 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(10);
 8000da4:	200a      	movs	r0, #10
 8000da6:	f000 fda1 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000daa:	2020      	movs	r0, #32
 8000dac:	f7ff ff50 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(10);
 8000db0:	200a      	movs	r0, #10
 8000db2:	f000 fd9b 	bl	80018ec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000db6:	2028      	movs	r0, #40	; 0x28
 8000db8:	f7ff ff4a 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 fd95 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	f7ff ff44 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(1);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 fd8f 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff ff3e 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fd89 	bl	80018ec <HAL_Delay>
	HAL_Delay(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 fd86 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000de0:	2006      	movs	r0, #6
 8000de2:	f7ff ff35 	bl	8000c50 <lcd_send_cmd>
	HAL_Delay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 fd80 	bl	80018ec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000dec:	200c      	movs	r0, #12
 8000dee:	f7ff ff2f 	bl	8000c50 <lcd_send_cmd>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dfe:	e006      	b.n	8000e0e <lcd_send_string+0x18>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff51 	bl	8000cb0 <lcd_send_data>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f4      	bne.n	8000e00 <lcd_send_string+0xa>
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f000 fd00 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f82e 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 f912 	bl	8001054 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e30:	f000 f8e6 	bl	8001000 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e34:	f000 f898 	bl	8000f68 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e38:	f000 f868 	bl	8000f0c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <main+0x54>)
 8000e3e:	f002 fa21 	bl	8003284 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000e42:	f000 f9b7 	bl	80011b4 <SCH_Init>
  lcd_init();
 8000e46:	f7ff ff99 	bl	8000d7c <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <main+0x58>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(getKeyInput, 0, 10);
 8000e50:	220a      	movs	r2, #10
 8000e52:	2100      	movs	r1, #0
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <main+0x5c>)
 8000e56:	f000 f9bd 	bl	80011d4 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 10);
 8000e5a:	220a      	movs	r2, #10
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <main+0x60>)
 8000e60:	f000 f9b8 	bl	80011d4 <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic, 0, 10);
 8000e64:	220a      	movs	r2, #10
 8000e66:	2100      	movs	r1, #0
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <main+0x64>)
 8000e6a:	f000 f9b3 	bl	80011d4 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000e6e:	f000 fa59 	bl	8001324 <SCH_Dispatch_Tasks>
 8000e72:	e7fc      	b.n	8000e6e <main+0x4e>
 8000e74:	200001e8 	.word	0x200001e8
 8000e78:	200000ac 	.word	0x200000ac
 8000e7c:	0800033d 	.word	0x0800033d
 8000e80:	080014a5 	.word	0x080014a5
 8000e84:	080004e1 	.word	0x080004e1

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b090      	sub	sp, #64	; 0x40
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	2228      	movs	r2, #40	; 0x28
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 faf2 	bl	8004480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ebe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fd7d 	bl	80029c8 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ed4:	f000 f968 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
 8000eda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 ffe8 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000efe:	f000 f953 	bl	80011a8 <Error_Handler>
  }
}
 8000f02:	bf00      	nop
 8000f04:	3740      	adds	r7, #64	; 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <MX_I2C1_Init+0x54>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x58>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f4a:	f001 f8a1 	bl	8002090 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 f928 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000194 	.word	0x20000194
 8000f60:	40005400 	.word	0x40005400
 8000f64:	000186a0 	.word	0x000186a0

08000f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f8e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f9c:	2209      	movs	r2, #9
 8000f9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fae:	f002 f919 	bl	80031e4 <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fb8:	f000 f8f6 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fca:	f002 fa9d 	bl	8003508 <HAL_TIM_ConfigClockSource>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd4:	f000 f8e8 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fe6:	f002 fc7f 	bl	80038e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f000 f8da 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200001e8 	.word	0x200001e8

08001000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART2_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001038:	f002 fcc6 	bl	80039c8 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f8b1 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000230 	.word	0x20000230
 8001050:	40004400 	.word	0x40004400

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <MX_GPIO_Init+0x12c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a44      	ldr	r2, [pc, #272]	; (8001180 <MX_GPIO_Init+0x12c>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b42      	ldr	r3, [pc, #264]	; (8001180 <MX_GPIO_Init+0x12c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001080:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <MX_GPIO_Init+0x12c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <MX_GPIO_Init+0x12c>)
 8001086:	f043 0320 	orr.w	r3, r3, #32
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <MX_GPIO_Init+0x12c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <MX_GPIO_Init+0x12c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a38      	ldr	r2, [pc, #224]	; (8001180 <MX_GPIO_Init+0x12c>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <MX_GPIO_Init+0x12c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <MX_GPIO_Init+0x12c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a32      	ldr	r2, [pc, #200]	; (8001180 <MX_GPIO_Init+0x12c>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MX_GPIO_Init+0x12c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 80010ce:	482d      	ldr	r0, [pc, #180]	; (8001184 <MX_GPIO_Init+0x130>)
 80010d0:	f000 ff8b 	bl	8001fea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80010da:	482b      	ldr	r0, [pc, #172]	; (8001188 <MX_GPIO_Init+0x134>)
 80010dc:	f000 ff85 	bl	8001fea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_GPIO_Init+0x138>)
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <MX_GPIO_Init+0x13c>)
 80010f6:	f000 fddd 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON4_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80010fa:	2313      	movs	r3, #19
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	481d      	ldr	r0, [pc, #116]	; (8001184 <MX_GPIO_Init+0x130>)
 800110e:	f000 fdd1 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin;
 8001112:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <MX_GPIO_Init+0x130>)
 800112c:	f000 fdc2 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8001130:	2301      	movs	r3, #1
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <MX_GPIO_Init+0x134>)
 8001144:	f000 fdb6 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001148:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <MX_GPIO_Init+0x134>)
 8001162:	f000 fda7 	bl	8001cb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2028      	movs	r0, #40	; 0x28
 800116c:	f000 fcb9 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001170:	2028      	movs	r0, #40	; 0x28
 8001172:	f000 fcd2 	bl	8001b1a <HAL_NVIC_EnableIRQ>

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40010800 	.word	0x40010800
 8001188:	40010c00 	.word	0x40010c00
 800118c:	10110000 	.word	0x10110000
 8001190:	40011000 	.word	0x40011000

08001194 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800119c:	f000 f8b4 	bl	8001308 <SCH_Update>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
uint32_t global_timer = 0;

void SCH_Init(void) {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    current_index_task = 0;
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SCH_Init+0x18>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    global_timer = 0;
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SCH_Init+0x1c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200000b8 	.word	0x200000b8
 80011d0:	200000bc 	.word	0x200000bc

080011d4 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
    if (current_index_task < SCH_MAX_TASKS) {
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <SCH_Add_Task+0xb4>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b27      	cmp	r3, #39	; 0x27
 80011e6:	d84a      	bhi.n	800127e <SCH_Add_Task+0xaa>
        SCH_tasks_G[current_index_task].pTask = pFunction;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <SCH_Add_Task+0xb4>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <SCH_Add_Task+0xb8>)
 80011f0:	460b      	mov	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <SCH_Add_Task+0xb4>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <SCH_Add_Task+0xbc>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	491f      	ldr	r1, [pc, #124]	; (800128c <SCH_Add_Task+0xb8>)
 8001210:	4603      	mov	r3, r0
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4403      	add	r3, r0
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	3304      	adds	r3, #4
 800121c:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <SCH_Add_Task+0xb4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <SCH_Add_Task+0xbc>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	4917      	ldr	r1, [pc, #92]	; (800128c <SCH_Add_Task+0xb8>)
 8001230:	4603      	mov	r3, r0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4403      	add	r3, r0
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	3308      	adds	r3, #8
 800123c:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <SCH_Add_Task+0xb4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <SCH_Add_Task+0xb8>)
 8001246:	460b      	mov	r3, r1
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	330c      	adds	r3, #12
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <SCH_Add_Task+0xb4>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <SCH_Add_Task+0xb4>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	4610      	mov	r0, r2
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SCH_Add_Task+0xb8>)
 8001264:	460b      	mov	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3310      	adds	r3, #16
 8001270:	6018      	str	r0, [r3, #0]

        ++current_index_task;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SCH_Add_Task+0xb4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b03      	ldr	r3, [pc, #12]	; (8001288 <SCH_Add_Task+0xb4>)
 800127c:	701a      	strb	r2, [r3, #0]
    }
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	200000b8 	.word	0x200000b8
 800128c:	20000278 	.word	0x20000278
 8001290:	cccccccd 	.word	0xcccccccd

08001294 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t ID) {
 8001294:	b4b0      	push	{r4, r5, r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    if (current_index_task > ID) {
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <SCH_Delete_Task+0x6c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d226      	bcs.n	80012f6 <SCH_Delete_Task+0x62>
        for (int i = ID; i < current_index_task - 1; ++i) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e017      	b.n	80012de <SCH_Delete_Task+0x4a>
            SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <SCH_Delete_Task+0x70>)
 80012b4:	68f9      	ldr	r1, [r7, #12]
 80012b6:	460b      	mov	r3, r1
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4418      	add	r0, r3
 80012c0:	4910      	ldr	r1, [pc, #64]	; (8001304 <SCH_Delete_Task+0x70>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	4604      	mov	r4, r0
 80012ce:	461d      	mov	r5, r3
 80012d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	6023      	str	r3, [r4, #0]
        for (int i = ID; i < current_index_task - 1; ++i) {
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <SCH_Delete_Task+0x6c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbe1      	blt.n	80012ae <SCH_Delete_Task+0x1a>
        }
        --current_index_task;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SCH_Delete_Task+0x6c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <SCH_Delete_Task+0x6c>)
 80012f4:	701a      	strb	r2, [r3, #0]
    }
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bcb0      	pop	{r4, r5, r7}
 80012fe:	4770      	bx	lr
 8001300:	200000b8 	.word	0x200000b8
 8001304:	20000278 	.word	0x20000278

08001308 <SCH_Update>:

void SCH_Update(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	++global_timer;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SCH_Update+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a03      	ldr	r2, [pc, #12]	; (8001320 <SCH_Update+0x18>)
 8001314:	6013      	str	r3, [r2, #0]
    if (global_timer > UINT32_MAX) {
    	global_timer = 0;
    }
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200000bc 	.word	0x200000bc

08001324 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; ++i) {
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e06e      	b.n	800140e <SCH_Dispatch_Tasks+0xea>
        if (global_timer >= SCH_tasks_G[i].Delay) {//Check if task execute
 8001330:	493c      	ldr	r1, [pc, #240]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	3304      	adds	r3, #4
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <SCH_Dispatch_Tasks+0x104>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d840      	bhi.n	80013cc <SCH_Dispatch_Tasks+0xa8>
            ++SCH_tasks_G[i].RunMe;
 800134a:	4936      	ldr	r1, [pc, #216]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	330c      	adds	r3, #12
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b2d8      	uxtb	r0, r3
 8001360:	4930      	ldr	r1, [pc, #192]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	330c      	adds	r3, #12
 8001370:	4602      	mov	r2, r0
 8001372:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period > 0) {
 8001374:	492b      	ldr	r1, [pc, #172]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3308      	adds	r3, #8
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01c      	beq.n	80013c4 <SCH_Dispatch_Tasks+0xa0>
            	if (global_timer + SCH_tasks_G[i].Period <= UINT32_MAX) {
            		SCH_tasks_G[i].Delay += SCH_tasks_G[i].Period;
 800138a:	4926      	ldr	r1, [pc, #152]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	3304      	adds	r3, #4
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4403      	add	r3, r0
 80013aa:	3308      	adds	r3, #8
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4419      	add	r1, r3
 80013b0:	481c      	ldr	r0, [pc, #112]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4403      	add	r3, r0
 80013be:	3304      	adds	r3, #4
 80013c0:	6019      	str	r1, [r3, #0]
 80013c2:	e003      	b.n	80013cc <SCH_Dispatch_Tasks+0xa8>
            		SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period - (UINT32_MAX - SCH_tasks_G[i].Delay);
            		--SCH_tasks_G[i].RunMe;
            	}
            }
            else {
                SCH_Delete_Task(i);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff64 	bl	8001294 <SCH_Delete_Task>
            }
        }
        if (SCH_tasks_G[i].RunMe > 0) {
 80013cc:	4915      	ldr	r1, [pc, #84]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	330c      	adds	r3, #12
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d012      	beq.n	8001408 <SCH_Dispatch_Tasks+0xe4>
            SCH_tasks_G[i].RunMe = 0;
 80013e2:	4910      	ldr	r1, [pc, #64]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	330c      	adds	r3, #12
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
            (*SCH_tasks_G[i].pTask)();
 80013f6:	490b      	ldr	r1, [pc, #44]	; (8001424 <SCH_Dispatch_Tasks+0x100>)
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4798      	blx	r3
    for (int i = 0; i < current_index_task; ++i) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <SCH_Dispatch_Tasks+0x108>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4293      	cmp	r3, r2
 8001418:	db8a      	blt.n	8001330 <SCH_Dispatch_Tasks+0xc>
        }
    }
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000278 	.word	0x20000278
 8001428:	200000bc 	.word	0x200000bc
 800142c:	200000b8 	.word	0x200000b8

08001430 <setTimer>:
#include "global.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value/TICK;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <setTimer+0x34>)
 800143e:	fb82 1203 	smull	r1, r2, r2, r3
 8001442:	1092      	asrs	r2, r2, #2
 8001444:	17db      	asrs	r3, r3, #31
 8001446:	1ad2      	subs	r2, r2, r3
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <setTimer+0x38>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <setTimer+0x3c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2100      	movs	r1, #0
 8001456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	66666667 	.word	0x66666667
 8001468:	20000598 	.word	0x20000598
 800146c:	200005c4 	.word	0x200005c4

08001470 <isTimerExpired>:

int isTimerExpired(int index) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <isTimerExpired+0x30>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <isTimerExpired+0x30>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2100      	movs	r1, #0
 800148a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <isTimerExpired+0x24>
	}
	return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200005c4 	.word	0x200005c4

080014a4 <timerRun>:

void timerRun() {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e01c      	b.n	80014ea <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <timerRun+0x58>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dd13      	ble.n	80014e4 <timerRun+0x40>
			--timer_counter[i];
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <timerRun+0x58>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	490d      	ldr	r1, [pc, #52]	; (80014fc <timerRun+0x58>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <timerRun+0x58>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dc04      	bgt.n	80014e4 <timerRun+0x40>
				timer_flag[i] = 1;
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <timerRun+0x5c>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2101      	movs	r1, #1
 80014e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3301      	adds	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0a      	cmp	r3, #10
 80014ee:	dddf      	ble.n	80014b0 <timerRun+0xc>
			}
		}
	}
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000598 	.word	0x20000598
 8001500:	200005c4 	.word	0x200005c4

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_MspInit+0x5c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x5c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_MspInit+0x60>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_MspInit+0x60>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000

08001568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_I2C_MspInit+0x90>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d132      	bne.n	80015ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_I2C_MspInit+0x94>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <HAL_I2C_MspInit+0x94>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_I2C_MspInit+0x94>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <HAL_I2C_MspInit+0x98>)
 80015b6:	f000 fb7d 	bl	8001cb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_I2C_MspInit+0x9c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_I2C_MspInit+0x9c>)
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_I2C_MspInit+0x94>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_I2C_MspInit+0x94>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_I2C_MspInit+0x94>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010c00 	.word	0x40010c00
 8001604:	40010000 	.word	0x40010000

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d113      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_TIM_Base_MspInit+0x44>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_TIM_Base_MspInit+0x44>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_TIM_Base_MspInit+0x44>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	201c      	movs	r0, #28
 8001638:	f000 fa53 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800163c:	201c      	movs	r0, #28
 800163e:	f000 fa6c 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_UART_MspInit+0x80>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d12b      	bne.n	80016c8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0x84>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x84>)
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167a:	61d3      	str	r3, [r2, #28]
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0x84>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_UART_MspInit+0x84>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x84>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_UART_MspInit+0x84>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a0:	230c      	movs	r3, #12
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4809      	ldr	r0, [pc, #36]	; (80016d8 <HAL_UART_MspInit+0x88>)
 80016b4:	f000 fafe 	bl	8001cb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2026      	movs	r0, #38	; 0x26
 80016be:	f000 fa10 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c2:	2026      	movs	r0, #38	; 0x26
 80016c4:	f000 fa29 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010800 	.word	0x40010800

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001722:	f000 f8c7 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM2_IRQHandler+0x10>)
 8001732:	f001 fdf9 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200001e8 	.word	0x200001e8

08001740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <USART2_IRQHandler+0x10>)
 8001746:	f002 f98f 	bl	8003a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000230 	.word	0x20000230

08001754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800175c:	f000 fc76 	bl	800204c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f002 fe4a 	bl	800442c <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20005000 	.word	0x20005000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	200000c0 	.word	0x200000c0
 80017cc:	20000608 	.word	0x20000608

080017d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <Reset_Handler>:
 80017dc:	f7ff fff8 	bl	80017d0 <SystemInit>
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <LoopFillZerobss+0xe>)
 80017e2:	490c      	ldr	r1, [pc, #48]	; (8001814 <LoopFillZerobss+0x12>)
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <LoopFillZerobss+0x16>)
 80017e6:	2300      	movs	r3, #0
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:
 80017ea:	58d4      	ldr	r4, [r2, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:
 80017f0:	18c4      	adds	r4, r0, r3
 80017f2:	428c      	cmp	r4, r1
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <LoopFillZerobss+0x1a>)
 80017f8:	4c09      	ldr	r4, [pc, #36]	; (8001820 <LoopFillZerobss+0x1e>)
 80017fa:	2300      	movs	r3, #0
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:
 8001802:	42a2      	cmp	r2, r4
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>
 8001806:	f002 fe17 	bl	8004438 <__libc_init_array>
 800180a:	f7ff fb09 	bl	8000e20 <main>
 800180e:	4770      	bx	lr
 8001810:	20000000 	.word	0x20000000
 8001814:	20000090 	.word	0x20000090
 8001818:	08004dd0 	.word	0x08004dd0
 800181c:	20000090 	.word	0x20000090
 8001820:	20000604 	.word	0x20000604

08001824 <ADC1_2_IRQHandler>:
 8001824:	e7fe      	b.n	8001824 <ADC1_2_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x28>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x28>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f947 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	2000      	movs	r0, #0
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fe5e 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f95f 	bl	8001b36 <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f927 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000020 	.word	0x20000020
 80018ac:	20000028 	.word	0x20000028
 80018b0:	20000024 	.word	0x20000024

080018b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x1c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_IncTick+0x20>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_IncTick+0x20>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000028 	.word	0x20000028
 80018d4:	200005f0 	.word	0x200005f0

080018d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_GetTick+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	200005f0 	.word	0x200005f0

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff fff0 	bl	80018d8 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffe0 	bl	80018d8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000028 	.word	0x20000028

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4906      	ldr	r1, [pc, #24]	; (80019cc <__NVIC_EnableIRQ+0x34>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff90 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff2d 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff42 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff90 	bl	8001a24 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5f 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff35 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa2 	bl	8001a88 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d008      	beq.n	8001b78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e020      	b.n	8001bba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 020e 	bic.w	r2, r2, #14
 8001b86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d005      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e051      	b.n	8001c8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 020e 	bic.w	r2, r2, #14
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <HAL_DMA_Abort_IT+0xd4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d029      	beq.n	8001c66 <HAL_DMA_Abort_IT+0xa2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_DMA_Abort_IT+0xd8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x9e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_DMA_Abort_IT+0xdc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01a      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x98>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_DMA_Abort_IT+0xe0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d012      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x92>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_DMA_Abort_IT+0xe4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00a      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x8c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_DMA_Abort_IT+0xe8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d102      	bne.n	8001c4a <HAL_DMA_Abort_IT+0x86>
 8001c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c48:	e00e      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c4e:	e00b      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	e008      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	e005      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c60:	e002      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c62:	2310      	movs	r3, #16
 8001c64:	e000      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c66:	2301      	movs	r3, #1
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_DMA_Abort_IT+0xec>)
 8001c6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
    } 
  }
  return status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40020008 	.word	0x40020008
 8001c9c:	4002001c 	.word	0x4002001c
 8001ca0:	40020030 	.word	0x40020030
 8001ca4:	40020044 	.word	0x40020044
 8001ca8:	40020058 	.word	0x40020058
 8001cac:	4002006c 	.word	0x4002006c
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b08b      	sub	sp, #44	; 0x2c
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	e169      	b.n	8001f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8158 	bne.w	8001f96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a9a      	ldr	r2, [pc, #616]	; (8001f54 <HAL_GPIO_Init+0x2a0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d05e      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001cf0:	4a98      	ldr	r2, [pc, #608]	; (8001f54 <HAL_GPIO_Init+0x2a0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d875      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001cf6:	4a98      	ldr	r2, [pc, #608]	; (8001f58 <HAL_GPIO_Init+0x2a4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d058      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001cfc:	4a96      	ldr	r2, [pc, #600]	; (8001f58 <HAL_GPIO_Init+0x2a4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d86f      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d02:	4a96      	ldr	r2, [pc, #600]	; (8001f5c <HAL_GPIO_Init+0x2a8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d052      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d08:	4a94      	ldr	r2, [pc, #592]	; (8001f5c <HAL_GPIO_Init+0x2a8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d869      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d0e:	4a94      	ldr	r2, [pc, #592]	; (8001f60 <HAL_GPIO_Init+0x2ac>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d04c      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d14:	4a92      	ldr	r2, [pc, #584]	; (8001f60 <HAL_GPIO_Init+0x2ac>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d863      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d1a:	4a92      	ldr	r2, [pc, #584]	; (8001f64 <HAL_GPIO_Init+0x2b0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d046      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d20:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_GPIO_Init+0x2b0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d85d      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d82a      	bhi.n	8001d80 <HAL_GPIO_Init+0xcc>
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d859      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d2e:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <HAL_GPIO_Init+0x80>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08001daf 	.word	0x08001daf
 8001d38:	08001d89 	.word	0x08001d89
 8001d3c:	08001d9b 	.word	0x08001d9b
 8001d40:	08001ddd 	.word	0x08001ddd
 8001d44:	08001de3 	.word	0x08001de3
 8001d48:	08001de3 	.word	0x08001de3
 8001d4c:	08001de3 	.word	0x08001de3
 8001d50:	08001de3 	.word	0x08001de3
 8001d54:	08001de3 	.word	0x08001de3
 8001d58:	08001de3 	.word	0x08001de3
 8001d5c:	08001de3 	.word	0x08001de3
 8001d60:	08001de3 	.word	0x08001de3
 8001d64:	08001de3 	.word	0x08001de3
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001de3 	.word	0x08001de3
 8001d70:	08001de3 	.word	0x08001de3
 8001d74:	08001de3 	.word	0x08001de3
 8001d78:	08001d91 	.word	0x08001d91
 8001d7c:	08001da5 	.word	0x08001da5
 8001d80:	4a79      	ldr	r2, [pc, #484]	; (8001f68 <HAL_GPIO_Init+0x2b4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d86:	e02c      	b.n	8001de2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e029      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	3304      	adds	r3, #4
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e024      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e01f      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	330c      	adds	r3, #12
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e01a      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db6:	2304      	movs	r3, #4
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e013      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	611a      	str	r2, [r3, #16]
          break;
 8001dce:	e009      	b.n	8001de4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	615a      	str	r2, [r3, #20]
          break;
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          break;
 8001de2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d801      	bhi.n	8001dee <HAL_GPIO_Init+0x13a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e001      	b.n	8001df2 <HAL_GPIO_Init+0x13e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3304      	adds	r3, #4
 8001df2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2bff      	cmp	r3, #255	; 0xff
 8001df8:	d802      	bhi.n	8001e00 <HAL_GPIO_Init+0x14c>
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x152>
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	3b08      	subs	r3, #8
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	6a39      	ldr	r1, [r7, #32]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	431a      	orrs	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80b1 	beq.w	8001f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e34:	4b4d      	ldr	r3, [pc, #308]	; (8001f6c <HAL_GPIO_Init+0x2b8>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <HAL_GPIO_Init+0x2b8>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_GPIO_Init+0x2b8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e4c:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_GPIO_Init+0x2bc>)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a40      	ldr	r2, [pc, #256]	; (8001f74 <HAL_GPIO_Init+0x2c0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_GPIO_Init+0x1ec>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3f      	ldr	r2, [pc, #252]	; (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00d      	beq.n	8001e9c <HAL_GPIO_Init+0x1e8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3e      	ldr	r2, [pc, #248]	; (8001f7c <HAL_GPIO_Init+0x2c8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0x1e4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <HAL_GPIO_Init+0x2cc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e90:	2303      	movs	r3, #3
 8001e92:	e006      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e004      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e002      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	f002 0203 	and.w	r2, r2, #3
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eb2:	492f      	ldr	r1, [pc, #188]	; (8001f70 <HAL_GPIO_Init+0x2bc>)
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	492c      	ldr	r1, [pc, #176]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4928      	ldr	r1, [pc, #160]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef4:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4922      	ldr	r1, [pc, #136]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	491e      	ldr	r1, [pc, #120]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4918      	ldr	r1, [pc, #96]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4914      	ldr	r1, [pc, #80]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d021      	beq.n	8001f88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	490e      	ldr	r1, [pc, #56]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e021      	b.n	8001f96 <HAL_GPIO_Init+0x2e2>
 8001f52:	bf00      	nop
 8001f54:	10320000 	.word	0x10320000
 8001f58:	10310000 	.word	0x10310000
 8001f5c:	10220000 	.word	0x10220000
 8001f60:	10210000 	.word	0x10210000
 8001f64:	10120000 	.word	0x10120000
 8001f68:	10110000 	.word	0x10110000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40010800 	.word	0x40010800
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	40011400 	.word	0x40011400
 8001f84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4909      	ldr	r1, [pc, #36]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	3301      	adds	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f47f ae8e 	bne.w	8001cc8 <HAL_GPIO_Init+0x14>
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	372c      	adds	r7, #44	; 0x2c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	807b      	strh	r3, [r7, #2]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffa:	787b      	ldrb	r3, [r7, #1]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002000:	887a      	ldrh	r2, [r7, #2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002006:	e003      	b.n	8002010 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800202c:	887a      	ldrh	r2, [r7, #2]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	041a      	lsls	r2, r3, #16
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43d9      	mvns	r1, r3
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	400b      	ands	r3, r1
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f806 	bl	800207c <HAL_GPIO_EXTI_Callback>
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e12b      	b.n	80022fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fa56 	bl	8001568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	; 0x24
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f4:	f001 f830 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 80020f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a81      	ldr	r2, [pc, #516]	; (8002304 <HAL_I2C_Init+0x274>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d807      	bhi.n	8002114 <HAL_I2C_Init+0x84>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a80      	ldr	r2, [pc, #512]	; (8002308 <HAL_I2C_Init+0x278>)
 8002108:	4293      	cmp	r3, r2
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e006      	b.n	8002122 <HAL_I2C_Init+0x92>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a7d      	ldr	r2, [pc, #500]	; (800230c <HAL_I2C_Init+0x27c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	bf94      	ite	ls
 800211c:	2301      	movls	r3, #1
 800211e:	2300      	movhi	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0e7      	b.n	80022fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a78      	ldr	r2, [pc, #480]	; (8002310 <HAL_I2C_Init+0x280>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0c9b      	lsrs	r3, r3, #18
 8002134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a6a      	ldr	r2, [pc, #424]	; (8002304 <HAL_I2C_Init+0x274>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d802      	bhi.n	8002164 <HAL_I2C_Init+0xd4>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3301      	adds	r3, #1
 8002162:	e009      	b.n	8002178 <HAL_I2C_Init+0xe8>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_I2C_Init+0x284>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	099b      	lsrs	r3, r3, #6
 8002176:	3301      	adds	r3, #1
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	430b      	orrs	r3, r1
 800217e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800218a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	495c      	ldr	r1, [pc, #368]	; (8002304 <HAL_I2C_Init+0x274>)
 8002194:	428b      	cmp	r3, r1
 8002196:	d819      	bhi.n	80021cc <HAL_I2C_Init+0x13c>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e59      	subs	r1, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021ac:	400b      	ands	r3, r1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_I2C_Init+0x138>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e59      	subs	r1, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c6:	e051      	b.n	800226c <HAL_I2C_Init+0x1dc>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e04f      	b.n	800226c <HAL_I2C_Init+0x1dc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <HAL_I2C_Init+0x168>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e012      	b.n	800221e <HAL_I2C_Init+0x18e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e58      	subs	r0, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	0099      	lsls	r1, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	fbb0 f3f3 	udiv	r3, r0, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Init+0x196>
 8002222:	2301      	movs	r3, #1
 8002224:	e022      	b.n	800226c <HAL_I2C_Init+0x1dc>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10e      	bne.n	800224c <HAL_I2C_Init+0x1bc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e58      	subs	r0, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	440b      	add	r3, r1
 800223c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800224a:	e00f      	b.n	800226c <HAL_I2C_Init+0x1dc>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e58      	subs	r0, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	0099      	lsls	r1, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	6809      	ldr	r1, [r1, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800229a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6911      	ldr	r1, [r2, #16]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	000186a0 	.word	0x000186a0
 8002308:	001e847f 	.word	0x001e847f
 800230c:	003d08ff 	.word	0x003d08ff
 8002310:	431bde83 	.word	0x431bde83
 8002314:	10624dd3 	.word	0x10624dd3

08002318 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	461a      	mov	r2, r3
 8002324:	460b      	mov	r3, r1
 8002326:	817b      	strh	r3, [r7, #10]
 8002328:	4613      	mov	r3, r2
 800232a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fad4 	bl	80018d8 <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 80e0 	bne.w	8002500 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2319      	movs	r3, #25
 8002346:	2201      	movs	r2, #1
 8002348:	4970      	ldr	r1, [pc, #448]	; (800250c <HAL_I2C_Master_Transmit+0x1f4>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f964 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	e0d3      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x50>
 8002364:	2302      	movs	r3, #2
 8002366:	e0cc      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2210      	movs	r2, #16
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	893a      	ldrh	r2, [r7, #8]
 80023be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_I2C_Master_Transmit+0x1f8>)
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f89c 	bl	8002514 <I2C_MasterRequestWrite>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e08d      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023fc:	e066      	b.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fa22 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b04      	cmp	r3, #4
 8002414:	d107      	bne.n	8002426 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11b      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	6a39      	ldr	r1, [r7, #32]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fa19 	bl	80028dc <I2C_WaitOnBTFFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d107      	bne.n	80024c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e01a      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d194      	bne.n	80023fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	00100002 	.word	0x00100002
 8002510:	ffff0000 	.word	0xffff0000

08002514 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d006      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d003      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800253c:	d108      	bne.n	8002550 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00b      	b.n	8002568 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	2b12      	cmp	r3, #18
 8002556:	d107      	bne.n	8002568 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f84f 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258e:	d103      	bne.n	8002598 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e035      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a4:	d108      	bne.n	80025b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	e01b      	b.n	80025f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	11db      	asrs	r3, r3, #7
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 0306 	and.w	r3, r3, #6
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f063 030f 	orn	r3, r3, #15
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <I2C_MasterRequestWrite+0xfc>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f898 	bl	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e010      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <I2C_MasterRequestWrite+0x100>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f888 	bl	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010008 	.word	0x00010008
 8002614:	00010002 	.word	0x00010002

08002618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002628:	e048      	b.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d044      	beq.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7ff f951 	bl	80018d8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d139      	bne.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10d      	bne.n	800266e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	43da      	mvns	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	e00c      	b.n	8002688 <I2C_WaitOnFlagUntilTimeout+0x70>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	43da      	mvns	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	4013      	ands	r3, r2
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	429a      	cmp	r2, r3
 800268c:	d116      	bne.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e023      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d10d      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	43da      	mvns	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4013      	ands	r3, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	e00c      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d093      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800271a:	e071      	b.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d123      	bne.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e067      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d041      	beq.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7ff f8ac 	bl	80018d8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d136      	bne.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e00b      	b.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e021      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10c      	bne.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e00b      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f af6d 	bne.w	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002858:	e034      	b.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f886 	bl	800296c <I2C_IsAcknowledgeFailed>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e034      	b.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d028      	beq.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7ff f831 	bl	80018d8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11d      	bne.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b80      	cmp	r3, #128	; 0x80
 8002894:	d016      	beq.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e007      	b.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	2b80      	cmp	r3, #128	; 0x80
 80028d0:	d1c3      	bne.n	800285a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e8:	e034      	b.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f83e 	bl	800296c <I2C_IsAcknowledgeFailed>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e034      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d028      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7fe ffe9 	bl	80018d8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11d      	bne.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d016      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d1c3      	bne.n	80028ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	d11b      	bne.n	80029bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800298c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e26c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8087 	beq.w	8002af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e8:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f4:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d112      	bne.n	8002a26 <HAL_RCC_OscConfig+0x5e>
 8002a00:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0e:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d06c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x12c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d168      	bne.n	8002af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e246      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x76>
 8002a30:	4b80      	ldr	r3, [pc, #512]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a7f      	ldr	r2, [pc, #508]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e02e      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7a      	ldr	r2, [pc, #488]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b78      	ldr	r3, [pc, #480]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0xbc>
 8002a6a:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6e      	ldr	r2, [pc, #440]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a84:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff18 	bl	80018d8 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe ff14 	bl	80018d8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1fa      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b5d      	ldr	r3, [pc, #372]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0xe4>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe ff04 	bl	80018d8 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe ff00 	bl	80018d8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1e6      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x10c>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d063      	beq.n	8002bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b0e:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x18c>
 8002b1a:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_RCC_OscConfig+0x176>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1ba      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4939      	ldr	r1, [pc, #228]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	e03a      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe feb9 	bl	80018d8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fe feb5 	bl	80018d8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e19b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4927      	ldr	r1, [pc, #156]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fe98 	bl	80018d8 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe fe94 	bl	80018d8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e17a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d03a      	beq.n	8002c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d019      	beq.n	8002c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fe fe78 	bl	80018d8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe fe74 	bl	80018d8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e15a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 facc 	bl	80031a8 <RCC_Delay>
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7fe fe5e 	bl	80018d8 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1e:	e00f      	b.n	8002c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c20:	f7fe fe5a 	bl	80018d8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d908      	bls.n	8002c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e140      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	42420000 	.word	0x42420000
 8002c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b9e      	ldr	r3, [pc, #632]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e9      	bne.n	8002c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a6 	beq.w	8002da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b97      	ldr	r3, [pc, #604]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b94      	ldr	r3, [pc, #592]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a93      	ldr	r2, [pc, #588]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	4b91      	ldr	r3, [pc, #580]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <HAL_RCC_OscConfig+0x4f8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b8b      	ldr	r3, [pc, #556]	; (8002ec0 <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a8a      	ldr	r2, [pc, #552]	; (8002ec0 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fe1b 	bl	80018d8 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe fe17 	bl	80018d8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0fd      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x4f8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x312>
 8002ccc:	4b7b      	ldr	r3, [pc, #492]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a7a      	ldr	r2, [pc, #488]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	e02d      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x334>
 8002ce2:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a75      	ldr	r2, [pc, #468]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a72      	ldr	r2, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	e01c      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x356>
 8002d04:	4b6d      	ldr	r3, [pc, #436]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a6c      	ldr	r2, [pc, #432]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a69      	ldr	r2, [pc, #420]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a66      	ldr	r2, [pc, #408]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	4b64      	ldr	r3, [pc, #400]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d015      	beq.n	8002d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fdcb 	bl	80018d8 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe fdc7 	bl	80018d8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0ab      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	4b57      	ldr	r3, [pc, #348]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ee      	beq.n	8002d46 <HAL_RCC_OscConfig+0x37e>
 8002d68:	e014      	b.n	8002d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fdb5 	bl	80018d8 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fdb1 	bl	80018d8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e095      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9a:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4a47      	ldr	r2, [pc, #284]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8081 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db0:	4b42      	ldr	r3, [pc, #264]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d061      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d146      	bne.n	8002e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_OscConfig+0x4fc>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fd85 	bl	80018d8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe fd81 	bl	80018d8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e067      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	492d      	ldr	r1, [pc, #180]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a19      	ldr	r1, [r3, #32]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	4927      	ldr	r1, [pc, #156]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x4fc>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fd55 	bl	80018d8 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe fd51 	bl	80018d8 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e037      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46a>
 8002e50:	e02f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_RCC_OscConfig+0x4fc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fd3e 	bl	80018d8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fd3a 	bl	80018d8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e020      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x498>
 8002e7e:	e018      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e013      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	42420060 	.word	0x42420060

08002ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0d0      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b67      	ldr	r3, [pc, #412]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	4965      	ldr	r1, [pc, #404]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d040      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d115      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e073      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06b      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4936      	ldr	r1, [pc, #216]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fe fc8e 	bl	80018d8 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fe fc8a 	bl	80018d8 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e053      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d210      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0207 	bic.w	r2, r3, #7
 8002ffe:	4922      	ldr	r1, [pc, #136]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1cc>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1d0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fbec 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40022000 	.word	0x40022000
 800308c:	40021000 	.word	0x40021000
 8003090:	08004d68 	.word	0x08004d68
 8003094:	20000020 	.word	0x20000020
 8003098:	20000024 	.word	0x20000024

0800309c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x30>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x36>
 80030ca:	e027      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ce:	613b      	str	r3, [r7, #16]
      break;
 80030d0:	e027      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0c9b      	lsrs	r3, r3, #18
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_GetSysClockFreq+0x94>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0c5b      	lsrs	r3, r3, #17
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	4a11      	ldr	r2, [pc, #68]	; (800313c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fe:	fb02 f203 	mul.w	r2, r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e004      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0c      	ldr	r2, [pc, #48]	; (8003140 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	613b      	str	r3, [r7, #16]
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 800311e:	613b      	str	r3, [r7, #16]
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	693b      	ldr	r3, [r7, #16]
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	007a1200 	.word	0x007a1200
 8003138:	08004d80 	.word	0x08004d80
 800313c:	08004d90 	.word	0x08004d90
 8003140:	003d0900 	.word	0x003d0900

08003144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <HAL_RCC_GetHCLKFreq+0x10>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	20000020 	.word	0x20000020

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800315c:	f7ff fff2 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	08004d78 	.word	0x08004d78

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003184:	f7ff ffde 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08004d78 	.word	0x08004d78

080031a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <RCC_Delay+0x34>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <RCC_Delay+0x38>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0a5b      	lsrs	r3, r3, #9
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031c4:	bf00      	nop
  }
  while (Delay --);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	60fa      	str	r2, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <RCC_Delay+0x1c>
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	20000020 	.word	0x20000020
 80031e0:	10624dd3 	.word	0x10624dd3

080031e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e041      	b.n	800327a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe f9fc 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f000 fa5c 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d001      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e03a      	b.n	8003312 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_TIM_Base_Start_IT+0x98>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x58>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d009      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x58>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <HAL_TIM_Base_Start_IT+0x9c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x58>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <HAL_TIM_Base_Start_IT+0xa0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d010      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fe:	e007      	b.n	8003310 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800

08003328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f998 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f98b 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f99a 	bl	80036ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0204 	mvn.w	r2, #4
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f972 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f965 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f974 	bl	80036ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f94c 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f93f 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f94e 	bl	80036ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0210 	mvn.w	r2, #16
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2208      	movs	r2, #8
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f926 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f919 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f928 	bl	80036ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0201 	mvn.w	r2, #1
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fe80 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa7f 	bl	80039b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8f8 	bl	80036cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0220 	mvn.w	r2, #32
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa52 	bl	80039a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIM_ConfigClockSource+0x1c>
 8003520:	2302      	movs	r3, #2
 8003522:	e0b4      	b.n	800368e <HAL_TIM_ConfigClockSource+0x186>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	d03e      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xd4>
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003562:	f200 8087 	bhi.w	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	f000 8086 	beq.w	800367a <HAL_TIM_ConfigClockSource+0x172>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d87f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d01a      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xa6>
 8003578:	2b70      	cmp	r3, #112	; 0x70
 800357a:	d87b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b60      	cmp	r3, #96	; 0x60
 800357e:	d050      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x11a>
 8003580:	2b60      	cmp	r3, #96	; 0x60
 8003582:	d877      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b50      	cmp	r3, #80	; 0x50
 8003586:	d03c      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xfa>
 8003588:	2b50      	cmp	r3, #80	; 0x50
 800358a:	d873      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d058      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x13a>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d86f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b30      	cmp	r3, #48	; 0x30
 8003596:	d064      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 8003598:	2b30      	cmp	r3, #48	; 0x30
 800359a:	d86b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d060      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d867      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05c      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d05a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035ac:	e062      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f000 f974 	bl	80038aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
      break;
 80035da:	e04f      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f000 f95d 	bl	80038aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fe:	609a      	str	r2, [r3, #8]
      break;
 8003600:	e03c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	461a      	mov	r2, r3
 8003610:	f000 f8d4 	bl	80037bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2150      	movs	r1, #80	; 0x50
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f92b 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003620:	e02c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	f000 f8f2 	bl	8003818 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2160      	movs	r1, #96	; 0x60
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f91b 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003640:	e01c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f000 f8b4 	bl	80037bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2140      	movs	r1, #64	; 0x40
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f90b 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003660:	e00c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 f902 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003672:	e003      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e000      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800367a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
	...

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a2f      	ldr	r2, [pc, #188]	; (80037b0 <TIM_Base_SetConfig+0xd0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00b      	beq.n	8003710 <TIM_Base_SetConfig+0x30>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d007      	beq.n	8003710 <TIM_Base_SetConfig+0x30>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <TIM_Base_SetConfig+0xd4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_Base_SetConfig+0x30>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <TIM_Base_SetConfig+0xd8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d108      	bne.n	8003722 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <TIM_Base_SetConfig+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00b      	beq.n	8003742 <TIM_Base_SetConfig+0x62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003730:	d007      	beq.n	8003742 <TIM_Base_SetConfig+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <TIM_Base_SetConfig+0xd4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_Base_SetConfig+0x62>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <TIM_Base_SetConfig+0xd8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <TIM_Base_SetConfig+0xd0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d103      	bne.n	8003788 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f023 0201 	bic.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	611a      	str	r2, [r3, #16]
  }
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800

080037bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 030a 	bic.w	r3, r3, #10
 80037f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f023 0210 	bic.w	r2, r3, #16
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	031b      	lsls	r3, r3, #12
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003854:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	f043 0307 	orr.w	r3, r3, #7
 8003898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b087      	sub	sp, #28
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e046      	b.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d009      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10c      	bne.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4313      	orrs	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800

080039a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e042      	b.n	8003a60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fe2e 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fc7f 	bl	8004310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b0ba      	sub	sp, #232	; 0xe8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_UART_IRQHandler+0x66>
 8003aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fb63 	bl	8004192 <UART_Receive_IT>
      return;
 8003acc:	e25b      	b.n	8003f86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80de 	beq.w	8003c94 <HAL_UART_IRQHandler+0x22c>
 8003ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80d1 	beq.w	8003c94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xae>
 8003afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_UART_IRQHandler+0xd2>
 8003b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f043 0202 	orr.w	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_UART_IRQHandler+0xf6>
 8003b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d011      	beq.n	8003b8e <HAL_UART_IRQHandler+0x126>
 8003b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f043 0208 	orr.w	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 81f2 	beq.w	8003f7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x14e>
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 faee 	bl	8004192 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <HAL_UART_IRQHandler+0x17a>
 8003bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04f      	beq.n	8003c82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9f8 	bl	8003fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d041      	beq.n	8003c7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3314      	adds	r3, #20
 8003bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1d9      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d013      	beq.n	8003c72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	4a7e      	ldr	r2, [pc, #504]	; (8003e48 <HAL_UART_IRQHandler+0x3e0>)
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd ffb4 	bl	8001bc4 <HAL_DMA_Abort_IT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c70:	e00e      	b.n	8003c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f99c 	bl	8003fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	e00a      	b.n	8003c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f998 	bl	8003fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	e006      	b.n	8003c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f994 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c8e:	e175      	b.n	8003f7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	bf00      	nop
    return;
 8003c92:	e173      	b.n	8003f7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	f040 814f 	bne.w	8003f3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8148 	beq.w	8003f3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8141 	beq.w	8003f3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80b6 	beq.w	8003e4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8145 	beq.w	8003f80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	f080 813e 	bcs.w	8003f80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	f000 8088 	beq.w	8003e28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d44:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1d9      	bne.n	8003d18 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d88:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e1      	bne.n	8003d64 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dc4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e3      	bne.n	8003da0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df8:	f023 0310 	bic.w	r3, r3, #16
 8003dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e3      	bne.n	8003de6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd fe93 	bl	8001b4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8bf 	bl	8003fc2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e44:	e09c      	b.n	8003f80 <HAL_UART_IRQHandler+0x518>
 8003e46:	bf00      	nop
 8003e48:	0800409d 	.word	0x0800409d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 808e 	beq.w	8003f84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8089 	beq.w	8003f84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e96:	647a      	str	r2, [r7, #68]	; 0x44
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e3      	bne.n	8003e72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ece:	633a      	str	r2, [r7, #48]	; 0x30
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e3      	bne.n	8003eaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0310 	bic.w	r3, r3, #16
 8003f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f14:	61fa      	str	r2, [r7, #28]
 8003f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	617b      	str	r3, [r7, #20]
   return(result);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e3      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f844 	bl	8003fc2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f3a:	e023      	b.n	8003f84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <HAL_UART_IRQHandler+0x4f4>
 8003f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8b5 	bl	80040c4 <UART_Transmit_IT>
    return;
 8003f5a:	e014      	b.n	8003f86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00e      	beq.n	8003f86 <HAL_UART_IRQHandler+0x51e>
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8f4 	bl	8004162 <UART_EndTransmit_IT>
    return;
 8003f7a:	e004      	b.n	8003f86 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f7c:	bf00      	nop
 8003f7e:	e002      	b.n	8003f86 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f80:	bf00      	nop
 8003f82:	e000      	b.n	8003f86 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f84:	bf00      	nop
  }
}
 8003f86:	37e8      	adds	r7, #232	; 0xe8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b095      	sub	sp, #84	; 0x54
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004000:	643a      	str	r2, [r7, #64]	; 0x40
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e5      	bne.n	8003fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	61fb      	str	r3, [r7, #28]
   return(result);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b01      	cmp	r3, #1
 800404e:	d119      	bne.n	8004084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f023 0310 	bic.w	r3, r3, #16
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004070:	61ba      	str	r2, [r7, #24]
 8004072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	613b      	str	r3, [r7, #16]
   return(result);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004092:	bf00      	nop
 8004094:	3754      	adds	r7, #84	; 0x54
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff ff7a 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b21      	cmp	r3, #33	; 0x21
 80040d6:	d13e      	bne.n	8004156 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d114      	bne.n	800410c <UART_Transmit_IT+0x48>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d110      	bne.n	800410c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]
 800410a:	e008      	b.n	800411e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6211      	str	r1, [r2, #32]
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4619      	mov	r1, r3
 800412c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004140:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004150:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ff02 	bl	8003f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b08c      	sub	sp, #48	; 0x30
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b22      	cmp	r3, #34	; 0x22
 80041a4:	f040 80ae 	bne.w	8004304 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d117      	bne.n	80041e2 <UART_Receive_IT+0x50>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d113      	bne.n	80041e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	1c9a      	adds	r2, r3, #2
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
 80041e0:	e026      	b.n	8004230 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d007      	beq.n	8004206 <UART_Receive_IT+0x74>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <UART_Receive_IT+0x82>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e008      	b.n	8004226 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004220:	b2da      	uxtb	r2, r3
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4619      	mov	r1, r3
 800423e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004240:	2b00      	cmp	r3, #0
 8004242:	d15d      	bne.n	8004300 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0220 	bic.w	r2, r2, #32
 8004252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	2b01      	cmp	r3, #1
 8004288:	d135      	bne.n	80042f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	623a      	str	r2, [r7, #32]
 80042b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	69f9      	ldr	r1, [r7, #28]
 80042b6:	6a3a      	ldr	r2, [r7, #32]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d10a      	bne.n	80042e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fe67 	bl	8003fc2 <HAL_UARTEx_RxEventCallback>
 80042f4:	e002      	b.n	80042fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fe51 	bl	8003f9e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e002      	b.n	8004306 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3730      	adds	r7, #48	; 0x30
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800434a:	f023 030c 	bic.w	r3, r3, #12
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	430b      	orrs	r3, r1
 8004356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <UART_SetConfig+0x114>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004378:	f7fe ff02 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	e002      	b.n	8004386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7fe feea 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <UART_SetConfig+0x118>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	0119      	lsls	r1, r3, #4
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043bc:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <UART_SetConfig+0x118>)
 80043be:	fba3 0302 	umull	r0, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2064      	movs	r0, #100	; 0x64
 80043c6:	fb00 f303 	mul.w	r3, r0, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a15      	ldr	r2, [pc, #84]	; (8004428 <UART_SetConfig+0x118>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	4419      	add	r1, r3
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <UART_SetConfig+0x118>)
 80043f6:	fba3 0302 	umull	r0, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2064      	movs	r0, #100	; 0x64
 80043fe:	fb00 f303 	mul.w	r3, r0, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	3332      	adds	r3, #50	; 0x32
 8004408:	4a07      	ldr	r2, [pc, #28]	; (8004428 <UART_SetConfig+0x118>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	440a      	add	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40013800 	.word	0x40013800
 8004428:	51eb851f 	.word	0x51eb851f

0800442c <__errno>:
 800442c:	4b01      	ldr	r3, [pc, #4]	; (8004434 <__errno+0x8>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	2000002c 	.word	0x2000002c

08004438 <__libc_init_array>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	2600      	movs	r6, #0
 800443c:	4d0c      	ldr	r5, [pc, #48]	; (8004470 <__libc_init_array+0x38>)
 800443e:	4c0d      	ldr	r4, [pc, #52]	; (8004474 <__libc_init_array+0x3c>)
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	42a6      	cmp	r6, r4
 8004446:	d109      	bne.n	800445c <__libc_init_array+0x24>
 8004448:	f000 fc5c 	bl	8004d04 <_init>
 800444c:	2600      	movs	r6, #0
 800444e:	4d0a      	ldr	r5, [pc, #40]	; (8004478 <__libc_init_array+0x40>)
 8004450:	4c0a      	ldr	r4, [pc, #40]	; (800447c <__libc_init_array+0x44>)
 8004452:	1b64      	subs	r4, r4, r5
 8004454:	10a4      	asrs	r4, r4, #2
 8004456:	42a6      	cmp	r6, r4
 8004458:	d105      	bne.n	8004466 <__libc_init_array+0x2e>
 800445a:	bd70      	pop	{r4, r5, r6, pc}
 800445c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004460:	4798      	blx	r3
 8004462:	3601      	adds	r6, #1
 8004464:	e7ee      	b.n	8004444 <__libc_init_array+0xc>
 8004466:	f855 3b04 	ldr.w	r3, [r5], #4
 800446a:	4798      	blx	r3
 800446c:	3601      	adds	r6, #1
 800446e:	e7f2      	b.n	8004456 <__libc_init_array+0x1e>
 8004470:	08004dc8 	.word	0x08004dc8
 8004474:	08004dc8 	.word	0x08004dc8
 8004478:	08004dc8 	.word	0x08004dc8
 800447c:	08004dcc 	.word	0x08004dcc

08004480 <memset>:
 8004480:	4603      	mov	r3, r0
 8004482:	4402      	add	r2, r0
 8004484:	4293      	cmp	r3, r2
 8004486:	d100      	bne.n	800448a <memset+0xa>
 8004488:	4770      	bx	lr
 800448a:	f803 1b01 	strb.w	r1, [r3], #1
 800448e:	e7f9      	b.n	8004484 <memset+0x4>

08004490 <siprintf>:
 8004490:	b40e      	push	{r1, r2, r3}
 8004492:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004496:	b500      	push	{lr}
 8004498:	b09c      	sub	sp, #112	; 0x70
 800449a:	ab1d      	add	r3, sp, #116	; 0x74
 800449c:	9002      	str	r0, [sp, #8]
 800449e:	9006      	str	r0, [sp, #24]
 80044a0:	9107      	str	r1, [sp, #28]
 80044a2:	9104      	str	r1, [sp, #16]
 80044a4:	4808      	ldr	r0, [pc, #32]	; (80044c8 <siprintf+0x38>)
 80044a6:	4909      	ldr	r1, [pc, #36]	; (80044cc <siprintf+0x3c>)
 80044a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ac:	9105      	str	r1, [sp, #20]
 80044ae:	6800      	ldr	r0, [r0, #0]
 80044b0:	a902      	add	r1, sp, #8
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	f000 f868 	bl	8004588 <_svfiprintf_r>
 80044b8:	2200      	movs	r2, #0
 80044ba:	9b02      	ldr	r3, [sp, #8]
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	b01c      	add	sp, #112	; 0x70
 80044c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c4:	b003      	add	sp, #12
 80044c6:	4770      	bx	lr
 80044c8:	2000002c 	.word	0x2000002c
 80044cc:	ffff0208 	.word	0xffff0208

080044d0 <__ssputs_r>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	688e      	ldr	r6, [r1, #8]
 80044d6:	4682      	mov	sl, r0
 80044d8:	429e      	cmp	r6, r3
 80044da:	460c      	mov	r4, r1
 80044dc:	4690      	mov	r8, r2
 80044de:	461f      	mov	r7, r3
 80044e0:	d838      	bhi.n	8004554 <__ssputs_r+0x84>
 80044e2:	898a      	ldrh	r2, [r1, #12]
 80044e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044e8:	d032      	beq.n	8004550 <__ssputs_r+0x80>
 80044ea:	6825      	ldr	r5, [r4, #0]
 80044ec:	6909      	ldr	r1, [r1, #16]
 80044ee:	3301      	adds	r3, #1
 80044f0:	eba5 0901 	sub.w	r9, r5, r1
 80044f4:	6965      	ldr	r5, [r4, #20]
 80044f6:	444b      	add	r3, r9
 80044f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004500:	106d      	asrs	r5, r5, #1
 8004502:	429d      	cmp	r5, r3
 8004504:	bf38      	it	cc
 8004506:	461d      	movcc	r5, r3
 8004508:	0553      	lsls	r3, r2, #21
 800450a:	d531      	bpl.n	8004570 <__ssputs_r+0xa0>
 800450c:	4629      	mov	r1, r5
 800450e:	f000 fb53 	bl	8004bb8 <_malloc_r>
 8004512:	4606      	mov	r6, r0
 8004514:	b950      	cbnz	r0, 800452c <__ssputs_r+0x5c>
 8004516:	230c      	movs	r3, #12
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	f8ca 3000 	str.w	r3, [sl]
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452c:	464a      	mov	r2, r9
 800452e:	6921      	ldr	r1, [r4, #16]
 8004530:	f000 face 	bl	8004ad0 <memcpy>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	6126      	str	r6, [r4, #16]
 8004542:	444e      	add	r6, r9
 8004544:	6026      	str	r6, [r4, #0]
 8004546:	463e      	mov	r6, r7
 8004548:	6165      	str	r5, [r4, #20]
 800454a:	eba5 0509 	sub.w	r5, r5, r9
 800454e:	60a5      	str	r5, [r4, #8]
 8004550:	42be      	cmp	r6, r7
 8004552:	d900      	bls.n	8004556 <__ssputs_r+0x86>
 8004554:	463e      	mov	r6, r7
 8004556:	4632      	mov	r2, r6
 8004558:	4641      	mov	r1, r8
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	f000 fac6 	bl	8004aec <memmove>
 8004560:	68a3      	ldr	r3, [r4, #8]
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	1b9b      	subs	r3, r3, r6
 8004566:	4432      	add	r2, r6
 8004568:	2000      	movs	r0, #0
 800456a:	60a3      	str	r3, [r4, #8]
 800456c:	6022      	str	r2, [r4, #0]
 800456e:	e7db      	b.n	8004528 <__ssputs_r+0x58>
 8004570:	462a      	mov	r2, r5
 8004572:	f000 fb7b 	bl	8004c6c <_realloc_r>
 8004576:	4606      	mov	r6, r0
 8004578:	2800      	cmp	r0, #0
 800457a:	d1e1      	bne.n	8004540 <__ssputs_r+0x70>
 800457c:	4650      	mov	r0, sl
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	f000 face 	bl	8004b20 <_free_r>
 8004584:	e7c7      	b.n	8004516 <__ssputs_r+0x46>
	...

08004588 <_svfiprintf_r>:
 8004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458c:	4698      	mov	r8, r3
 800458e:	898b      	ldrh	r3, [r1, #12]
 8004590:	4607      	mov	r7, r0
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	460d      	mov	r5, r1
 8004596:	4614      	mov	r4, r2
 8004598:	b09d      	sub	sp, #116	; 0x74
 800459a:	d50e      	bpl.n	80045ba <_svfiprintf_r+0x32>
 800459c:	690b      	ldr	r3, [r1, #16]
 800459e:	b963      	cbnz	r3, 80045ba <_svfiprintf_r+0x32>
 80045a0:	2140      	movs	r1, #64	; 0x40
 80045a2:	f000 fb09 	bl	8004bb8 <_malloc_r>
 80045a6:	6028      	str	r0, [r5, #0]
 80045a8:	6128      	str	r0, [r5, #16]
 80045aa:	b920      	cbnz	r0, 80045b6 <_svfiprintf_r+0x2e>
 80045ac:	230c      	movs	r3, #12
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	e0d1      	b.n	800475a <_svfiprintf_r+0x1d2>
 80045b6:	2340      	movs	r3, #64	; 0x40
 80045b8:	616b      	str	r3, [r5, #20]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9309      	str	r3, [sp, #36]	; 0x24
 80045be:	2320      	movs	r3, #32
 80045c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045c4:	2330      	movs	r3, #48	; 0x30
 80045c6:	f04f 0901 	mov.w	r9, #1
 80045ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004774 <_svfiprintf_r+0x1ec>
 80045d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045d6:	4623      	mov	r3, r4
 80045d8:	469a      	mov	sl, r3
 80045da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045de:	b10a      	cbz	r2, 80045e4 <_svfiprintf_r+0x5c>
 80045e0:	2a25      	cmp	r2, #37	; 0x25
 80045e2:	d1f9      	bne.n	80045d8 <_svfiprintf_r+0x50>
 80045e4:	ebba 0b04 	subs.w	fp, sl, r4
 80045e8:	d00b      	beq.n	8004602 <_svfiprintf_r+0x7a>
 80045ea:	465b      	mov	r3, fp
 80045ec:	4622      	mov	r2, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	4638      	mov	r0, r7
 80045f2:	f7ff ff6d 	bl	80044d0 <__ssputs_r>
 80045f6:	3001      	adds	r0, #1
 80045f8:	f000 80aa 	beq.w	8004750 <_svfiprintf_r+0x1c8>
 80045fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045fe:	445a      	add	r2, fp
 8004600:	9209      	str	r2, [sp, #36]	; 0x24
 8004602:	f89a 3000 	ldrb.w	r3, [sl]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a2 	beq.w	8004750 <_svfiprintf_r+0x1c8>
 800460c:	2300      	movs	r3, #0
 800460e:	f04f 32ff 	mov.w	r2, #4294967295
 8004612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004616:	f10a 0a01 	add.w	sl, sl, #1
 800461a:	9304      	str	r3, [sp, #16]
 800461c:	9307      	str	r3, [sp, #28]
 800461e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004622:	931a      	str	r3, [sp, #104]	; 0x68
 8004624:	4654      	mov	r4, sl
 8004626:	2205      	movs	r2, #5
 8004628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800462c:	4851      	ldr	r0, [pc, #324]	; (8004774 <_svfiprintf_r+0x1ec>)
 800462e:	f000 fa41 	bl	8004ab4 <memchr>
 8004632:	9a04      	ldr	r2, [sp, #16]
 8004634:	b9d8      	cbnz	r0, 800466e <_svfiprintf_r+0xe6>
 8004636:	06d0      	lsls	r0, r2, #27
 8004638:	bf44      	itt	mi
 800463a:	2320      	movmi	r3, #32
 800463c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004640:	0711      	lsls	r1, r2, #28
 8004642:	bf44      	itt	mi
 8004644:	232b      	movmi	r3, #43	; 0x2b
 8004646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800464a:	f89a 3000 	ldrb.w	r3, [sl]
 800464e:	2b2a      	cmp	r3, #42	; 0x2a
 8004650:	d015      	beq.n	800467e <_svfiprintf_r+0xf6>
 8004652:	4654      	mov	r4, sl
 8004654:	2000      	movs	r0, #0
 8004656:	f04f 0c0a 	mov.w	ip, #10
 800465a:	9a07      	ldr	r2, [sp, #28]
 800465c:	4621      	mov	r1, r4
 800465e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004662:	3b30      	subs	r3, #48	; 0x30
 8004664:	2b09      	cmp	r3, #9
 8004666:	d94e      	bls.n	8004706 <_svfiprintf_r+0x17e>
 8004668:	b1b0      	cbz	r0, 8004698 <_svfiprintf_r+0x110>
 800466a:	9207      	str	r2, [sp, #28]
 800466c:	e014      	b.n	8004698 <_svfiprintf_r+0x110>
 800466e:	eba0 0308 	sub.w	r3, r0, r8
 8004672:	fa09 f303 	lsl.w	r3, r9, r3
 8004676:	4313      	orrs	r3, r2
 8004678:	46a2      	mov	sl, r4
 800467a:	9304      	str	r3, [sp, #16]
 800467c:	e7d2      	b.n	8004624 <_svfiprintf_r+0x9c>
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	1d19      	adds	r1, r3, #4
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	9103      	str	r1, [sp, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	bfbb      	ittet	lt
 800468a:	425b      	neglt	r3, r3
 800468c:	f042 0202 	orrlt.w	r2, r2, #2
 8004690:	9307      	strge	r3, [sp, #28]
 8004692:	9307      	strlt	r3, [sp, #28]
 8004694:	bfb8      	it	lt
 8004696:	9204      	strlt	r2, [sp, #16]
 8004698:	7823      	ldrb	r3, [r4, #0]
 800469a:	2b2e      	cmp	r3, #46	; 0x2e
 800469c:	d10c      	bne.n	80046b8 <_svfiprintf_r+0x130>
 800469e:	7863      	ldrb	r3, [r4, #1]
 80046a0:	2b2a      	cmp	r3, #42	; 0x2a
 80046a2:	d135      	bne.n	8004710 <_svfiprintf_r+0x188>
 80046a4:	9b03      	ldr	r3, [sp, #12]
 80046a6:	3402      	adds	r4, #2
 80046a8:	1d1a      	adds	r2, r3, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	9203      	str	r2, [sp, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfb8      	it	lt
 80046b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046b6:	9305      	str	r3, [sp, #20]
 80046b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004784 <_svfiprintf_r+0x1fc>
 80046bc:	2203      	movs	r2, #3
 80046be:	4650      	mov	r0, sl
 80046c0:	7821      	ldrb	r1, [r4, #0]
 80046c2:	f000 f9f7 	bl	8004ab4 <memchr>
 80046c6:	b140      	cbz	r0, 80046da <_svfiprintf_r+0x152>
 80046c8:	2340      	movs	r3, #64	; 0x40
 80046ca:	eba0 000a 	sub.w	r0, r0, sl
 80046ce:	fa03 f000 	lsl.w	r0, r3, r0
 80046d2:	9b04      	ldr	r3, [sp, #16]
 80046d4:	3401      	adds	r4, #1
 80046d6:	4303      	orrs	r3, r0
 80046d8:	9304      	str	r3, [sp, #16]
 80046da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046de:	2206      	movs	r2, #6
 80046e0:	4825      	ldr	r0, [pc, #148]	; (8004778 <_svfiprintf_r+0x1f0>)
 80046e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046e6:	f000 f9e5 	bl	8004ab4 <memchr>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d038      	beq.n	8004760 <_svfiprintf_r+0x1d8>
 80046ee:	4b23      	ldr	r3, [pc, #140]	; (800477c <_svfiprintf_r+0x1f4>)
 80046f0:	bb1b      	cbnz	r3, 800473a <_svfiprintf_r+0x1b2>
 80046f2:	9b03      	ldr	r3, [sp, #12]
 80046f4:	3307      	adds	r3, #7
 80046f6:	f023 0307 	bic.w	r3, r3, #7
 80046fa:	3308      	adds	r3, #8
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004700:	4433      	add	r3, r6
 8004702:	9309      	str	r3, [sp, #36]	; 0x24
 8004704:	e767      	b.n	80045d6 <_svfiprintf_r+0x4e>
 8004706:	460c      	mov	r4, r1
 8004708:	2001      	movs	r0, #1
 800470a:	fb0c 3202 	mla	r2, ip, r2, r3
 800470e:	e7a5      	b.n	800465c <_svfiprintf_r+0xd4>
 8004710:	2300      	movs	r3, #0
 8004712:	f04f 0c0a 	mov.w	ip, #10
 8004716:	4619      	mov	r1, r3
 8004718:	3401      	adds	r4, #1
 800471a:	9305      	str	r3, [sp, #20]
 800471c:	4620      	mov	r0, r4
 800471e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004722:	3a30      	subs	r2, #48	; 0x30
 8004724:	2a09      	cmp	r2, #9
 8004726:	d903      	bls.n	8004730 <_svfiprintf_r+0x1a8>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0c5      	beq.n	80046b8 <_svfiprintf_r+0x130>
 800472c:	9105      	str	r1, [sp, #20]
 800472e:	e7c3      	b.n	80046b8 <_svfiprintf_r+0x130>
 8004730:	4604      	mov	r4, r0
 8004732:	2301      	movs	r3, #1
 8004734:	fb0c 2101 	mla	r1, ip, r1, r2
 8004738:	e7f0      	b.n	800471c <_svfiprintf_r+0x194>
 800473a:	ab03      	add	r3, sp, #12
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	462a      	mov	r2, r5
 8004740:	4638      	mov	r0, r7
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <_svfiprintf_r+0x1f8>)
 8004744:	a904      	add	r1, sp, #16
 8004746:	f3af 8000 	nop.w
 800474a:	1c42      	adds	r2, r0, #1
 800474c:	4606      	mov	r6, r0
 800474e:	d1d6      	bne.n	80046fe <_svfiprintf_r+0x176>
 8004750:	89ab      	ldrh	r3, [r5, #12]
 8004752:	065b      	lsls	r3, r3, #25
 8004754:	f53f af2c 	bmi.w	80045b0 <_svfiprintf_r+0x28>
 8004758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800475a:	b01d      	add	sp, #116	; 0x74
 800475c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004760:	ab03      	add	r3, sp, #12
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	462a      	mov	r2, r5
 8004766:	4638      	mov	r0, r7
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <_svfiprintf_r+0x1f8>)
 800476a:	a904      	add	r1, sp, #16
 800476c:	f000 f87c 	bl	8004868 <_printf_i>
 8004770:	e7eb      	b.n	800474a <_svfiprintf_r+0x1c2>
 8004772:	bf00      	nop
 8004774:	08004d92 	.word	0x08004d92
 8004778:	08004d9c 	.word	0x08004d9c
 800477c:	00000000 	.word	0x00000000
 8004780:	080044d1 	.word	0x080044d1
 8004784:	08004d98 	.word	0x08004d98

08004788 <_printf_common>:
 8004788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	4616      	mov	r6, r2
 800478e:	4699      	mov	r9, r3
 8004790:	688a      	ldr	r2, [r1, #8]
 8004792:	690b      	ldr	r3, [r1, #16]
 8004794:	4607      	mov	r7, r0
 8004796:	4293      	cmp	r3, r2
 8004798:	bfb8      	it	lt
 800479a:	4613      	movlt	r3, r2
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047a2:	460c      	mov	r4, r1
 80047a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a8:	b10a      	cbz	r2, 80047ae <_printf_common+0x26>
 80047aa:	3301      	adds	r3, #1
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	0699      	lsls	r1, r3, #26
 80047b2:	bf42      	ittt	mi
 80047b4:	6833      	ldrmi	r3, [r6, #0]
 80047b6:	3302      	addmi	r3, #2
 80047b8:	6033      	strmi	r3, [r6, #0]
 80047ba:	6825      	ldr	r5, [r4, #0]
 80047bc:	f015 0506 	ands.w	r5, r5, #6
 80047c0:	d106      	bne.n	80047d0 <_printf_common+0x48>
 80047c2:	f104 0a19 	add.w	sl, r4, #25
 80047c6:	68e3      	ldr	r3, [r4, #12]
 80047c8:	6832      	ldr	r2, [r6, #0]
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dc28      	bgt.n	8004822 <_printf_common+0x9a>
 80047d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047d4:	1e13      	subs	r3, r2, #0
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	bf18      	it	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	0692      	lsls	r2, r2, #26
 80047de:	d42d      	bmi.n	800483c <_printf_common+0xb4>
 80047e0:	4649      	mov	r1, r9
 80047e2:	4638      	mov	r0, r7
 80047e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047e8:	47c0      	blx	r8
 80047ea:	3001      	adds	r0, #1
 80047ec:	d020      	beq.n	8004830 <_printf_common+0xa8>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	68e5      	ldr	r5, [r4, #12]
 80047f2:	f003 0306 	and.w	r3, r3, #6
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf18      	it	ne
 80047fa:	2500      	movne	r5, #0
 80047fc:	6832      	ldr	r2, [r6, #0]
 80047fe:	f04f 0600 	mov.w	r6, #0
 8004802:	68a3      	ldr	r3, [r4, #8]
 8004804:	bf08      	it	eq
 8004806:	1aad      	subeq	r5, r5, r2
 8004808:	6922      	ldr	r2, [r4, #16]
 800480a:	bf08      	it	eq
 800480c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004810:	4293      	cmp	r3, r2
 8004812:	bfc4      	itt	gt
 8004814:	1a9b      	subgt	r3, r3, r2
 8004816:	18ed      	addgt	r5, r5, r3
 8004818:	341a      	adds	r4, #26
 800481a:	42b5      	cmp	r5, r6
 800481c:	d11a      	bne.n	8004854 <_printf_common+0xcc>
 800481e:	2000      	movs	r0, #0
 8004820:	e008      	b.n	8004834 <_printf_common+0xac>
 8004822:	2301      	movs	r3, #1
 8004824:	4652      	mov	r2, sl
 8004826:	4649      	mov	r1, r9
 8004828:	4638      	mov	r0, r7
 800482a:	47c0      	blx	r8
 800482c:	3001      	adds	r0, #1
 800482e:	d103      	bne.n	8004838 <_printf_common+0xb0>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	3501      	adds	r5, #1
 800483a:	e7c4      	b.n	80047c6 <_printf_common+0x3e>
 800483c:	2030      	movs	r0, #48	; 0x30
 800483e:	18e1      	adds	r1, r4, r3
 8004840:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800484a:	4422      	add	r2, r4
 800484c:	3302      	adds	r3, #2
 800484e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004852:	e7c5      	b.n	80047e0 <_printf_common+0x58>
 8004854:	2301      	movs	r3, #1
 8004856:	4622      	mov	r2, r4
 8004858:	4649      	mov	r1, r9
 800485a:	4638      	mov	r0, r7
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d0e6      	beq.n	8004830 <_printf_common+0xa8>
 8004862:	3601      	adds	r6, #1
 8004864:	e7d9      	b.n	800481a <_printf_common+0x92>
	...

08004868 <_printf_i>:
 8004868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800486c:	460c      	mov	r4, r1
 800486e:	7e27      	ldrb	r7, [r4, #24]
 8004870:	4691      	mov	r9, r2
 8004872:	2f78      	cmp	r7, #120	; 0x78
 8004874:	4680      	mov	r8, r0
 8004876:	469a      	mov	sl, r3
 8004878:	990c      	ldr	r1, [sp, #48]	; 0x30
 800487a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800487e:	d807      	bhi.n	8004890 <_printf_i+0x28>
 8004880:	2f62      	cmp	r7, #98	; 0x62
 8004882:	d80a      	bhi.n	800489a <_printf_i+0x32>
 8004884:	2f00      	cmp	r7, #0
 8004886:	f000 80d9 	beq.w	8004a3c <_printf_i+0x1d4>
 800488a:	2f58      	cmp	r7, #88	; 0x58
 800488c:	f000 80a4 	beq.w	80049d8 <_printf_i+0x170>
 8004890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004898:	e03a      	b.n	8004910 <_printf_i+0xa8>
 800489a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800489e:	2b15      	cmp	r3, #21
 80048a0:	d8f6      	bhi.n	8004890 <_printf_i+0x28>
 80048a2:	a001      	add	r0, pc, #4	; (adr r0, 80048a8 <_printf_i+0x40>)
 80048a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048a8:	08004901 	.word	0x08004901
 80048ac:	08004915 	.word	0x08004915
 80048b0:	08004891 	.word	0x08004891
 80048b4:	08004891 	.word	0x08004891
 80048b8:	08004891 	.word	0x08004891
 80048bc:	08004891 	.word	0x08004891
 80048c0:	08004915 	.word	0x08004915
 80048c4:	08004891 	.word	0x08004891
 80048c8:	08004891 	.word	0x08004891
 80048cc:	08004891 	.word	0x08004891
 80048d0:	08004891 	.word	0x08004891
 80048d4:	08004a23 	.word	0x08004a23
 80048d8:	08004945 	.word	0x08004945
 80048dc:	08004a05 	.word	0x08004a05
 80048e0:	08004891 	.word	0x08004891
 80048e4:	08004891 	.word	0x08004891
 80048e8:	08004a45 	.word	0x08004a45
 80048ec:	08004891 	.word	0x08004891
 80048f0:	08004945 	.word	0x08004945
 80048f4:	08004891 	.word	0x08004891
 80048f8:	08004891 	.word	0x08004891
 80048fc:	08004a0d 	.word	0x08004a0d
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	600a      	str	r2, [r1, #0]
 800490c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004910:	2301      	movs	r3, #1
 8004912:	e0a4      	b.n	8004a5e <_printf_i+0x1f6>
 8004914:	6825      	ldr	r5, [r4, #0]
 8004916:	6808      	ldr	r0, [r1, #0]
 8004918:	062e      	lsls	r6, r5, #24
 800491a:	f100 0304 	add.w	r3, r0, #4
 800491e:	d50a      	bpl.n	8004936 <_printf_i+0xce>
 8004920:	6805      	ldr	r5, [r0, #0]
 8004922:	600b      	str	r3, [r1, #0]
 8004924:	2d00      	cmp	r5, #0
 8004926:	da03      	bge.n	8004930 <_printf_i+0xc8>
 8004928:	232d      	movs	r3, #45	; 0x2d
 800492a:	426d      	negs	r5, r5
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004930:	230a      	movs	r3, #10
 8004932:	485e      	ldr	r0, [pc, #376]	; (8004aac <_printf_i+0x244>)
 8004934:	e019      	b.n	800496a <_printf_i+0x102>
 8004936:	f015 0f40 	tst.w	r5, #64	; 0x40
 800493a:	6805      	ldr	r5, [r0, #0]
 800493c:	600b      	str	r3, [r1, #0]
 800493e:	bf18      	it	ne
 8004940:	b22d      	sxthne	r5, r5
 8004942:	e7ef      	b.n	8004924 <_printf_i+0xbc>
 8004944:	680b      	ldr	r3, [r1, #0]
 8004946:	6825      	ldr	r5, [r4, #0]
 8004948:	1d18      	adds	r0, r3, #4
 800494a:	6008      	str	r0, [r1, #0]
 800494c:	0628      	lsls	r0, r5, #24
 800494e:	d501      	bpl.n	8004954 <_printf_i+0xec>
 8004950:	681d      	ldr	r5, [r3, #0]
 8004952:	e002      	b.n	800495a <_printf_i+0xf2>
 8004954:	0669      	lsls	r1, r5, #25
 8004956:	d5fb      	bpl.n	8004950 <_printf_i+0xe8>
 8004958:	881d      	ldrh	r5, [r3, #0]
 800495a:	2f6f      	cmp	r7, #111	; 0x6f
 800495c:	bf0c      	ite	eq
 800495e:	2308      	moveq	r3, #8
 8004960:	230a      	movne	r3, #10
 8004962:	4852      	ldr	r0, [pc, #328]	; (8004aac <_printf_i+0x244>)
 8004964:	2100      	movs	r1, #0
 8004966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800496a:	6866      	ldr	r6, [r4, #4]
 800496c:	2e00      	cmp	r6, #0
 800496e:	bfa8      	it	ge
 8004970:	6821      	ldrge	r1, [r4, #0]
 8004972:	60a6      	str	r6, [r4, #8]
 8004974:	bfa4      	itt	ge
 8004976:	f021 0104 	bicge.w	r1, r1, #4
 800497a:	6021      	strge	r1, [r4, #0]
 800497c:	b90d      	cbnz	r5, 8004982 <_printf_i+0x11a>
 800497e:	2e00      	cmp	r6, #0
 8004980:	d04d      	beq.n	8004a1e <_printf_i+0x1b6>
 8004982:	4616      	mov	r6, r2
 8004984:	fbb5 f1f3 	udiv	r1, r5, r3
 8004988:	fb03 5711 	mls	r7, r3, r1, r5
 800498c:	5dc7      	ldrb	r7, [r0, r7]
 800498e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004992:	462f      	mov	r7, r5
 8004994:	42bb      	cmp	r3, r7
 8004996:	460d      	mov	r5, r1
 8004998:	d9f4      	bls.n	8004984 <_printf_i+0x11c>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d10b      	bne.n	80049b6 <_printf_i+0x14e>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	07df      	lsls	r7, r3, #31
 80049a2:	d508      	bpl.n	80049b6 <_printf_i+0x14e>
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	6861      	ldr	r1, [r4, #4]
 80049a8:	4299      	cmp	r1, r3
 80049aa:	bfde      	ittt	le
 80049ac:	2330      	movle	r3, #48	; 0x30
 80049ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049b6:	1b92      	subs	r2, r2, r6
 80049b8:	6122      	str	r2, [r4, #16]
 80049ba:	464b      	mov	r3, r9
 80049bc:	4621      	mov	r1, r4
 80049be:	4640      	mov	r0, r8
 80049c0:	f8cd a000 	str.w	sl, [sp]
 80049c4:	aa03      	add	r2, sp, #12
 80049c6:	f7ff fedf 	bl	8004788 <_printf_common>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d14c      	bne.n	8004a68 <_printf_i+0x200>
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	b004      	add	sp, #16
 80049d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d8:	4834      	ldr	r0, [pc, #208]	; (8004aac <_printf_i+0x244>)
 80049da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049de:	680e      	ldr	r6, [r1, #0]
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80049e6:	061f      	lsls	r7, r3, #24
 80049e8:	600e      	str	r6, [r1, #0]
 80049ea:	d514      	bpl.n	8004a16 <_printf_i+0x1ae>
 80049ec:	07d9      	lsls	r1, r3, #31
 80049ee:	bf44      	itt	mi
 80049f0:	f043 0320 	orrmi.w	r3, r3, #32
 80049f4:	6023      	strmi	r3, [r4, #0]
 80049f6:	b91d      	cbnz	r5, 8004a00 <_printf_i+0x198>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f023 0320 	bic.w	r3, r3, #32
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	2310      	movs	r3, #16
 8004a02:	e7af      	b.n	8004964 <_printf_i+0xfc>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	f043 0320 	orr.w	r3, r3, #32
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	2378      	movs	r3, #120	; 0x78
 8004a0e:	4828      	ldr	r0, [pc, #160]	; (8004ab0 <_printf_i+0x248>)
 8004a10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a14:	e7e3      	b.n	80049de <_printf_i+0x176>
 8004a16:	065e      	lsls	r6, r3, #25
 8004a18:	bf48      	it	mi
 8004a1a:	b2ad      	uxthmi	r5, r5
 8004a1c:	e7e6      	b.n	80049ec <_printf_i+0x184>
 8004a1e:	4616      	mov	r6, r2
 8004a20:	e7bb      	b.n	800499a <_printf_i+0x132>
 8004a22:	680b      	ldr	r3, [r1, #0]
 8004a24:	6826      	ldr	r6, [r4, #0]
 8004a26:	1d1d      	adds	r5, r3, #4
 8004a28:	6960      	ldr	r0, [r4, #20]
 8004a2a:	600d      	str	r5, [r1, #0]
 8004a2c:	0635      	lsls	r5, r6, #24
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	d501      	bpl.n	8004a36 <_printf_i+0x1ce>
 8004a32:	6018      	str	r0, [r3, #0]
 8004a34:	e002      	b.n	8004a3c <_printf_i+0x1d4>
 8004a36:	0671      	lsls	r1, r6, #25
 8004a38:	d5fb      	bpl.n	8004a32 <_printf_i+0x1ca>
 8004a3a:	8018      	strh	r0, [r3, #0]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4616      	mov	r6, r2
 8004a40:	6123      	str	r3, [r4, #16]
 8004a42:	e7ba      	b.n	80049ba <_printf_i+0x152>
 8004a44:	680b      	ldr	r3, [r1, #0]
 8004a46:	1d1a      	adds	r2, r3, #4
 8004a48:	600a      	str	r2, [r1, #0]
 8004a4a:	681e      	ldr	r6, [r3, #0]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4630      	mov	r0, r6
 8004a50:	6862      	ldr	r2, [r4, #4]
 8004a52:	f000 f82f 	bl	8004ab4 <memchr>
 8004a56:	b108      	cbz	r0, 8004a5c <_printf_i+0x1f4>
 8004a58:	1b80      	subs	r0, r0, r6
 8004a5a:	6060      	str	r0, [r4, #4]
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	6123      	str	r3, [r4, #16]
 8004a60:	2300      	movs	r3, #0
 8004a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a66:	e7a8      	b.n	80049ba <_printf_i+0x152>
 8004a68:	4632      	mov	r2, r6
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	47d0      	blx	sl
 8004a72:	3001      	adds	r0, #1
 8004a74:	d0ab      	beq.n	80049ce <_printf_i+0x166>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	079b      	lsls	r3, r3, #30
 8004a7a:	d413      	bmi.n	8004aa4 <_printf_i+0x23c>
 8004a7c:	68e0      	ldr	r0, [r4, #12]
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	4298      	cmp	r0, r3
 8004a82:	bfb8      	it	lt
 8004a84:	4618      	movlt	r0, r3
 8004a86:	e7a4      	b.n	80049d2 <_printf_i+0x16a>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4640      	mov	r0, r8
 8004a90:	47d0      	blx	sl
 8004a92:	3001      	adds	r0, #1
 8004a94:	d09b      	beq.n	80049ce <_printf_i+0x166>
 8004a96:	3501      	adds	r5, #1
 8004a98:	68e3      	ldr	r3, [r4, #12]
 8004a9a:	9903      	ldr	r1, [sp, #12]
 8004a9c:	1a5b      	subs	r3, r3, r1
 8004a9e:	42ab      	cmp	r3, r5
 8004aa0:	dcf2      	bgt.n	8004a88 <_printf_i+0x220>
 8004aa2:	e7eb      	b.n	8004a7c <_printf_i+0x214>
 8004aa4:	2500      	movs	r5, #0
 8004aa6:	f104 0619 	add.w	r6, r4, #25
 8004aaa:	e7f5      	b.n	8004a98 <_printf_i+0x230>
 8004aac:	08004da3 	.word	0x08004da3
 8004ab0:	08004db4 	.word	0x08004db4

08004ab4 <memchr>:
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	b2c9      	uxtb	r1, r1
 8004aba:	4402      	add	r2, r0
 8004abc:	4293      	cmp	r3, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	d101      	bne.n	8004ac6 <memchr+0x12>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e003      	b.n	8004ace <memchr+0x1a>
 8004ac6:	7804      	ldrb	r4, [r0, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	428c      	cmp	r4, r1
 8004acc:	d1f6      	bne.n	8004abc <memchr+0x8>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <memcpy>:
 8004ad0:	440a      	add	r2, r1
 8004ad2:	4291      	cmp	r1, r2
 8004ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ad8:	d100      	bne.n	8004adc <memcpy+0xc>
 8004ada:	4770      	bx	lr
 8004adc:	b510      	push	{r4, lr}
 8004ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ae8:	d1f9      	bne.n	8004ade <memcpy+0xe>
 8004aea:	bd10      	pop	{r4, pc}

08004aec <memmove>:
 8004aec:	4288      	cmp	r0, r1
 8004aee:	b510      	push	{r4, lr}
 8004af0:	eb01 0402 	add.w	r4, r1, r2
 8004af4:	d902      	bls.n	8004afc <memmove+0x10>
 8004af6:	4284      	cmp	r4, r0
 8004af8:	4623      	mov	r3, r4
 8004afa:	d807      	bhi.n	8004b0c <memmove+0x20>
 8004afc:	1e43      	subs	r3, r0, #1
 8004afe:	42a1      	cmp	r1, r4
 8004b00:	d008      	beq.n	8004b14 <memmove+0x28>
 8004b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b0a:	e7f8      	b.n	8004afe <memmove+0x12>
 8004b0c:	4601      	mov	r1, r0
 8004b0e:	4402      	add	r2, r0
 8004b10:	428a      	cmp	r2, r1
 8004b12:	d100      	bne.n	8004b16 <memmove+0x2a>
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b1e:	e7f7      	b.n	8004b10 <memmove+0x24>

08004b20 <_free_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4605      	mov	r5, r0
 8004b24:	2900      	cmp	r1, #0
 8004b26:	d043      	beq.n	8004bb0 <_free_r+0x90>
 8004b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2c:	1f0c      	subs	r4, r1, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfb8      	it	lt
 8004b32:	18e4      	addlt	r4, r4, r3
 8004b34:	f000 f8d0 	bl	8004cd8 <__malloc_lock>
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <_free_r+0x94>)
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	b933      	cbnz	r3, 8004b4e <_free_r+0x2e>
 8004b40:	6063      	str	r3, [r4, #4]
 8004b42:	6014      	str	r4, [r2, #0]
 8004b44:	4628      	mov	r0, r5
 8004b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b4a:	f000 b8cb 	b.w	8004ce4 <__malloc_unlock>
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	d90a      	bls.n	8004b68 <_free_r+0x48>
 8004b52:	6821      	ldr	r1, [r4, #0]
 8004b54:	1862      	adds	r2, r4, r1
 8004b56:	4293      	cmp	r3, r2
 8004b58:	bf01      	itttt	eq
 8004b5a:	681a      	ldreq	r2, [r3, #0]
 8004b5c:	685b      	ldreq	r3, [r3, #4]
 8004b5e:	1852      	addeq	r2, r2, r1
 8004b60:	6022      	streq	r2, [r4, #0]
 8004b62:	6063      	str	r3, [r4, #4]
 8004b64:	6004      	str	r4, [r0, #0]
 8004b66:	e7ed      	b.n	8004b44 <_free_r+0x24>
 8004b68:	461a      	mov	r2, r3
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	b10b      	cbz	r3, 8004b72 <_free_r+0x52>
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	d9fa      	bls.n	8004b68 <_free_r+0x48>
 8004b72:	6811      	ldr	r1, [r2, #0]
 8004b74:	1850      	adds	r0, r2, r1
 8004b76:	42a0      	cmp	r0, r4
 8004b78:	d10b      	bne.n	8004b92 <_free_r+0x72>
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	4401      	add	r1, r0
 8004b7e:	1850      	adds	r0, r2, r1
 8004b80:	4283      	cmp	r3, r0
 8004b82:	6011      	str	r1, [r2, #0]
 8004b84:	d1de      	bne.n	8004b44 <_free_r+0x24>
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4401      	add	r1, r0
 8004b8c:	6011      	str	r1, [r2, #0]
 8004b8e:	6053      	str	r3, [r2, #4]
 8004b90:	e7d8      	b.n	8004b44 <_free_r+0x24>
 8004b92:	d902      	bls.n	8004b9a <_free_r+0x7a>
 8004b94:	230c      	movs	r3, #12
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	e7d4      	b.n	8004b44 <_free_r+0x24>
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	1821      	adds	r1, r4, r0
 8004b9e:	428b      	cmp	r3, r1
 8004ba0:	bf01      	itttt	eq
 8004ba2:	6819      	ldreq	r1, [r3, #0]
 8004ba4:	685b      	ldreq	r3, [r3, #4]
 8004ba6:	1809      	addeq	r1, r1, r0
 8004ba8:	6021      	streq	r1, [r4, #0]
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	6054      	str	r4, [r2, #4]
 8004bae:	e7c9      	b.n	8004b44 <_free_r+0x24>
 8004bb0:	bd38      	pop	{r3, r4, r5, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200000c4 	.word	0x200000c4

08004bb8 <_malloc_r>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	1ccd      	adds	r5, r1, #3
 8004bbc:	f025 0503 	bic.w	r5, r5, #3
 8004bc0:	3508      	adds	r5, #8
 8004bc2:	2d0c      	cmp	r5, #12
 8004bc4:	bf38      	it	cc
 8004bc6:	250c      	movcc	r5, #12
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	4606      	mov	r6, r0
 8004bcc:	db01      	blt.n	8004bd2 <_malloc_r+0x1a>
 8004bce:	42a9      	cmp	r1, r5
 8004bd0:	d903      	bls.n	8004bda <_malloc_r+0x22>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bda:	f000 f87d 	bl	8004cd8 <__malloc_lock>
 8004bde:	4921      	ldr	r1, [pc, #132]	; (8004c64 <_malloc_r+0xac>)
 8004be0:	680a      	ldr	r2, [r1, #0]
 8004be2:	4614      	mov	r4, r2
 8004be4:	b99c      	cbnz	r4, 8004c0e <_malloc_r+0x56>
 8004be6:	4f20      	ldr	r7, [pc, #128]	; (8004c68 <_malloc_r+0xb0>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b923      	cbnz	r3, 8004bf6 <_malloc_r+0x3e>
 8004bec:	4621      	mov	r1, r4
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f000 f862 	bl	8004cb8 <_sbrk_r>
 8004bf4:	6038      	str	r0, [r7, #0]
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f85d 	bl	8004cb8 <_sbrk_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d123      	bne.n	8004c4a <_malloc_r+0x92>
 8004c02:	230c      	movs	r3, #12
 8004c04:	4630      	mov	r0, r6
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	f000 f86c 	bl	8004ce4 <__malloc_unlock>
 8004c0c:	e7e3      	b.n	8004bd6 <_malloc_r+0x1e>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	1b5b      	subs	r3, r3, r5
 8004c12:	d417      	bmi.n	8004c44 <_malloc_r+0x8c>
 8004c14:	2b0b      	cmp	r3, #11
 8004c16:	d903      	bls.n	8004c20 <_malloc_r+0x68>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	441c      	add	r4, r3
 8004c1c:	6025      	str	r5, [r4, #0]
 8004c1e:	e004      	b.n	8004c2a <_malloc_r+0x72>
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	42a2      	cmp	r2, r4
 8004c24:	bf0c      	ite	eq
 8004c26:	600b      	streq	r3, [r1, #0]
 8004c28:	6053      	strne	r3, [r2, #4]
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f000 f85a 	bl	8004ce4 <__malloc_unlock>
 8004c30:	f104 000b 	add.w	r0, r4, #11
 8004c34:	1d23      	adds	r3, r4, #4
 8004c36:	f020 0007 	bic.w	r0, r0, #7
 8004c3a:	1ac2      	subs	r2, r0, r3
 8004c3c:	d0cc      	beq.n	8004bd8 <_malloc_r+0x20>
 8004c3e:	1a1b      	subs	r3, r3, r0
 8004c40:	50a3      	str	r3, [r4, r2]
 8004c42:	e7c9      	b.n	8004bd8 <_malloc_r+0x20>
 8004c44:	4622      	mov	r2, r4
 8004c46:	6864      	ldr	r4, [r4, #4]
 8004c48:	e7cc      	b.n	8004be4 <_malloc_r+0x2c>
 8004c4a:	1cc4      	adds	r4, r0, #3
 8004c4c:	f024 0403 	bic.w	r4, r4, #3
 8004c50:	42a0      	cmp	r0, r4
 8004c52:	d0e3      	beq.n	8004c1c <_malloc_r+0x64>
 8004c54:	1a21      	subs	r1, r4, r0
 8004c56:	4630      	mov	r0, r6
 8004c58:	f000 f82e 	bl	8004cb8 <_sbrk_r>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d1dd      	bne.n	8004c1c <_malloc_r+0x64>
 8004c60:	e7cf      	b.n	8004c02 <_malloc_r+0x4a>
 8004c62:	bf00      	nop
 8004c64:	200000c4 	.word	0x200000c4
 8004c68:	200000c8 	.word	0x200000c8

08004c6c <_realloc_r>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	4607      	mov	r7, r0
 8004c70:	4614      	mov	r4, r2
 8004c72:	460e      	mov	r6, r1
 8004c74:	b921      	cbnz	r1, 8004c80 <_realloc_r+0x14>
 8004c76:	4611      	mov	r1, r2
 8004c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c7c:	f7ff bf9c 	b.w	8004bb8 <_malloc_r>
 8004c80:	b922      	cbnz	r2, 8004c8c <_realloc_r+0x20>
 8004c82:	f7ff ff4d 	bl	8004b20 <_free_r>
 8004c86:	4625      	mov	r5, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8c:	f000 f830 	bl	8004cf0 <_malloc_usable_size_r>
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d20f      	bcs.n	8004cb4 <_realloc_r+0x48>
 8004c94:	4621      	mov	r1, r4
 8004c96:	4638      	mov	r0, r7
 8004c98:	f7ff ff8e 	bl	8004bb8 <_malloc_r>
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d0f2      	beq.n	8004c88 <_realloc_r+0x1c>
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	f7ff ff13 	bl	8004ad0 <memcpy>
 8004caa:	4631      	mov	r1, r6
 8004cac:	4638      	mov	r0, r7
 8004cae:	f7ff ff37 	bl	8004b20 <_free_r>
 8004cb2:	e7e9      	b.n	8004c88 <_realloc_r+0x1c>
 8004cb4:	4635      	mov	r5, r6
 8004cb6:	e7e7      	b.n	8004c88 <_realloc_r+0x1c>

08004cb8 <_sbrk_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	2300      	movs	r3, #0
 8004cbc:	4d05      	ldr	r5, [pc, #20]	; (8004cd4 <_sbrk_r+0x1c>)
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fc fd4e 	bl	8001764 <_sbrk>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_sbrk_r+0x1a>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_sbrk_r+0x1a>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	200005f4 	.word	0x200005f4

08004cd8 <__malloc_lock>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	; (8004ce0 <__malloc_lock+0x8>)
 8004cda:	f000 b811 	b.w	8004d00 <__retarget_lock_acquire_recursive>
 8004cde:	bf00      	nop
 8004ce0:	200005fc 	.word	0x200005fc

08004ce4 <__malloc_unlock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__malloc_unlock+0x8>)
 8004ce6:	f000 b80c 	b.w	8004d02 <__retarget_lock_release_recursive>
 8004cea:	bf00      	nop
 8004cec:	200005fc 	.word	0x200005fc

08004cf0 <_malloc_usable_size_r>:
 8004cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf4:	1f18      	subs	r0, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bfbc      	itt	lt
 8004cfa:	580b      	ldrlt	r3, [r1, r0]
 8004cfc:	18c0      	addlt	r0, r0, r3
 8004cfe:	4770      	bx	lr

08004d00 <__retarget_lock_acquire_recursive>:
 8004d00:	4770      	bx	lr

08004d02 <__retarget_lock_release_recursive>:
 8004d02:	4770      	bx	lr

08004d04 <_init>:
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	bf00      	nop
 8004d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0a:	bc08      	pop	{r3}
 8004d0c:	469e      	mov	lr, r3
 8004d0e:	4770      	bx	lr

08004d10 <_fini>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr
