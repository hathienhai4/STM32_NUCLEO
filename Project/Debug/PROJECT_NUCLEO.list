
PROJECT_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000323c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003374  08003374  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003374  08003374  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003374  08003374  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000002c  080033a8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080033a8  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e084  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bb  00000000  00000000  0002e0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00030fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023a5  00000000  00000000  00031bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa91  00000000  00000000  00033f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a5e  00000000  00000000  000439fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc45c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000cc4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003330 	.word	0x08003330

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08003330 	.word	0x08003330

0800014c <clearLed>:
 *  Created on: Nov 14, 2024
 *      Author: admin
 */
#include <RYG_LED.h>

void clearLed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	displayLed(-1);
 8000150:	f04f 30ff 	mov.w	r0, #4294967295
 8000154:	f000 f806 	bl	8000164 <displayLed>
	displayLed2(-1);
 8000158:	f04f 30ff 	mov.w	r0, #4294967295
 800015c:	f000 f848 	bl	80001f0 <displayLed2>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <displayLed>:

void displayLed(int state){
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	switch(state){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f240 124d 	movw	r2, #333	; 0x14d
 8000172:	4293      	cmp	r3, r2
 8000174:	d020      	beq.n	80001b8 <displayLed+0x54>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 800017c:	da27      	bge.n	80001ce <displayLed+0x6a>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b6f      	cmp	r3, #111	; 0x6f
 8000182:	d003      	beq.n	800018c <displayLed+0x28>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2bde      	cmp	r3, #222	; 0xde
 8000188:	d00b      	beq.n	80001a2 <displayLed+0x3e>
 800018a:	e020      	b.n	80001ce <displayLed+0x6a>
		case RED:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2108      	movs	r1, #8
 8000190:	4816      	ldr	r0, [pc, #88]	; (80001ec <displayLed+0x88>)
 8000192:	f001 fb1c 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	2120      	movs	r1, #32
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <displayLed+0x88>)
 800019c:	f001 fb17 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 80001a0:	e020      	b.n	80001e4 <displayLed+0x80>
		case YEL:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2108      	movs	r1, #8
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <displayLed+0x88>)
 80001a8:	f001 fb11 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2120      	movs	r1, #32
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <displayLed+0x88>)
 80001b2:	f001 fb0c 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 80001b6:	e015      	b.n	80001e4 <displayLed+0x80>
		case GREEN:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2108      	movs	r1, #8
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <displayLed+0x88>)
 80001be:	f001 fb06 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2120      	movs	r1, #32
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <displayLed+0x88>)
 80001c8:	f001 fb01 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 80001cc:	e00a      	b.n	80001e4 <displayLed+0x80>
		default:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2108      	movs	r1, #8
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <displayLed+0x88>)
 80001d4:	f001 fafb 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2120      	movs	r1, #32
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <displayLed+0x88>)
 80001de:	f001 faf6 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 80001e2:	bf00      	nop
	}
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <displayLed2>:
void displayLed2(int state){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	switch(state){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f240 124d 	movw	r2, #333	; 0x14d
 80001fe:	4293      	cmp	r3, r2
 8000200:	d022      	beq.n	8000248 <displayLed2+0x58>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8000208:	da2a      	bge.n	8000260 <displayLed2+0x70>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b6f      	cmp	r3, #111	; 0x6f
 800020e:	d003      	beq.n	8000218 <displayLed2+0x28>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2bde      	cmp	r3, #222	; 0xde
 8000214:	d00c      	beq.n	8000230 <displayLed2+0x40>
 8000216:	e023      	b.n	8000260 <displayLed2+0x70>
		case RED:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2110      	movs	r1, #16
 800021c:	4818      	ldr	r0, [pc, #96]	; (8000280 <displayLed2+0x90>)
 800021e:	f001 fad6 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000228:	4815      	ldr	r0, [pc, #84]	; (8000280 <displayLed2+0x90>)
 800022a:	f001 fad0 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 800022e:	e023      	b.n	8000278 <displayLed2+0x88>
		case YEL:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4812      	ldr	r0, [pc, #72]	; (8000280 <displayLed2+0x90>)
 8000236:	f001 faca 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	480f      	ldr	r0, [pc, #60]	; (8000280 <displayLed2+0x90>)
 8000242:	f001 fac4 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 8000246:	e017      	b.n	8000278 <displayLed2+0x88>
		case GREEN:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <displayLed2+0x90>)
 800024e:	f001 fabe 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4809      	ldr	r0, [pc, #36]	; (8000280 <displayLed2+0x90>)
 800025a:	f001 fab8 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 800025e:	e00b      	b.n	8000278 <displayLed2+0x88>
		default:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2110      	movs	r1, #16
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <displayLed2+0x90>)
 8000266:	f001 fab2 	bl	80017ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <displayLed2+0x90>)
 8000272:	f001 faac 	bl	80017ce <HAL_GPIO_WritePin>
			break;
 8000276:	bf00      	nop
	}
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010c00 	.word	0x40010c00

08000284 <isButtonPressed>:


GPIO_TypeDef* button_ports[] = {BUTTON1_GPIO_Port,BUTTON2_GPIO_Port,BUTTON3_GPIO_Port};
uint16_t button_pins[] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

int isButtonPressed( int index ){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 800028c:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <isButtonPressed+0x30>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d106      	bne.n	80002a6 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <isButtonPressed+0x30>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2100      	movs	r1, #0
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e000      	b.n	80002a8 <isButtonPressed+0x24>
	}
	return 0;
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000084 	.word	0x20000084

080002b8 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTON; i++){
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	e07d      	b.n	80003c0 <getKeyInput+0x108>
		KeyReg2[i] = KeyReg1[i];
 80002c4:	4a43      	ldr	r2, [pc, #268]	; (80003d4 <getKeyInput+0x11c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002cc:	4942      	ldr	r1, [pc, #264]	; (80003d8 <getKeyInput+0x120>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80002d4:	4a41      	ldr	r2, [pc, #260]	; (80003dc <getKeyInput+0x124>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002dc:	493d      	ldr	r1, [pc, #244]	; (80003d4 <getKeyInput+0x11c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  KeyReg0[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 80002e4:	4a3e      	ldr	r2, [pc, #248]	; (80003e0 <getKeyInput+0x128>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ec:	493d      	ldr	r1, [pc, #244]	; (80003e4 <getKeyInput+0x12c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002f4:	4619      	mov	r1, r3
 80002f6:	4610      	mov	r0, r2
 80002f8:	f001 fa52 	bl	80017a0 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4619      	mov	r1, r3
 8000300:	4a36      	ldr	r2, [pc, #216]	; (80003dc <getKeyInput+0x124>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000308:	4a32      	ldr	r2, [pc, #200]	; (80003d4 <getKeyInput+0x11c>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4932      	ldr	r1, [pc, #200]	; (80003dc <getKeyInput+0x124>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d14e      	bne.n	80003ba <getKeyInput+0x102>
 800031c:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <getKeyInput+0x11c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	492c      	ldr	r1, [pc, #176]	; (80003d8 <getKeyInput+0x120>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800032c:	429a      	cmp	r2, r3
 800032e:	d144      	bne.n	80003ba <getKeyInput+0x102>
		if (KeyReg2[i] != KeyReg3[i]){
 8000330:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <getKeyInput+0x120>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000338:	492b      	ldr	r1, [pc, #172]	; (80003e8 <getKeyInput+0x130>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000340:	429a      	cmp	r2, r3
 8000342:	d019      	beq.n	8000378 <getKeyInput+0xc0>
		  KeyReg3[i] = KeyReg2[i];
 8000344:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <getKeyInput+0x120>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034c:	4926      	ldr	r1, [pc, #152]	; (80003e8 <getKeyInput+0x130>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000354:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <getKeyInput+0x130>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d12c      	bne.n	80003ba <getKeyInput+0x102>
			TimeOutForKeyPress[i] = 1000;
 8000360:	4a22      	ldr	r2, [pc, #136]	; (80003ec <getKeyInput+0x134>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			//subKeyProcess();
			button_flag[i] = 1;
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <getKeyInput+0x138>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2101      	movs	r1, #1
 8000372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000376:	e020      	b.n	80003ba <getKeyInput+0x102>
		  }

		}else{
			TimeOutForKeyPress[i] -= 10;
 8000378:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <getKeyInput+0x134>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	f1a3 020a 	sub.w	r2, r3, #10
 8000384:	4919      	ldr	r1, [pc, #100]	; (80003ec <getKeyInput+0x134>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <getKeyInput+0x134>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d110      	bne.n	80003ba <getKeyInput+0x102>
				TimeOutForKeyPress[i] = 500;
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <getKeyInput+0x134>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <getKeyInput+0x130>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d104      	bne.n	80003ba <getKeyInput+0x102>
					//subKeyProcess();
					button_flag[i] = 1;
 80003b0:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <getKeyInput+0x138>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2101      	movs	r1, #1
 80003b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTON; i++){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3301      	adds	r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	f77f af7e 	ble.w	80002c4 <getKeyInput+0xc>
				}
			}
		}
	  }
	}
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000006c 	.word	0x2000006c
 80003d8:	2000009c 	.word	0x2000009c
 80003dc:	20000060 	.word	0x20000060
 80003e0:	20000000 	.word	0x20000000
 80003e4:	2000000c 	.word	0x2000000c
 80003e8:	20000054 	.word	0x20000054
 80003ec:	20000078 	.word	0x20000078
 80003f0:	20000084 	.word	0x20000084

080003f4 <checkTime>:
 */

#include "fsm_traffic_light.h"


void checkTime(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	if(red_time != yel_time + green_time){
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <checkTime+0x2c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <checkTime+0x30>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	441a      	add	r2, r3
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <checkTime+0x34>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	429a      	cmp	r2, r3
 8000408:	d006      	beq.n	8000418 <checkTime+0x24>
		red_time = yel_time + green_time;
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <checkTime+0x2c>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <checkTime+0x30>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4413      	add	r3, r2
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <checkTime+0x34>)
 8000416:	6013      	str	r3, [r2, #0]
	}
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	2000001c 	.word	0x2000001c
 8000424:	20000018 	.word	0x20000018
 8000428:	20000014 	.word	0x20000014

0800042c <fsm_traffic>:

void fsm_traffic(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch(status){
 8000430:	4bba      	ldr	r3, [pc, #744]	; (800071c <fsm_traffic+0x2f0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	2b08      	cmp	r3, #8
 8000438:	f200 81a6 	bhi.w	8000788 <fsm_traffic+0x35c>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_traffic+0x18>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000469 	.word	0x08000469
 8000448:	08000517 	.word	0x08000517
 800044c:	08000559 	.word	0x08000559
 8000450:	08000495 	.word	0x08000495
 8000454:	080004d7 	.word	0x080004d7
 8000458:	080005c5 	.word	0x080005c5
 800045c:	08000663 	.word	0x08000663
 8000460:	080006ef 	.word	0x080006ef
 8000464:	08000599 	.word	0x08000599
		case INIT:
			checkTime();
 8000468:	f7ff ffc4 	bl	80003f4 <checkTime>
			status = RED_GREEN;
 800046c:	4bab      	ldr	r3, [pc, #684]	; (800071c <fsm_traffic+0x2f0>)
 800046e:	2204      	movs	r2, #4
 8000470:	601a      	str	r2, [r3, #0]
			setTimer(0,green_time);
 8000472:	4bab      	ldr	r3, [pc, #684]	; (8000720 <fsm_traffic+0x2f4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4619      	mov	r1, r3
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fc75 	bl	8000d68 <setTimer>
			if(isButtonPressed(0)) status = MAN_INIT;
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff ff00 	bl	8000284 <isButtonPressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	f000 8180 	beq.w	800078c <fsm_traffic+0x360>
 800048c:	4ba3      	ldr	r3, [pc, #652]	; (800071c <fsm_traffic+0x2f0>)
 800048e:	2209      	movs	r2, #9
 8000490:	601a      	str	r2, [r3, #0]
			break;
 8000492:	e17b      	b.n	800078c <fsm_traffic+0x360>

		case RED_GREEN:
			displayLed(RED);
 8000494:	206f      	movs	r0, #111	; 0x6f
 8000496:	f7ff fe65 	bl	8000164 <displayLed>
			displayLed2(GREEN);
 800049a:	f240 104d 	movw	r0, #333	; 0x14d
 800049e:	f7ff fea7 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 fc80 	bl	8000da8 <isTimerExpired>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <fsm_traffic+0x94>
				status = RED_YEL;
 80004ae:	4b9b      	ldr	r3, [pc, #620]	; (800071c <fsm_traffic+0x2f0>)
 80004b0:	2205      	movs	r2, #5
 80004b2:	601a      	str	r2, [r3, #0]
				setTimer(0,yel_time);
 80004b4:	4b9b      	ldr	r3, [pc, #620]	; (8000724 <fsm_traffic+0x2f8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fc54 	bl	8000d68 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff fedf 	bl	8000284 <isButtonPressed>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	f000 8161 	beq.w	8000790 <fsm_traffic+0x364>
 80004ce:	4b93      	ldr	r3, [pc, #588]	; (800071c <fsm_traffic+0x2f0>)
 80004d0:	2209      	movs	r2, #9
 80004d2:	601a      	str	r2, [r3, #0]
			break;
 80004d4:	e15c      	b.n	8000790 <fsm_traffic+0x364>

		case RED_YEL:
			displayLed(RED);
 80004d6:	206f      	movs	r0, #111	; 0x6f
 80004d8:	f7ff fe44 	bl	8000164 <displayLed>
			displayLed2(YEL);
 80004dc:	20de      	movs	r0, #222	; 0xde
 80004de:	f7ff fe87 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 fc60 	bl	8000da8 <isTimerExpired>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <fsm_traffic+0xd4>
				status = GREEN_RED;
 80004ee:	4b8b      	ldr	r3, [pc, #556]	; (800071c <fsm_traffic+0x2f0>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 80004f4:	4b8a      	ldr	r3, [pc, #552]	; (8000720 <fsm_traffic+0x2f4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fc34 	bl	8000d68 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff febf 	bl	8000284 <isButtonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	f000 8143 	beq.w	8000794 <fsm_traffic+0x368>
 800050e:	4b83      	ldr	r3, [pc, #524]	; (800071c <fsm_traffic+0x2f0>)
 8000510:	2209      	movs	r2, #9
 8000512:	601a      	str	r2, [r3, #0]
			break;
 8000514:	e13e      	b.n	8000794 <fsm_traffic+0x368>
		case GREEN_RED:
			displayLed(GREEN);
 8000516:	f240 104d 	movw	r0, #333	; 0x14d
 800051a:	f7ff fe23 	bl	8000164 <displayLed>
			displayLed2(RED);
 800051e:	206f      	movs	r0, #111	; 0x6f
 8000520:	f7ff fe66 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fc3f 	bl	8000da8 <isTimerExpired>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d008      	beq.n	8000542 <fsm_traffic+0x116>
				status = YEL_RED;
 8000530:	4b7a      	ldr	r3, [pc, #488]	; (800071c <fsm_traffic+0x2f0>)
 8000532:	2203      	movs	r2, #3
 8000534:	601a      	str	r2, [r3, #0]
				setTimer(0, yel_time);
 8000536:	4b7b      	ldr	r3, [pc, #492]	; (8000724 <fsm_traffic+0x2f8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4619      	mov	r1, r3
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fc13 	bl	8000d68 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff fe9e 	bl	8000284 <isButtonPressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	f000 8124 	beq.w	8000798 <fsm_traffic+0x36c>
 8000550:	4b72      	ldr	r3, [pc, #456]	; (800071c <fsm_traffic+0x2f0>)
 8000552:	2209      	movs	r2, #9
 8000554:	601a      	str	r2, [r3, #0]
			break;
 8000556:	e11f      	b.n	8000798 <fsm_traffic+0x36c>
		case YEL_RED:
			displayLed(YEL);
 8000558:	20de      	movs	r0, #222	; 0xde
 800055a:	f7ff fe03 	bl	8000164 <displayLed>
			displayLed2(RED);
 800055e:	206f      	movs	r0, #111	; 0x6f
 8000560:	f7ff fe46 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fc1f 	bl	8000da8 <isTimerExpired>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <fsm_traffic+0x156>
				status = RED_GREEN;
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <fsm_traffic+0x2f0>)
 8000572:	2204      	movs	r2, #4
 8000574:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 8000576:	4b6a      	ldr	r3, [pc, #424]	; (8000720 <fsm_traffic+0x2f4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fbf3 	bl	8000d68 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fe7e 	bl	8000284 <isButtonPressed>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	f000 8106 	beq.w	800079c <fsm_traffic+0x370>
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <fsm_traffic+0x2f0>)
 8000592:	2209      	movs	r2, #9
 8000594:	601a      	str	r2, [r3, #0]
			break;
 8000596:	e101      	b.n	800079c <fsm_traffic+0x370>

		case MAN_INIT:
			setTimer(0,BLINK_TIME);
 8000598:	2132      	movs	r1, #50	; 0x32
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fbe4 	bl	8000d68 <setTimer>
			status = MAN_RED;
 80005a0:	4b5e      	ldr	r3, [pc, #376]	; (800071c <fsm_traffic+0x2f0>)
 80005a2:	2206      	movs	r2, #6
 80005a4:	601a      	str	r2, [r3, #0]
			clearLed();
 80005a6:	f7ff fdd1 	bl	800014c <clearLed>
			temp[0] = red_time;
 80005aa:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <fsm_traffic+0x2fc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a5f      	ldr	r2, [pc, #380]	; (800072c <fsm_traffic+0x300>)
 80005b0:	6013      	str	r3, [r2, #0]
			temp[1] = yel_time;
 80005b2:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <fsm_traffic+0x2f8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a5d      	ldr	r2, [pc, #372]	; (800072c <fsm_traffic+0x300>)
 80005b8:	6053      	str	r3, [r2, #4]
			temp[2] = green_time;
 80005ba:	4b59      	ldr	r3, [pc, #356]	; (8000720 <fsm_traffic+0x2f4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a5b      	ldr	r2, [pc, #364]	; (800072c <fsm_traffic+0x300>)
 80005c0:	6093      	str	r3, [r2, #8]
			break;
 80005c2:	e0f2      	b.n	80007aa <fsm_traffic+0x37e>
		case MAN_RED:
			if(isButtonPressed(0)){
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fe5d 	bl	8000284 <isButtonPressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <fsm_traffic+0x1b8>
				status = MAN_YEL;
 80005d0:	4b52      	ldr	r3, [pc, #328]	; (800071c <fsm_traffic+0x2f0>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
				clearLed();
 80005d6:	f7ff fdb9 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 80005da:	2132      	movs	r1, #50	; 0x32
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fbc3 	bl	8000d68 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 80005e2:	e0dd      	b.n	80007a0 <fsm_traffic+0x374>
			else if(isButtonPressed(1)){
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff fe4d 	bl	8000284 <isButtonPressed>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d006      	beq.n	80005fe <fsm_traffic+0x1d2>
				temp[0] += 1000;
 80005f0:	4b4e      	ldr	r3, [pc, #312]	; (800072c <fsm_traffic+0x300>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005f8:	4a4c      	ldr	r2, [pc, #304]	; (800072c <fsm_traffic+0x300>)
 80005fa:	6013      	str	r3, [r2, #0]
			break;
 80005fc:	e0d0      	b.n	80007a0 <fsm_traffic+0x374>
			}else if(isButtonPressed(2)){
 80005fe:	2002      	movs	r0, #2
 8000600:	f7ff fe40 	bl	8000284 <isButtonPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00e      	beq.n	8000628 <fsm_traffic+0x1fc>
				red_time = temp[0];
 800060a:	4b48      	ldr	r3, [pc, #288]	; (800072c <fsm_traffic+0x300>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a46      	ldr	r2, [pc, #280]	; (8000728 <fsm_traffic+0x2fc>)
 8000610:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000612:	2100      	movs	r1, #0
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fba7 	bl	8000d68 <setTimer>
				displayLed(RED);
 800061a:	206f      	movs	r0, #111	; 0x6f
 800061c:	f7ff fda2 	bl	8000164 <displayLed>
				displayLed2(RED);
 8000620:	206f      	movs	r0, #111	; 0x6f
 8000622:	f7ff fde5 	bl	80001f0 <displayLed2>
			break;
 8000626:	e0bb      	b.n	80007a0 <fsm_traffic+0x374>
			else if(isTimerExpired(0)){
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fbbd 	bl	8000da8 <isTimerExpired>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80b5 	beq.w	80007a0 <fsm_traffic+0x374>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000636:	2110      	movs	r1, #16
 8000638:	483d      	ldr	r0, [pc, #244]	; (8000730 <fsm_traffic+0x304>)
 800063a:	f001 f8e0 	bl	80017fe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800063e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000642:	483b      	ldr	r0, [pc, #236]	; (8000730 <fsm_traffic+0x304>)
 8000644:	f001 f8db 	bl	80017fe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000648:	2108      	movs	r1, #8
 800064a:	4839      	ldr	r0, [pc, #228]	; (8000730 <fsm_traffic+0x304>)
 800064c:	f001 f8d7 	bl	80017fe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000650:	2120      	movs	r1, #32
 8000652:	4837      	ldr	r0, [pc, #220]	; (8000730 <fsm_traffic+0x304>)
 8000654:	f001 f8d3 	bl	80017fe <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	2000      	movs	r0, #0
 800065c:	f000 fb84 	bl	8000d68 <setTimer>
			break;
 8000660:	e09e      	b.n	80007a0 <fsm_traffic+0x374>

		case MAN_YEL:
			if(isButtonPressed(0)){
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fe0e 	bl	8000284 <isButtonPressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d009      	beq.n	8000682 <fsm_traffic+0x256>
				status = MAN_GREEN;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <fsm_traffic+0x2f0>)
 8000670:	2208      	movs	r2, #8
 8000672:	601a      	str	r2, [r3, #0]
				clearLed();
 8000674:	f7ff fd6a 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 8000678:	2132      	movs	r1, #50	; 0x32
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fb74 	bl	8000d68 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);

				setTimer(0, BLINK_TIME);
			}
			break;
 8000680:	e090      	b.n	80007a4 <fsm_traffic+0x378>
			}else if(isButtonPressed(1)){
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff fdfe 	bl	8000284 <isButtonPressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <fsm_traffic+0x270>
				temp[1] += 1000;
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <fsm_traffic+0x300>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <fsm_traffic+0x300>)
 8000698:	6053      	str	r3, [r2, #4]
			break;
 800069a:	e083      	b.n	80007a4 <fsm_traffic+0x378>
			}else if(isButtonPressed(2)){
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff fdf1 	bl	8000284 <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00e      	beq.n	80006c6 <fsm_traffic+0x29a>
				yel_time = temp[1];
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <fsm_traffic+0x300>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <fsm_traffic+0x2f8>)
 80006ae:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 fb58 	bl	8000d68 <setTimer>
				displayLed(YEL);
 80006b8:	20de      	movs	r0, #222	; 0xde
 80006ba:	f7ff fd53 	bl	8000164 <displayLed>
				displayLed2(YEL);
 80006be:	20de      	movs	r0, #222	; 0xde
 80006c0:	f7ff fd96 	bl	80001f0 <displayLed2>
			break;
 80006c4:	e06e      	b.n	80007a4 <fsm_traffic+0x378>
			else if(isTimerExpired(0)){
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fb6e 	bl	8000da8 <isTimerExpired>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d068      	beq.n	80007a4 <fsm_traffic+0x378>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	4816      	ldr	r0, [pc, #88]	; (8000730 <fsm_traffic+0x304>)
 80006d8:	f001 f891 	bl	80017fe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80006dc:	2120      	movs	r1, #32
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <fsm_traffic+0x304>)
 80006e0:	f001 f88d 	bl	80017fe <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 80006e4:	2132      	movs	r1, #50	; 0x32
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fb3e 	bl	8000d68 <setTimer>
			break;
 80006ec:	e05a      	b.n	80007a4 <fsm_traffic+0x378>

		case MAN_GREEN:
			if(isButtonPressed(0)){
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fdc8 	bl	8000284 <isButtonPressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <fsm_traffic+0x2d6>
				status = INIT;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fsm_traffic+0x2f0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			else if(isTimerExpired(0)){
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 8000700:	e052      	b.n	80007a8 <fsm_traffic+0x37c>
			}else if(isButtonPressed(1)){
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fdbe 	bl	8000284 <isButtonPressed>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d012      	beq.n	8000734 <fsm_traffic+0x308>
				temp[2] += 1000;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <fsm_traffic+0x300>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <fsm_traffic+0x300>)
 8000718:	6093      	str	r3, [r2, #8]
			break;
 800071a:	e045      	b.n	80007a8 <fsm_traffic+0x37c>
 800071c:	20000048 	.word	0x20000048
 8000720:	20000018 	.word	0x20000018
 8000724:	2000001c 	.word	0x2000001c
 8000728:	20000014 	.word	0x20000014
 800072c:	200000b4 	.word	0x200000b4
 8000730:	40010c00 	.word	0x40010c00
			}else if(isButtonPressed(2)){
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fda5 	bl	8000284 <isButtonPressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d010      	beq.n	8000762 <fsm_traffic+0x336>
				green_time = temp[2];
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <fsm_traffic+0x384>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <fsm_traffic+0x388>)
 8000746:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000748:	2100      	movs	r1, #0
 800074a:	2000      	movs	r0, #0
 800074c:	f000 fb0c 	bl	8000d68 <setTimer>
				displayLed(GREEN);
 8000750:	f240 104d 	movw	r0, #333	; 0x14d
 8000754:	f7ff fd06 	bl	8000164 <displayLed>
				displayLed2(GREEN);
 8000758:	f240 104d 	movw	r0, #333	; 0x14d
 800075c:	f7ff fd48 	bl	80001f0 <displayLed2>
			break;
 8000760:	e022      	b.n	80007a8 <fsm_traffic+0x37c>
			else if(isTimerExpired(0)){
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fb20 	bl	8000da8 <isTimerExpired>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d01c      	beq.n	80007a8 <fsm_traffic+0x37c>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800076e:	2110      	movs	r1, #16
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <fsm_traffic+0x38c>)
 8000772:	f001 f844 	bl	80017fe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000776:	2108      	movs	r1, #8
 8000778:	480f      	ldr	r0, [pc, #60]	; (80007b8 <fsm_traffic+0x38c>)
 800077a:	f001 f840 	bl	80017fe <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 800077e:	2132      	movs	r1, #50	; 0x32
 8000780:	2000      	movs	r0, #0
 8000782:	f000 faf1 	bl	8000d68 <setTimer>
			break;
 8000786:	e00f      	b.n	80007a8 <fsm_traffic+0x37c>

		default:
				break;
 8000788:	bf00      	nop
 800078a:	e00e      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 800078c:	bf00      	nop
 800078e:	e00c      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000790:	bf00      	nop
 8000792:	e00a      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000794:	bf00      	nop
 8000796:	e008      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000798:	bf00      	nop
 800079a:	e006      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 800079c:	bf00      	nop
 800079e:	e004      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a0:	bf00      	nop
 80007a2:	e002      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a4:	bf00      	nop
 80007a6:	e000      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a8:	bf00      	nop
		}
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000b4 	.word	0x200000b4
 80007b4:	20000018 	.word	0x20000018
 80007b8:	40010c00 	.word	0x40010c00

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fc48 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f82a 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f8e0 	bl	800098c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007cc:	f000 f8b4 	bl	8000938 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007d0:	f000 f866 	bl	80008a0 <MX_TIM2_Init>
//  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <main+0x4c>)
 80007d6:	f001 fcab 	bl	8002130 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80007da:	f000 f987 	bl	8000aec <SCH_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <main+0x50>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(getKeyInput, 0, 10);
 80007e4:	220a      	movs	r2, #10
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <main+0x54>)
 80007ea:	f000 f98f 	bl	8000b0c <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 10);
 80007ee:	220a      	movs	r2, #10
 80007f0:	2100      	movs	r1, #0
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <main+0x58>)
 80007f4:	f000 f98a 	bl	8000b0c <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic, 0, 10);
 80007f8:	220a      	movs	r2, #10
 80007fa:	2100      	movs	r1, #0
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <main+0x5c>)
 80007fe:	f000 f985 	bl	8000b0c <SCH_Add_Task>
  while (1)
  {
//	  fsm_traffic();
	  SCH_Dispatch_Tasks();
 8000802:	f000 fa2b 	bl	8000c5c <SCH_Dispatch_Tasks>
 8000806:	e7fc      	b.n	8000802 <main+0x46>
 8000808:	20000114 	.word	0x20000114
 800080c:	20000048 	.word	0x20000048
 8000810:	080002b9 	.word	0x080002b9
 8000814:	08000ddd 	.word	0x08000ddd
 8000818:	0800042d 	.word	0x0800042d

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b090      	sub	sp, #64	; 0x40
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	2228      	movs	r2, #40	; 0x28
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fd78 	bl	8003320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000842:	2301      	movs	r3, #1
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	2310      	movs	r3, #16
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800084e:	2300      	movs	r3, #0
 8000850:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000852:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f809 	bl	8001874 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000868:	f000 f93a 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2102      	movs	r1, #2
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fa74 	bl	8001d74 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000892:	f000 f925 	bl	8000ae0 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3740      	adds	r7, #64	; 0x40
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_TIM2_Init+0x94>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_TIM2_Init+0x94>)
 80008c6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM2_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_TIM2_Init+0x94>)
 80008d4:	2209      	movs	r2, #9
 80008d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_TIM2_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_TIM2_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_TIM2_Init+0x94>)
 80008e6:	f001 fbd3 	bl	8002090 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008f0:	f000 f8f6 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_TIM2_Init+0x94>)
 8000902:	f001 fd57 	bl	80023b4 <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800090c:	f000 f8e8 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_TIM2_Init+0x94>)
 800091e:	f001 ff39 	bl	8002794 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f8da 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000114 	.word	0x20000114

08000938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART2_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000944:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000970:	f001 ff80 	bl	8002874 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f8b1 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000015c 	.word	0x2000015c
 8000988:	40004400 	.word	0x40004400

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a0:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a44      	ldr	r2, [pc, #272]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0310 	and.w	r3, r3, #16
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b8:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a3e      	ldr	r2, [pc, #248]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009be:	f043 0320 	orr.w	r3, r3, #32
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0320 	and.w	r3, r3, #32
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0x12c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000a06:	482d      	ldr	r0, [pc, #180]	; (8000abc <MX_GPIO_Init+0x130>)
 8000a08:	f000 fee1 	bl	80017ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a12:	482b      	ldr	r0, [pc, #172]	; (8000ac0 <MX_GPIO_Init+0x134>)
 8000a14:	f000 fedb 	bl	80017ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x138>)
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a2e:	f000 fd33 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON4_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000a32:	2313      	movs	r3, #19
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	481d      	ldr	r0, [pc, #116]	; (8000abc <MX_GPIO_Init+0x130>)
 8000a46:	f000 fd27 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin;
 8000a4a:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4816      	ldr	r0, [pc, #88]	; (8000abc <MX_GPIO_Init+0x130>)
 8000a64:	f000 fd18 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_GPIO_Init+0x134>)
 8000a7c:	f000 fd0c 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000a80:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_GPIO_Init+0x134>)
 8000a9a:	f000 fcfd 	bl	8001498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2028      	movs	r0, #40	; 0x28
 8000aa4:	f000 fc0f 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa8:	2028      	movs	r0, #40	; 0x28
 8000aaa:	f000 fc28 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	10110000 	.word	0x10110000
 8000ac8:	40011000 	.word	0x40011000

08000acc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000ad4:	f000 f8b4 	bl	8000c40 <SCH_Update>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
uint32_t global_timer = 0;

void SCH_Init(void) {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    current_index_task = 0;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SCH_Init+0x18>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
    global_timer = 0;
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SCH_Init+0x1c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	2000004c 	.word	0x2000004c
 8000b08:	20000050 	.word	0x20000050

08000b0c <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
    if (current_index_task < SCH_MAX_TASKS) {
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b27      	cmp	r3, #39	; 0x27
 8000b1e:	d84a      	bhi.n	8000bb6 <SCH_Add_Task+0xaa>
        SCH_tasks_G[current_index_task].pTask = pFunction;
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <SCH_Add_Task+0xb8>)
 8000b28:	460b      	mov	r3, r1
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <SCH_Add_Task+0xbc>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	491f      	ldr	r1, [pc, #124]	; (8000bc4 <SCH_Add_Task+0xb8>)
 8000b48:	4603      	mov	r3, r0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4403      	add	r3, r0
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	3304      	adds	r3, #4
 8000b54:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <SCH_Add_Task+0xbc>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	08da      	lsrs	r2, r3, #3
 8000b66:	4917      	ldr	r1, [pc, #92]	; (8000bc4 <SCH_Add_Task+0xb8>)
 8000b68:	4603      	mov	r3, r0
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4403      	add	r3, r0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	440b      	add	r3, r1
 8000b72:	3308      	adds	r3, #8
 8000b74:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <SCH_Add_Task+0xb8>)
 8000b7e:	460b      	mov	r3, r1
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	440b      	add	r3, r1
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	330c      	adds	r3, #12
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <SCH_Add_Task+0xb8>)
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3310      	adds	r3, #16
 8000ba8:	6018      	str	r0, [r3, #0]

        ++current_index_task;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <SCH_Add_Task+0xb4>)
 8000bb4:	701a      	strb	r2, [r3, #0]
    }
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	2000004c 	.word	0x2000004c
 8000bc4:	200001a4 	.word	0x200001a4
 8000bc8:	cccccccd 	.word	0xcccccccd

08000bcc <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t ID) {
 8000bcc:	b4b0      	push	{r4, r5, r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    if (current_index_task > ID) {
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <SCH_Delete_Task+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d226      	bcs.n	8000c2e <SCH_Delete_Task+0x62>
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e017      	b.n	8000c16 <SCH_Delete_Task+0x4a>
            SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <SCH_Delete_Task+0x70>)
 8000bec:	68f9      	ldr	r1, [r7, #12]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4418      	add	r0, r3
 8000bf8:	4910      	ldr	r1, [pc, #64]	; (8000c3c <SCH_Delete_Task+0x70>)
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	4604      	mov	r4, r0
 8000c06:	461d      	mov	r5, r3
 8000c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	6023      	str	r3, [r4, #0]
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <SCH_Delete_Task+0x6c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbe1      	blt.n	8000be6 <SCH_Delete_Task+0x1a>
        }
        --current_index_task;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SCH_Delete_Task+0x6c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <SCH_Delete_Task+0x6c>)
 8000c2c:	701a      	strb	r2, [r3, #0]
    }
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bcb0      	pop	{r4, r5, r7}
 8000c36:	4770      	bx	lr
 8000c38:	2000004c 	.word	0x2000004c
 8000c3c:	200001a4 	.word	0x200001a4

08000c40 <SCH_Update>:

void SCH_Update(void) {
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	++global_timer;
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SCH_Update+0x18>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <SCH_Update+0x18>)
 8000c4c:	6013      	str	r3, [r2, #0]
    if (global_timer > UINT32_MAX) {
    	global_timer = 0;
    }
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000050 	.word	0x20000050

08000c5c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; ++i) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	e06e      	b.n	8000d46 <SCH_Dispatch_Tasks+0xea>
        if (global_timer >= SCH_tasks_G[i].Delay) {//Check if task execute
 8000c68:	493c      	ldr	r1, [pc, #240]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	3304      	adds	r3, #4
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <SCH_Dispatch_Tasks+0x104>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d840      	bhi.n	8000d04 <SCH_Dispatch_Tasks+0xa8>
            ++SCH_tasks_G[i].RunMe;
 8000c82:	4936      	ldr	r1, [pc, #216]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	330c      	adds	r3, #12
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2d8      	uxtb	r0, r3
 8000c98:	4930      	ldr	r1, [pc, #192]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	330c      	adds	r3, #12
 8000ca8:	4602      	mov	r2, r0
 8000caa:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period > 0) {
 8000cac:	492b      	ldr	r1, [pc, #172]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	3308      	adds	r3, #8
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d01c      	beq.n	8000cfc <SCH_Dispatch_Tasks+0xa0>
            	if (global_timer + SCH_tasks_G[i].Period <= UINT32_MAX) {
            		SCH_tasks_G[i].Delay += SCH_tasks_G[i].Period;
 8000cc2:	4926      	ldr	r1, [pc, #152]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4403      	add	r3, r0
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4419      	add	r1, r3
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4403      	add	r3, r0
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	6019      	str	r1, [r3, #0]
 8000cfa:	e003      	b.n	8000d04 <SCH_Dispatch_Tasks+0xa8>
            		SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period - (UINT32_MAX - SCH_tasks_G[i].Delay);
            		--SCH_tasks_G[i].RunMe;
            	}
            }
            else {
                SCH_Delete_Task(i);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff64 	bl	8000bcc <SCH_Delete_Task>
            }
        }
        if (SCH_tasks_G[i].RunMe > 0) {
 8000d04:	4915      	ldr	r1, [pc, #84]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	330c      	adds	r3, #12
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d012      	beq.n	8000d40 <SCH_Dispatch_Tasks+0xe4>
            SCH_tasks_G[i].RunMe = 0;
 8000d1a:	4910      	ldr	r1, [pc, #64]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	330c      	adds	r3, #12
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
            (*SCH_tasks_G[i].pTask)();
 8000d2e:	490b      	ldr	r1, [pc, #44]	; (8000d5c <SCH_Dispatch_Tasks+0x100>)
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4798      	blx	r3
    for (int i = 0; i < current_index_task; ++i) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3301      	adds	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <SCH_Dispatch_Tasks+0x108>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	db8a      	blt.n	8000c68 <SCH_Dispatch_Tasks+0xc>
        }
    }
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001a4 	.word	0x200001a4
 8000d60:	20000050 	.word	0x20000050
 8000d64:	2000004c 	.word	0x2000004c

08000d68 <setTimer>:
#include "global.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value/TICK;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <setTimer+0x34>)
 8000d76:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7a:	1092      	asrs	r2, r2, #2
 8000d7c:	17db      	asrs	r3, r3, #31
 8000d7e:	1ad2      	subs	r2, r2, r3
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <setTimer+0x38>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <setTimer+0x3c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	66666667 	.word	0x66666667
 8000da0:	200004c4 	.word	0x200004c4
 8000da4:	200004f0 	.word	0x200004f0

08000da8 <isTimerExpired>:

int isTimerExpired(int index) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <isTimerExpired+0x30>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d106      	bne.n	8000dca <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <isTimerExpired+0x30>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <isTimerExpired+0x24>
	}
	return 0;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200004f0 	.word	0x200004f0

08000ddc <timerRun>:

void timerRun() {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e01c      	b.n	8000e22 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <timerRun+0x58>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	dd13      	ble.n	8000e1c <timerRun+0x40>
			--timer_counter[i];
 8000df4:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <timerRun+0x58>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <timerRun+0x58>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <timerRun+0x58>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	dc04      	bgt.n	8000e1c <timerRun+0x40>
				timer_flag[i] = 1;
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <timerRun+0x5c>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2101      	movs	r1, #1
 8000e18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0a      	cmp	r3, #10
 8000e26:	dddf      	ble.n	8000de8 <timerRun+0xc>
			}
		}
	}
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	200004c4 	.word	0x200004c4
 8000e38:	200004f0 	.word	0x200004f0

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_MspInit+0x60>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_MspInit+0x60>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d113      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f000 f9f9 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed4:	201c      	movs	r0, #28
 8000ed6:	f000 fa12 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x80>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d12b      	bne.n	8000f60 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	61d3      	str	r3, [r2, #28]
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f38:	230c      	movs	r3, #12
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f4c:	f000 faa4 	bl	8001498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2026      	movs	r0, #38	; 0x26
 8000f56:	f000 f9b6 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f5a:	2026      	movs	r0, #38	; 0x26
 8000f5c:	f000 f9cf 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f891 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM2_IRQHandler+0x10>)
 8000fca:	f001 f903 	bl	80021d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000114 	.word	0x20000114

08000fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <USART2_IRQHandler+0x10>)
 8000fde:	f001 fc99 	bl	8002914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000015c 	.word	0x2000015c

08000fec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ff0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ff4:	f000 fc1c 	bl	8001830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001008:	f7ff fff8 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100e:	490c      	ldr	r1, [pc, #48]	; (8001040 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001010:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001024:	4c09      	ldr	r4, [pc, #36]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f002 f951 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff fbc1 	bl	80007bc <main>
  bx lr
 800103a:	4770      	bx	lr
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001044:	0800337c 	.word	0x0800337c
  ldr r2, =_sbss
 8001048:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800104c:	20000520 	.word	0x20000520

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x28>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f923 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fee4 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f93b 	bl	800131a <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f903 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000020 	.word	0x20000020
 80010d8:	20000028 	.word	0x20000028
 80010dc:	20000024 	.word	0x20000024

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_IncTick+0x20>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000028 	.word	0x20000028
 8001100:	2000051c 	.word	0x2000051c

08001104 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	2000051c 	.word	0x2000051c

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4906      	ldr	r1, [pc, #24]	; (80011b0 <__NVIC_EnableIRQ+0x34>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff2d 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff42 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff35 	bl	800117c <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d008      	beq.n	800135c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2204      	movs	r2, #4
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e020      	b.n	800139e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 020e 	bic.w	r2, r2, #14
 800136a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d005      	beq.n	80013cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e051      	b.n	8001470 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 020e 	bic.w	r2, r2, #14
 80013da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a22      	ldr	r2, [pc, #136]	; (800147c <HAL_DMA_Abort_IT+0xd4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d029      	beq.n	800144a <HAL_DMA_Abort_IT+0xa2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <HAL_DMA_Abort_IT+0xd8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d022      	beq.n	8001446 <HAL_DMA_Abort_IT+0x9e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <HAL_DMA_Abort_IT+0xdc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01a      	beq.n	8001440 <HAL_DMA_Abort_IT+0x98>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_DMA_Abort_IT+0xe0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d012      	beq.n	800143a <HAL_DMA_Abort_IT+0x92>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_DMA_Abort_IT+0xe4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00a      	beq.n	8001434 <HAL_DMA_Abort_IT+0x8c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_DMA_Abort_IT+0xe8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d102      	bne.n	800142e <HAL_DMA_Abort_IT+0x86>
 8001428:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800142c:	e00e      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800142e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001432:	e00b      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	e008      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	e005      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	e002      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001446:	2310      	movs	r3, #16
 8001448:	e000      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800144a:	2301      	movs	r3, #1
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_DMA_Abort_IT+0xec>)
 800144e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
    } 
  }
  return status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020008 	.word	0x40020008
 8001480:	4002001c 	.word	0x4002001c
 8001484:	40020030 	.word	0x40020030
 8001488:	40020044 	.word	0x40020044
 800148c:	40020058 	.word	0x40020058
 8001490:	4002006c 	.word	0x4002006c
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e169      	b.n	8001780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ac:	2201      	movs	r2, #1
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8158 	bne.w	800177a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a9a      	ldr	r2, [pc, #616]	; (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d05e      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014d4:	4a98      	ldr	r2, [pc, #608]	; (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d875      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014da:	4a98      	ldr	r2, [pc, #608]	; (800173c <HAL_GPIO_Init+0x2a4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d058      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014e0:	4a96      	ldr	r2, [pc, #600]	; (800173c <HAL_GPIO_Init+0x2a4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d86f      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014e6:	4a96      	ldr	r2, [pc, #600]	; (8001740 <HAL_GPIO_Init+0x2a8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d052      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014ec:	4a94      	ldr	r2, [pc, #592]	; (8001740 <HAL_GPIO_Init+0x2a8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d869      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014f2:	4a94      	ldr	r2, [pc, #592]	; (8001744 <HAL_GPIO_Init+0x2ac>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d04c      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014f8:	4a92      	ldr	r2, [pc, #584]	; (8001744 <HAL_GPIO_Init+0x2ac>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d863      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014fe:	4a92      	ldr	r2, [pc, #584]	; (8001748 <HAL_GPIO_Init+0x2b0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d046      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 8001504:	4a90      	ldr	r2, [pc, #576]	; (8001748 <HAL_GPIO_Init+0x2b0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d85d      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 800150a:	2b12      	cmp	r3, #18
 800150c:	d82a      	bhi.n	8001564 <HAL_GPIO_Init+0xcc>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d859      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <HAL_GPIO_Init+0x80>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001593 	.word	0x08001593
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800157f 	.word	0x0800157f
 8001524:	080015c1 	.word	0x080015c1
 8001528:	080015c7 	.word	0x080015c7
 800152c:	080015c7 	.word	0x080015c7
 8001530:	080015c7 	.word	0x080015c7
 8001534:	080015c7 	.word	0x080015c7
 8001538:	080015c7 	.word	0x080015c7
 800153c:	080015c7 	.word	0x080015c7
 8001540:	080015c7 	.word	0x080015c7
 8001544:	080015c7 	.word	0x080015c7
 8001548:	080015c7 	.word	0x080015c7
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015c7 	.word	0x080015c7
 8001554:	080015c7 	.word	0x080015c7
 8001558:	080015c7 	.word	0x080015c7
 800155c:	08001575 	.word	0x08001575
 8001560:	08001589 	.word	0x08001589
 8001564:	4a79      	ldr	r2, [pc, #484]	; (800174c <HAL_GPIO_Init+0x2b4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e029      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e024      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01f      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e01a      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e013      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e009      	b.n	80015c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          break;
 80015c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d801      	bhi.n	80015d2 <HAL_GPIO_Init+0x13a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_Init+0x13e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	d802      	bhi.n	80015e4 <HAL_GPIO_Init+0x14c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x152>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	3b08      	subs	r3, #8
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	210f      	movs	r1, #15
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80b1 	beq.w	800177a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001618:	4b4d      	ldr	r3, [pc, #308]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001630:	4a48      	ldr	r2, [pc, #288]	; (8001754 <HAL_GPIO_Init+0x2bc>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a40      	ldr	r2, [pc, #256]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d013      	beq.n	8001684 <HAL_GPIO_Init+0x1ec>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a3f      	ldr	r2, [pc, #252]	; (800175c <HAL_GPIO_Init+0x2c4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00d      	beq.n	8001680 <HAL_GPIO_Init+0x1e8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3e      	ldr	r2, [pc, #248]	; (8001760 <HAL_GPIO_Init+0x2c8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d007      	beq.n	800167c <HAL_GPIO_Init+0x1e4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3d      	ldr	r2, [pc, #244]	; (8001764 <HAL_GPIO_Init+0x2cc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_GPIO_Init+0x1e0>
 8001674:	2303      	movs	r3, #3
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001678:	2304      	movs	r3, #4
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001684:	2300      	movs	r3, #0
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001696:	492f      	ldr	r1, [pc, #188]	; (8001754 <HAL_GPIO_Init+0x2bc>)
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	492c      	ldr	r1, [pc, #176]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4928      	ldr	r1, [pc, #160]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4922      	ldr	r1, [pc, #136]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	491e      	ldr	r1, [pc, #120]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4918      	ldr	r1, [pc, #96]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4914      	ldr	r1, [pc, #80]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d021      	beq.n	800176c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	490e      	ldr	r1, [pc, #56]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e021      	b.n	800177a <HAL_GPIO_Init+0x2e2>
 8001736:	bf00      	nop
 8001738:	10320000 	.word	0x10320000
 800173c:	10310000 	.word	0x10310000
 8001740:	10220000 	.word	0x10220000
 8001744:	10210000 	.word	0x10210000
 8001748:	10120000 	.word	0x10120000
 800174c:	10110000 	.word	0x10110000
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	40010800 	.word	0x40010800
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40011000 	.word	0x40011000
 8001764:	40011400 	.word	0x40011400
 8001768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_GPIO_Init+0x304>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	43db      	mvns	r3, r3
 8001774:	4909      	ldr	r1, [pc, #36]	; (800179c <HAL_GPIO_Init+0x304>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	3301      	adds	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f ae8e 	bne.w	80014ac <HAL_GPIO_Init+0x14>
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	372c      	adds	r7, #44	; 0x2c
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
 80017da:	4613      	mov	r3, r2
 80017dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017de:	787b      	ldrb	r3, [r7, #1]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ea:	e003      	b.n	80017f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	041a      	lsls	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	611a      	str	r2, [r3, #16]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001810:	887a      	ldrh	r2, [r7, #2]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4013      	ands	r3, r2
 8001816:	041a      	lsls	r2, r3, #16
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43d9      	mvns	r1, r3
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	400b      	ands	r3, r1
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f806 	bl	8001860 <HAL_GPIO_EXTI_Callback>
  }
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e26c      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b04      	cmp	r3, #4
 800189e:	d00c      	beq.n	80018ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a0:	4b8f      	ldr	r3, [pc, #572]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d112      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
 80018ac:	4b8c      	ldr	r3, [pc, #560]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d10b      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ba:	4b89      	ldr	r3, [pc, #548]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x12c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d168      	bne.n	80019a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e246      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x76>
 80018dc:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a7f      	ldr	r2, [pc, #508]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02e      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x98>
 80018f2:	4b7b      	ldr	r3, [pc, #492]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7a      	ldr	r2, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a77      	ldr	r2, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0xbc>
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a71      	ldr	r2, [pc, #452]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 8001930:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6a      	ldr	r2, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a67      	ldr	r2, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fbd8 	bl	8001104 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fbd4 	bl	8001104 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1fa      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xe4>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fbc4 	bl	8001104 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fbc0 	bl	8001104 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1e6      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x10c>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d063      	beq.n	8001a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
 80019c6:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1ba      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4939      	ldr	r1, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fb79 	bl	8001104 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fb75 	bl	8001104 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e19b      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4927      	ldr	r1, [pc, #156]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb58 	bl	8001104 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fb54 	bl	8001104 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e17a      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d03a      	beq.n	8001af8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fb38 	bl	8001104 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fb34 	bl	8001104 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e15a      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 facc 	bl	8002054 <RCC_Delay>
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fb1e 	bl	8001104 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aca:	e00f      	b.n	8001aec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fb1a 	bl	8001104 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d908      	bls.n	8001aec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e140      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	42420000 	.word	0x42420000
 8001ae8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b9e      	ldr	r3, [pc, #632]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e9      	bne.n	8001acc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a6 	beq.w	8001c52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b97      	ldr	r3, [pc, #604]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10d      	bne.n	8001b32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b94      	ldr	r3, [pc, #592]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a93      	ldr	r2, [pc, #588]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b8e      	ldr	r3, [pc, #568]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a8a      	ldr	r2, [pc, #552]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fadb 	bl	8001104 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff fad7 	bl	8001104 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	; 0x64
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0fd      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x312>
 8001b78:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a7a      	ldr	r2, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e02d      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x334>
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	e01c      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x356>
 8001bb0:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a6c      	ldr	r2, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fa8b 	bl	8001104 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fa87 	bl	8001104 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0ab      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ee      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x37e>
 8001c14:	e014      	b.n	8001c40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fa75 	bl	8001104 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fa71 	bl	8001104 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e095      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8081 	beq.w	8001d5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d061      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d146      	bne.n	8001cfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fa45 	bl	8001104 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fa41 	bl	8001104 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e067      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	492d      	ldr	r1, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a19      	ldr	r1, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	4927      	ldr	r1, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fa15 	bl	8001104 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff fa11 	bl	8001104 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e037      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x46a>
 8001cfc:	e02f      	b.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f9fe 	bl	8001104 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f9fa 	bl	8001104 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e020      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x498>
 8001d2a:	e018      	b.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42420060 	.word	0x42420060

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4965      	ldr	r1, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d040      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e073      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4936      	ldr	r1, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7ff f94e 	bl	8001104 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff f94a 	bl	8001104 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e053      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f8ac 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08003348 	.word	0x08003348
 8001f40:	20000020 	.word	0x20000020
 8001f44:	20000024 	.word	0x20000024

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x30>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x36>
 8001f76:	e027      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	e027      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0c5b      	lsrs	r3, r3, #17
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001faa:	fb02 f203 	mul.w	r2, r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e004      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	613b      	str	r3, [r7, #16]
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	613b      	str	r3, [r7, #16]
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	693b      	ldr	r3, [r7, #16]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	08003360 	.word	0x08003360
 8001fe8:	08003370 	.word	0x08003370
 8001fec:	003d0900 	.word	0x003d0900

08001ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000020 	.word	0x20000020

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff2 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	08003358 	.word	0x08003358

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08003358 	.word	0x08003358

08002054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <RCC_Delay+0x34>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <RCC_Delay+0x38>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0a5b      	lsrs	r3, r3, #9
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002070:	bf00      	nop
  }
  while (Delay --);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <RCC_Delay+0x1c>
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000020 	.word	0x20000020
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e041      	b.n	8002126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fef2 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f000 fa5c 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e03a      	b.n	80021be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_TIM_Base_Start_IT+0x98>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x58>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002172:	d009      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x58>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_TIM_Base_Start_IT+0x9c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x58>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d111      	bne.n	80021ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d010      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	e007      	b.n	80021bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40012c00 	.word	0x40012c00
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40000800 	.word	0x40000800

080021d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0202 	mvn.w	r2, #2
 8002208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f998 	bl	8002554 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f98b 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f99a 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d020      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f972 	bl	8002554 <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f965 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f974 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f94c 	bl	8002554 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f93f 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f94e 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d020      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0210 	mvn.w	r2, #16
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2208      	movs	r2, #8
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f926 	bl	8002554 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f919 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f928 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00c      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0201 	mvn.w	r2, #1
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fbc6 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa7f 	bl	8002862 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8f8 	bl	8002578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0220 	mvn.w	r2, #32
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa52 	bl	8002850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_TIM_ConfigClockSource+0x1c>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e0b4      	b.n	800253a <HAL_TIM_ConfigClockSource+0x186>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002408:	d03e      	beq.n	8002488 <HAL_TIM_ConfigClockSource+0xd4>
 800240a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240e:	f200 8087 	bhi.w	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002416:	f000 8086 	beq.w	8002526 <HAL_TIM_ConfigClockSource+0x172>
 800241a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241e:	d87f      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002420:	2b70      	cmp	r3, #112	; 0x70
 8002422:	d01a      	beq.n	800245a <HAL_TIM_ConfigClockSource+0xa6>
 8002424:	2b70      	cmp	r3, #112	; 0x70
 8002426:	d87b      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002428:	2b60      	cmp	r3, #96	; 0x60
 800242a:	d050      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x11a>
 800242c:	2b60      	cmp	r3, #96	; 0x60
 800242e:	d877      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	2b50      	cmp	r3, #80	; 0x50
 8002432:	d03c      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0xfa>
 8002434:	2b50      	cmp	r3, #80	; 0x50
 8002436:	d873      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d058      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x13a>
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d86f      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b30      	cmp	r3, #48	; 0x30
 8002442:	d064      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x15a>
 8002444:	2b30      	cmp	r3, #48	; 0x30
 8002446:	d86b      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b20      	cmp	r3, #32
 800244a:	d060      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x15a>
 800244c:	2b20      	cmp	r3, #32
 800244e:	d867      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b00      	cmp	r3, #0
 8002452:	d05c      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x15a>
 8002454:	2b10      	cmp	r3, #16
 8002456:	d05a      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x15a>
 8002458:	e062      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f000 f974 	bl	8002756 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800247c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	609a      	str	r2, [r3, #8]
      break;
 8002486:	e04f      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f000 f95d 	bl	8002756 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024aa:	609a      	str	r2, [r3, #8]
      break;
 80024ac:	e03c      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f000 f8d4 	bl	8002668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2150      	movs	r1, #80	; 0x50
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f92b 	bl	8002722 <TIM_ITRx_SetConfig>
      break;
 80024cc:	e02c      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	461a      	mov	r2, r3
 80024dc:	f000 f8f2 	bl	80026c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2160      	movs	r1, #96	; 0x60
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f91b 	bl	8002722 <TIM_ITRx_SetConfig>
      break;
 80024ec:	e01c      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 f8b4 	bl	8002668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f90b 	bl	8002722 <TIM_ITRx_SetConfig>
      break;
 800250c:	e00c      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	4610      	mov	r0, r2
 800251a:	f000 f902 	bl	8002722 <TIM_ITRx_SetConfig>
      break;
 800251e:	e003      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      break;
 8002524:	e000      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
	...

0800258c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a2f      	ldr	r2, [pc, #188]	; (800265c <TIM_Base_SetConfig+0xd0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00b      	beq.n	80025bc <TIM_Base_SetConfig+0x30>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025aa:	d007      	beq.n	80025bc <TIM_Base_SetConfig+0x30>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <TIM_Base_SetConfig+0xd4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d003      	beq.n	80025bc <TIM_Base_SetConfig+0x30>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <TIM_Base_SetConfig+0xd8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d108      	bne.n	80025ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a22      	ldr	r2, [pc, #136]	; (800265c <TIM_Base_SetConfig+0xd0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00b      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025dc:	d007      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <TIM_Base_SetConfig+0xd4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d003      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <TIM_Base_SetConfig+0xd8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d108      	bne.n	8002600 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a0d      	ldr	r2, [pc, #52]	; (800265c <TIM_Base_SetConfig+0xd0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d103      	bne.n	8002634 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f023 0201 	bic.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
  }
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800

08002668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	f023 0201 	bic.w	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f023 030a 	bic.w	r3, r3, #10
 80026a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	621a      	str	r2, [r3, #32]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f023 0210 	bic.w	r2, r3, #16
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	031b      	lsls	r3, r3, #12
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002700:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	621a      	str	r2, [r3, #32]
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	f043 0307 	orr.w	r3, r3, #7
 8002744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002756:	b480      	push	{r7}
 8002758:	b087      	sub	sp, #28
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002770:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	021a      	lsls	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	431a      	orrs	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4313      	orrs	r3, r2
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	609a      	str	r2, [r3, #8]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e046      	b.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d009      	beq.n	800280e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a10      	ldr	r2, [pc, #64]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10c      	bne.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4313      	orrs	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800

08002850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e042      	b.n	800290c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fb24 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fc7f 	bl	80031bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0ba      	sub	sp, #232	; 0xe8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_UART_IRQHandler+0x66>
 8002966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fb63 	bl	800303e <UART_Receive_IT>
      return;
 8002978:	e25b      	b.n	8002e32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800297a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80de 	beq.w	8002b40 <HAL_UART_IRQHandler+0x22c>
 8002984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80d1 	beq.w	8002b40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_UART_IRQHandler+0xae>
 80029aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_UART_IRQHandler+0xd2>
 80029ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_UART_IRQHandler+0xf6>
 80029f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <HAL_UART_IRQHandler+0x126>
 8002a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0208 	orr.w	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 81f2 	beq.w	8002e28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_UART_IRQHandler+0x14e>
 8002a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 faee 	bl	800303e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <HAL_UART_IRQHandler+0x17a>
 8002a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d04f      	beq.n	8002b2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9f8 	bl	8002e84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d041      	beq.n	8002b26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1d9      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d013      	beq.n	8002b1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	4a7e      	ldr	r2, [pc, #504]	; (8002cf4 <HAL_UART_IRQHandler+0x3e0>)
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fc50 	bl	80013a8 <HAL_DMA_Abort_IT>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	e00e      	b.n	8002b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f99c 	bl	8002e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e00a      	b.n	8002b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f998 	bl	8002e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	e006      	b.n	8002b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f994 	bl	8002e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002b3a:	e175      	b.n	8002e28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3c:	bf00      	nop
    return;
 8002b3e:	e173      	b.n	8002e28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	f040 814f 	bne.w	8002de8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8148 	beq.w	8002de8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8141 	beq.w	8002de8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80b6 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8145 	beq.w	8002e2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f080 813e 	bcs.w	8002e2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	f000 8088 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bd2:	e853 3f00 	ldrex	r3, [r3]
 8002bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bf0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c00:	e841 2300 	strex	r3, r2, [r1]
 8002c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1d9      	bne.n	8002bc4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3314      	adds	r3, #20
 8002c16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
 8002c1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3314      	adds	r3, #20
 8002c30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e1      	bne.n	8002c10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3314      	adds	r3, #20
 8002c52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e3      	bne.n	8002c4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca4:	f023 0310 	bic.w	r3, r3, #16
 8002ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cb8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e3      	bne.n	8002c92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe fb2f 	bl	8001332 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8bf 	bl	8002e6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf0:	e09c      	b.n	8002e2c <HAL_UART_IRQHandler+0x518>
 8002cf2:	bf00      	nop
 8002cf4:	08002f49 	.word	0x08002f49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 808e 	beq.w	8002e30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8089 	beq.w	8002e30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d42:	647a      	str	r2, [r7, #68]	; 0x44
 8002d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e3      	bne.n	8002d1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	623b      	str	r3, [r7, #32]
   return(result);
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e3      	bne.n	8002d56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0310 	bic.w	r3, r3, #16
 8002db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002dc0:	61fa      	str	r2, [r7, #28]
 8002dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	69b9      	ldr	r1, [r7, #24]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e3      	bne.n	8002d9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f844 	bl	8002e6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002de6:	e023      	b.n	8002e30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <HAL_UART_IRQHandler+0x4f4>
 8002df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8b5 	bl	8002f70 <UART_Transmit_IT>
    return;
 8002e06:	e014      	b.n	8002e32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <HAL_UART_IRQHandler+0x51e>
 8002e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f8f4 	bl	800300e <UART_EndTransmit_IT>
    return;
 8002e26:	e004      	b.n	8002e32 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e28:	bf00      	nop
 8002e2a:	e002      	b.n	8002e32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e2c:	bf00      	nop
 8002e2e:	e000      	b.n	8002e32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e30:	bf00      	nop
  }
}
 8002e32:	37e8      	adds	r7, #232	; 0xe8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b095      	sub	sp, #84	; 0x54
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eac:	643a      	str	r2, [r7, #64]	; 0x40
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e5      	bne.n	8002ec0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d119      	bne.n	8002f30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 0310 	bic.w	r3, r3, #16
 8002f12:	647b      	str	r3, [r7, #68]	; 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f1c:	61ba      	str	r2, [r7, #24]
 8002f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6979      	ldr	r1, [r7, #20]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e5      	bne.n	8002efc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f3e:	bf00      	nop
 8002f40:	3754      	adds	r7, #84	; 0x54
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff ff7a 	bl	8002e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b21      	cmp	r3, #33	; 0x21
 8002f82:	d13e      	bne.n	8003002 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d114      	bne.n	8002fb8 <UART_Transmit_IT+0x48>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d110      	bne.n	8002fb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002faa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	621a      	str	r2, [r3, #32]
 8002fb6:	e008      	b.n	8002fca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	1c59      	adds	r1, r3, #1
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6211      	str	r1, [r2, #32]
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ffc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003024:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff02 	bl	8002e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b08c      	sub	sp, #48	; 0x30
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b22      	cmp	r3, #34	; 0x22
 8003050:	f040 80ae 	bne.w	80031b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305c:	d117      	bne.n	800308e <UART_Receive_IT+0x50>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d113      	bne.n	800308e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307c:	b29a      	uxth	r2, r3
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	e026      	b.n	80030dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003094:	2300      	movs	r3, #0
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a0:	d007      	beq.n	80030b2 <UART_Receive_IT+0x74>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <UART_Receive_IT+0x82>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e008      	b.n	80030d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4619      	mov	r1, r3
 80030ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d15d      	bne.n	80031ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0220 	bic.w	r2, r2, #32
 80030fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800310e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	2b01      	cmp	r3, #1
 8003134:	d135      	bne.n	80031a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	330c      	adds	r3, #12
 8003142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	613b      	str	r3, [r7, #16]
   return(result);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f023 0310 	bic.w	r3, r3, #16
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	623a      	str	r2, [r7, #32]
 800315e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	69f9      	ldr	r1, [r7, #28]
 8003162:	6a3a      	ldr	r2, [r7, #32]
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	61bb      	str	r3, [r7, #24]
   return(result);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e5      	bne.n	800313c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b10      	cmp	r3, #16
 800317c:	d10a      	bne.n	8003194 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe67 	bl	8002e6e <HAL_UARTEx_RxEventCallback>
 80031a0:	e002      	b.n	80031a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fe51 	bl	8002e4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e002      	b.n	80031b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3730      	adds	r7, #48	; 0x30
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f6:	f023 030c 	bic.w	r3, r3, #12
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	430b      	orrs	r3, r1
 8003202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <UART_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe ff02 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	e002      	b.n	8003232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7fe feea 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8003230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009a      	lsls	r2, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	0119      	lsls	r1, r3, #4
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <UART_SetConfig+0x118>)
 800326a:	fba3 0302 	umull	r0, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2064      	movs	r0, #100	; 0x64
 8003272:	fb00 f303 	mul.w	r3, r0, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	3332      	adds	r3, #50	; 0x32
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <UART_SetConfig+0x118>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	4419      	add	r1, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <UART_SetConfig+0x118>)
 80032a2:	fba3 0302 	umull	r0, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	440a      	add	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40013800 	.word	0x40013800
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	2600      	movs	r6, #0
 80032dc:	4d0c      	ldr	r5, [pc, #48]	; (8003310 <__libc_init_array+0x38>)
 80032de:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032e0:	1b64      	subs	r4, r4, r5
 80032e2:	10a4      	asrs	r4, r4, #2
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	f000 f822 	bl	8003330 <_init>
 80032ec:	2600      	movs	r6, #0
 80032ee:	4d0a      	ldr	r5, [pc, #40]	; (8003318 <__libc_init_array+0x40>)
 80032f0:	4c0a      	ldr	r4, [pc, #40]	; (800331c <__libc_init_array+0x44>)
 80032f2:	1b64      	subs	r4, r4, r5
 80032f4:	10a4      	asrs	r4, r4, #2
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	f855 3b04 	ldr.w	r3, [r5], #4
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	08003374 	.word	0x08003374
 8003314:	08003374 	.word	0x08003374
 8003318:	08003374 	.word	0x08003374
 800331c:	08003378 	.word	0x08003378

08003320 <memset>:
 8003320:	4603      	mov	r3, r0
 8003322:	4402      	add	r2, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <_init>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	bf00      	nop
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr

0800333c <_fini>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	bf00      	nop
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr
