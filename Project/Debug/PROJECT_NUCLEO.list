
PROJECT_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800496c  0800496c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800496c  0800496c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000090  08004a04  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08004a04  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123a4  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287a  00000000  00000000  0003245d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00034cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019213  00000000  00000000  00036c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146b3  00000000  00000000  0004fe33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2d5  00000000  00000000  000644e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f27bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d4  00000000  00000000  000f2810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080048dc 	.word	0x080048dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080048dc 	.word	0x080048dc

0800014c <clearLed>:
 *  Created on: Nov 14, 2024
 *      Author: admin
 */
#include <RYG_LED.h>

void clearLed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	displayLed(-1);
 8000150:	f04f 30ff 	mov.w	r0, #4294967295
 8000154:	f000 f806 	bl	8000164 <displayLed>
	displayLed2(-1);
 8000158:	f04f 30ff 	mov.w	r0, #4294967295
 800015c:	f000 f848 	bl	80001f0 <displayLed2>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <displayLed>:

void displayLed(int state){
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	switch(state){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f240 124d 	movw	r2, #333	; 0x14d
 8000172:	4293      	cmp	r3, r2
 8000174:	d020      	beq.n	80001b8 <displayLed+0x54>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 800017c:	da27      	bge.n	80001ce <displayLed+0x6a>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b6f      	cmp	r3, #111	; 0x6f
 8000182:	d003      	beq.n	800018c <displayLed+0x28>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2bde      	cmp	r3, #222	; 0xde
 8000188:	d00b      	beq.n	80001a2 <displayLed+0x3e>
 800018a:	e020      	b.n	80001ce <displayLed+0x6a>
		case RED:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2108      	movs	r1, #8
 8000190:	4816      	ldr	r0, [pc, #88]	; (80001ec <displayLed+0x88>)
 8000192:	f001 fd16 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	2120      	movs	r1, #32
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <displayLed+0x88>)
 800019c:	f001 fd11 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 80001a0:	e020      	b.n	80001e4 <displayLed+0x80>
		case YEL:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2108      	movs	r1, #8
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <displayLed+0x88>)
 80001a8:	f001 fd0b 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2120      	movs	r1, #32
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <displayLed+0x88>)
 80001b2:	f001 fd06 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 80001b6:	e015      	b.n	80001e4 <displayLed+0x80>
		case GREEN:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2108      	movs	r1, #8
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <displayLed+0x88>)
 80001be:	f001 fd00 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2120      	movs	r1, #32
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <displayLed+0x88>)
 80001c8:	f001 fcfb 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 80001cc:	e00a      	b.n	80001e4 <displayLed+0x80>
		default:
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2108      	movs	r1, #8
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <displayLed+0x88>)
 80001d4:	f001 fcf5 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2120      	movs	r1, #32
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <displayLed+0x88>)
 80001de:	f001 fcf0 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 80001e2:	bf00      	nop
	}
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <displayLed2>:
void displayLed2(int state){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	switch(state){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f240 124d 	movw	r2, #333	; 0x14d
 80001fe:	4293      	cmp	r3, r2
 8000200:	d022      	beq.n	8000248 <displayLed2+0x58>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8000208:	da2a      	bge.n	8000260 <displayLed2+0x70>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b6f      	cmp	r3, #111	; 0x6f
 800020e:	d003      	beq.n	8000218 <displayLed2+0x28>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2bde      	cmp	r3, #222	; 0xde
 8000214:	d00c      	beq.n	8000230 <displayLed2+0x40>
 8000216:	e023      	b.n	8000260 <displayLed2+0x70>
		case RED:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2110      	movs	r1, #16
 800021c:	4818      	ldr	r0, [pc, #96]	; (8000280 <displayLed2+0x90>)
 800021e:	f001 fcd0 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000228:	4815      	ldr	r0, [pc, #84]	; (8000280 <displayLed2+0x90>)
 800022a:	f001 fcca 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 800022e:	e023      	b.n	8000278 <displayLed2+0x88>
		case YEL:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4812      	ldr	r0, [pc, #72]	; (8000280 <displayLed2+0x90>)
 8000236:	f001 fcc4 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	480f      	ldr	r0, [pc, #60]	; (8000280 <displayLed2+0x90>)
 8000242:	f001 fcbe 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 8000246:	e017      	b.n	8000278 <displayLed2+0x88>
		case GREEN:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <displayLed2+0x90>)
 800024e:	f001 fcb8 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4809      	ldr	r0, [pc, #36]	; (8000280 <displayLed2+0x90>)
 800025a:	f001 fcb2 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 800025e:	e00b      	b.n	8000278 <displayLed2+0x88>
		default:
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2110      	movs	r1, #16
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <displayLed2+0x90>)
 8000266:	f001 fcac 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <displayLed2+0x90>)
 8000272:	f001 fca6 	bl	8001bc2 <HAL_GPIO_WritePin>
			break;
 8000276:	bf00      	nop
	}
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010c00 	.word	0x40010c00

08000284 <isButtonPressed>:


GPIO_TypeDef* button_ports[] = {BUTTON1_GPIO_Port,BUTTON2_GPIO_Port,BUTTON3_GPIO_Port};
uint16_t button_pins[] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

int isButtonPressed( int index ){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 800028c:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <isButtonPressed+0x30>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d106      	bne.n	80002a6 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <isButtonPressed+0x30>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2100      	movs	r1, #0
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e000      	b.n	80002a8 <isButtonPressed+0x24>
	}
	return 0;
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	200000f4 	.word	0x200000f4

080002b8 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTON; i++){
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	e07d      	b.n	80003c0 <getKeyInput+0x108>
		KeyReg2[i] = KeyReg1[i];
 80002c4:	4a43      	ldr	r2, [pc, #268]	; (80003d4 <getKeyInput+0x11c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002cc:	4942      	ldr	r1, [pc, #264]	; (80003d8 <getKeyInput+0x120>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80002d4:	4a41      	ldr	r2, [pc, #260]	; (80003dc <getKeyInput+0x124>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002dc:	493d      	ldr	r1, [pc, #244]	; (80003d4 <getKeyInput+0x11c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  KeyReg0[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 80002e4:	4a3e      	ldr	r2, [pc, #248]	; (80003e0 <getKeyInput+0x128>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ec:	493d      	ldr	r1, [pc, #244]	; (80003e4 <getKeyInput+0x12c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002f4:	4619      	mov	r1, r3
 80002f6:	4610      	mov	r0, r2
 80002f8:	f001 fc4c 	bl	8001b94 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4619      	mov	r1, r3
 8000300:	4a36      	ldr	r2, [pc, #216]	; (80003dc <getKeyInput+0x124>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000308:	4a32      	ldr	r2, [pc, #200]	; (80003d4 <getKeyInput+0x11c>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4932      	ldr	r1, [pc, #200]	; (80003dc <getKeyInput+0x124>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d14e      	bne.n	80003ba <getKeyInput+0x102>
 800031c:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <getKeyInput+0x11c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	492c      	ldr	r1, [pc, #176]	; (80003d8 <getKeyInput+0x120>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800032c:	429a      	cmp	r2, r3
 800032e:	d144      	bne.n	80003ba <getKeyInput+0x102>
		if (KeyReg2[i] != KeyReg3[i]){
 8000330:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <getKeyInput+0x120>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000338:	492b      	ldr	r1, [pc, #172]	; (80003e8 <getKeyInput+0x130>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000340:	429a      	cmp	r2, r3
 8000342:	d019      	beq.n	8000378 <getKeyInput+0xc0>
		  KeyReg3[i] = KeyReg2[i];
 8000344:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <getKeyInput+0x120>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034c:	4926      	ldr	r1, [pc, #152]	; (80003e8 <getKeyInput+0x130>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000354:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <getKeyInput+0x130>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d12c      	bne.n	80003ba <getKeyInput+0x102>
			TimeOutForKeyPress[i] = 1000;
 8000360:	4a22      	ldr	r2, [pc, #136]	; (80003ec <getKeyInput+0x134>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			//subKeyProcess();
			button_flag[i] = 1;
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <getKeyInput+0x138>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2101      	movs	r1, #1
 8000372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000376:	e020      	b.n	80003ba <getKeyInput+0x102>
		  }

		}else{
			TimeOutForKeyPress[i] -= 10;
 8000378:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <getKeyInput+0x134>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	f1a3 020a 	sub.w	r2, r3, #10
 8000384:	4919      	ldr	r1, [pc, #100]	; (80003ec <getKeyInput+0x134>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <getKeyInput+0x134>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d110      	bne.n	80003ba <getKeyInput+0x102>
				TimeOutForKeyPress[i] = 500;
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <getKeyInput+0x134>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <getKeyInput+0x130>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d104      	bne.n	80003ba <getKeyInput+0x102>
					//subKeyProcess();
					button_flag[i] = 1;
 80003b0:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <getKeyInput+0x138>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2101      	movs	r1, #1
 80003b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTON; i++){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3301      	adds	r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	f77f af7e 	ble.w	80002c4 <getKeyInput+0xc>
				}
			}
		}
	  }
	}
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200000dc 	.word	0x200000dc
 80003d8:	2000010c 	.word	0x2000010c
 80003dc:	200000d0 	.word	0x200000d0
 80003e0:	20000000 	.word	0x20000000
 80003e4:	2000000c 	.word	0x2000000c
 80003e8:	200000c4 	.word	0x200000c4
 80003ec:	200000e8 	.word	0x200000e8
 80003f0:	200000f4 	.word	0x200000f4

080003f4 <checkTime>:
 */

#include "fsm_traffic_light.h"


void checkTime(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	if(red_time != yel_time + green_time){
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <checkTime+0x2c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <checkTime+0x30>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	441a      	add	r2, r3
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <checkTime+0x34>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	429a      	cmp	r2, r3
 8000408:	d006      	beq.n	8000418 <checkTime+0x24>
		red_time = yel_time + green_time;
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <checkTime+0x2c>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <checkTime+0x30>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4413      	add	r3, r2
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <checkTime+0x34>)
 8000416:	6013      	str	r3, [r2, #0]
	}
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	2000001c 	.word	0x2000001c
 8000424:	20000018 	.word	0x20000018
 8000428:	20000014 	.word	0x20000014

0800042c <fsm_traffic>:

void fsm_traffic(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch(status){
 8000430:	4bba      	ldr	r3, [pc, #744]	; (800071c <fsm_traffic+0x2f0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	2b08      	cmp	r3, #8
 8000438:	f200 81a6 	bhi.w	8000788 <fsm_traffic+0x35c>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_traffic+0x18>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000469 	.word	0x08000469
 8000448:	08000517 	.word	0x08000517
 800044c:	08000559 	.word	0x08000559
 8000450:	08000495 	.word	0x08000495
 8000454:	080004d7 	.word	0x080004d7
 8000458:	080005c5 	.word	0x080005c5
 800045c:	08000663 	.word	0x08000663
 8000460:	080006ef 	.word	0x080006ef
 8000464:	08000599 	.word	0x08000599
		case INIT:
			checkTime();
 8000468:	f7ff ffc4 	bl	80003f4 <checkTime>
			status = RED_GREEN;
 800046c:	4bab      	ldr	r3, [pc, #684]	; (800071c <fsm_traffic+0x2f0>)
 800046e:	2204      	movs	r2, #4
 8000470:	601a      	str	r2, [r3, #0]
			setTimer(0,green_time);
 8000472:	4bab      	ldr	r3, [pc, #684]	; (8000720 <fsm_traffic+0x2f4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4619      	mov	r1, r3
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fdc5 	bl	8001008 <setTimer>
			if(isButtonPressed(0)) status = MAN_INIT;
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff ff00 	bl	8000284 <isButtonPressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	f000 8180 	beq.w	800078c <fsm_traffic+0x360>
 800048c:	4ba3      	ldr	r3, [pc, #652]	; (800071c <fsm_traffic+0x2f0>)
 800048e:	2209      	movs	r2, #9
 8000490:	601a      	str	r2, [r3, #0]
			break;
 8000492:	e17b      	b.n	800078c <fsm_traffic+0x360>

		case RED_GREEN:
			displayLed(RED);
 8000494:	206f      	movs	r0, #111	; 0x6f
 8000496:	f7ff fe65 	bl	8000164 <displayLed>
			displayLed2(GREEN);
 800049a:	f240 104d 	movw	r0, #333	; 0x14d
 800049e:	f7ff fea7 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 fdd0 	bl	8001048 <isTimerExpired>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <fsm_traffic+0x94>
				status = RED_YEL;
 80004ae:	4b9b      	ldr	r3, [pc, #620]	; (800071c <fsm_traffic+0x2f0>)
 80004b0:	2205      	movs	r2, #5
 80004b2:	601a      	str	r2, [r3, #0]
				setTimer(0,yel_time);
 80004b4:	4b9b      	ldr	r3, [pc, #620]	; (8000724 <fsm_traffic+0x2f8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fda4 	bl	8001008 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff fedf 	bl	8000284 <isButtonPressed>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	f000 8161 	beq.w	8000790 <fsm_traffic+0x364>
 80004ce:	4b93      	ldr	r3, [pc, #588]	; (800071c <fsm_traffic+0x2f0>)
 80004d0:	2209      	movs	r2, #9
 80004d2:	601a      	str	r2, [r3, #0]
			break;
 80004d4:	e15c      	b.n	8000790 <fsm_traffic+0x364>

		case RED_YEL:
			displayLed(RED);
 80004d6:	206f      	movs	r0, #111	; 0x6f
 80004d8:	f7ff fe44 	bl	8000164 <displayLed>
			displayLed2(YEL);
 80004dc:	20de      	movs	r0, #222	; 0xde
 80004de:	f7ff fe87 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 fdb0 	bl	8001048 <isTimerExpired>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <fsm_traffic+0xd4>
				status = GREEN_RED;
 80004ee:	4b8b      	ldr	r3, [pc, #556]	; (800071c <fsm_traffic+0x2f0>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 80004f4:	4b8a      	ldr	r3, [pc, #552]	; (8000720 <fsm_traffic+0x2f4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fd84 	bl	8001008 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff febf 	bl	8000284 <isButtonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	f000 8143 	beq.w	8000794 <fsm_traffic+0x368>
 800050e:	4b83      	ldr	r3, [pc, #524]	; (800071c <fsm_traffic+0x2f0>)
 8000510:	2209      	movs	r2, #9
 8000512:	601a      	str	r2, [r3, #0]
			break;
 8000514:	e13e      	b.n	8000794 <fsm_traffic+0x368>
		case GREEN_RED:
			displayLed(GREEN);
 8000516:	f240 104d 	movw	r0, #333	; 0x14d
 800051a:	f7ff fe23 	bl	8000164 <displayLed>
			displayLed2(RED);
 800051e:	206f      	movs	r0, #111	; 0x6f
 8000520:	f7ff fe66 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fd8f 	bl	8001048 <isTimerExpired>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d008      	beq.n	8000542 <fsm_traffic+0x116>
				status = YEL_RED;
 8000530:	4b7a      	ldr	r3, [pc, #488]	; (800071c <fsm_traffic+0x2f0>)
 8000532:	2203      	movs	r2, #3
 8000534:	601a      	str	r2, [r3, #0]
				setTimer(0, yel_time);
 8000536:	4b7b      	ldr	r3, [pc, #492]	; (8000724 <fsm_traffic+0x2f8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4619      	mov	r1, r3
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fd63 	bl	8001008 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff fe9e 	bl	8000284 <isButtonPressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	f000 8124 	beq.w	8000798 <fsm_traffic+0x36c>
 8000550:	4b72      	ldr	r3, [pc, #456]	; (800071c <fsm_traffic+0x2f0>)
 8000552:	2209      	movs	r2, #9
 8000554:	601a      	str	r2, [r3, #0]
			break;
 8000556:	e11f      	b.n	8000798 <fsm_traffic+0x36c>
		case YEL_RED:
			displayLed(YEL);
 8000558:	20de      	movs	r0, #222	; 0xde
 800055a:	f7ff fe03 	bl	8000164 <displayLed>
			displayLed2(RED);
 800055e:	206f      	movs	r0, #111	; 0x6f
 8000560:	f7ff fe46 	bl	80001f0 <displayLed2>
			if(isTimerExpired(0)){
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fd6f 	bl	8001048 <isTimerExpired>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <fsm_traffic+0x156>
				status = RED_GREEN;
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <fsm_traffic+0x2f0>)
 8000572:	2204      	movs	r2, #4
 8000574:	601a      	str	r2, [r3, #0]
				setTimer(0, green_time);
 8000576:	4b6a      	ldr	r3, [pc, #424]	; (8000720 <fsm_traffic+0x2f4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fd43 	bl	8001008 <setTimer>
			}
			if(isButtonPressed(0)) status = MAN_INIT;
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fe7e 	bl	8000284 <isButtonPressed>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	f000 8106 	beq.w	800079c <fsm_traffic+0x370>
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <fsm_traffic+0x2f0>)
 8000592:	2209      	movs	r2, #9
 8000594:	601a      	str	r2, [r3, #0]
			break;
 8000596:	e101      	b.n	800079c <fsm_traffic+0x370>

		case MAN_INIT:
			setTimer(0,BLINK_TIME);
 8000598:	2132      	movs	r1, #50	; 0x32
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fd34 	bl	8001008 <setTimer>
			status = MAN_RED;
 80005a0:	4b5e      	ldr	r3, [pc, #376]	; (800071c <fsm_traffic+0x2f0>)
 80005a2:	2206      	movs	r2, #6
 80005a4:	601a      	str	r2, [r3, #0]
			clearLed();
 80005a6:	f7ff fdd1 	bl	800014c <clearLed>
			temp[0] = red_time;
 80005aa:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <fsm_traffic+0x2fc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a5f      	ldr	r2, [pc, #380]	; (800072c <fsm_traffic+0x300>)
 80005b0:	6013      	str	r3, [r2, #0]
			temp[1] = yel_time;
 80005b2:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <fsm_traffic+0x2f8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a5d      	ldr	r2, [pc, #372]	; (800072c <fsm_traffic+0x300>)
 80005b8:	6053      	str	r3, [r2, #4]
			temp[2] = green_time;
 80005ba:	4b59      	ldr	r3, [pc, #356]	; (8000720 <fsm_traffic+0x2f4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a5b      	ldr	r2, [pc, #364]	; (800072c <fsm_traffic+0x300>)
 80005c0:	6093      	str	r3, [r2, #8]
			break;
 80005c2:	e0f2      	b.n	80007aa <fsm_traffic+0x37e>
		case MAN_RED:
			if(isButtonPressed(0)){
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fe5d 	bl	8000284 <isButtonPressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <fsm_traffic+0x1b8>
				status = MAN_YEL;
 80005d0:	4b52      	ldr	r3, [pc, #328]	; (800071c <fsm_traffic+0x2f0>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
				clearLed();
 80005d6:	f7ff fdb9 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 80005da:	2132      	movs	r1, #50	; 0x32
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fd13 	bl	8001008 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 80005e2:	e0dd      	b.n	80007a0 <fsm_traffic+0x374>
			else if(isButtonPressed(1)){
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff fe4d 	bl	8000284 <isButtonPressed>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d006      	beq.n	80005fe <fsm_traffic+0x1d2>
				temp[0] += 1000;
 80005f0:	4b4e      	ldr	r3, [pc, #312]	; (800072c <fsm_traffic+0x300>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005f8:	4a4c      	ldr	r2, [pc, #304]	; (800072c <fsm_traffic+0x300>)
 80005fa:	6013      	str	r3, [r2, #0]
			break;
 80005fc:	e0d0      	b.n	80007a0 <fsm_traffic+0x374>
			}else if(isButtonPressed(2)){
 80005fe:	2002      	movs	r0, #2
 8000600:	f7ff fe40 	bl	8000284 <isButtonPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00e      	beq.n	8000628 <fsm_traffic+0x1fc>
				red_time = temp[0];
 800060a:	4b48      	ldr	r3, [pc, #288]	; (800072c <fsm_traffic+0x300>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a46      	ldr	r2, [pc, #280]	; (8000728 <fsm_traffic+0x2fc>)
 8000610:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000612:	2100      	movs	r1, #0
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fcf7 	bl	8001008 <setTimer>
				displayLed(RED);
 800061a:	206f      	movs	r0, #111	; 0x6f
 800061c:	f7ff fda2 	bl	8000164 <displayLed>
				displayLed2(RED);
 8000620:	206f      	movs	r0, #111	; 0x6f
 8000622:	f7ff fde5 	bl	80001f0 <displayLed2>
			break;
 8000626:	e0bb      	b.n	80007a0 <fsm_traffic+0x374>
			else if(isTimerExpired(0)){
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fd0d 	bl	8001048 <isTimerExpired>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80b5 	beq.w	80007a0 <fsm_traffic+0x374>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000636:	2110      	movs	r1, #16
 8000638:	483d      	ldr	r0, [pc, #244]	; (8000730 <fsm_traffic+0x304>)
 800063a:	f001 fada 	bl	8001bf2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800063e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000642:	483b      	ldr	r0, [pc, #236]	; (8000730 <fsm_traffic+0x304>)
 8000644:	f001 fad5 	bl	8001bf2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000648:	2108      	movs	r1, #8
 800064a:	4839      	ldr	r0, [pc, #228]	; (8000730 <fsm_traffic+0x304>)
 800064c:	f001 fad1 	bl	8001bf2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000650:	2120      	movs	r1, #32
 8000652:	4837      	ldr	r0, [pc, #220]	; (8000730 <fsm_traffic+0x304>)
 8000654:	f001 facd 	bl	8001bf2 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	2000      	movs	r0, #0
 800065c:	f000 fcd4 	bl	8001008 <setTimer>
			break;
 8000660:	e09e      	b.n	80007a0 <fsm_traffic+0x374>

		case MAN_YEL:
			if(isButtonPressed(0)){
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fe0e 	bl	8000284 <isButtonPressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d009      	beq.n	8000682 <fsm_traffic+0x256>
				status = MAN_GREEN;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <fsm_traffic+0x2f0>)
 8000670:	2208      	movs	r2, #8
 8000672:	601a      	str	r2, [r3, #0]
				clearLed();
 8000674:	f7ff fd6a 	bl	800014c <clearLed>
				setTimer(0, BLINK_TIME);
 8000678:	2132      	movs	r1, #50	; 0x32
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fcc4 	bl	8001008 <setTimer>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);

				setTimer(0, BLINK_TIME);
			}
			break;
 8000680:	e090      	b.n	80007a4 <fsm_traffic+0x378>
			}else if(isButtonPressed(1)){
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff fdfe 	bl	8000284 <isButtonPressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <fsm_traffic+0x270>
				temp[1] += 1000;
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <fsm_traffic+0x300>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <fsm_traffic+0x300>)
 8000698:	6053      	str	r3, [r2, #4]
			break;
 800069a:	e083      	b.n	80007a4 <fsm_traffic+0x378>
			}else if(isButtonPressed(2)){
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff fdf1 	bl	8000284 <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00e      	beq.n	80006c6 <fsm_traffic+0x29a>
				yel_time = temp[1];
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <fsm_traffic+0x300>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <fsm_traffic+0x2f8>)
 80006ae:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 fca8 	bl	8001008 <setTimer>
				displayLed(YEL);
 80006b8:	20de      	movs	r0, #222	; 0xde
 80006ba:	f7ff fd53 	bl	8000164 <displayLed>
				displayLed2(YEL);
 80006be:	20de      	movs	r0, #222	; 0xde
 80006c0:	f7ff fd96 	bl	80001f0 <displayLed2>
			break;
 80006c4:	e06e      	b.n	80007a4 <fsm_traffic+0x378>
			else if(isTimerExpired(0)){
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fcbe 	bl	8001048 <isTimerExpired>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d068      	beq.n	80007a4 <fsm_traffic+0x378>
				HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	4816      	ldr	r0, [pc, #88]	; (8000730 <fsm_traffic+0x304>)
 80006d8:	f001 fa8b 	bl	8001bf2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80006dc:	2120      	movs	r1, #32
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <fsm_traffic+0x304>)
 80006e0:	f001 fa87 	bl	8001bf2 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 80006e4:	2132      	movs	r1, #50	; 0x32
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fc8e 	bl	8001008 <setTimer>
			break;
 80006ec:	e05a      	b.n	80007a4 <fsm_traffic+0x378>

		case MAN_GREEN:
			if(isButtonPressed(0)){
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fdc8 	bl	8000284 <isButtonPressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <fsm_traffic+0x2d6>
				status = INIT;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fsm_traffic+0x2f0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			else if(isTimerExpired(0)){
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
				setTimer(0, BLINK_TIME);
			}
			break;
 8000700:	e052      	b.n	80007a8 <fsm_traffic+0x37c>
			}else if(isButtonPressed(1)){
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fdbe 	bl	8000284 <isButtonPressed>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d012      	beq.n	8000734 <fsm_traffic+0x308>
				temp[2] += 1000;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <fsm_traffic+0x300>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <fsm_traffic+0x300>)
 8000718:	6093      	str	r3, [r2, #8]
			break;
 800071a:	e045      	b.n	80007a8 <fsm_traffic+0x37c>
 800071c:	200000ac 	.word	0x200000ac
 8000720:	20000018 	.word	0x20000018
 8000724:	2000001c 	.word	0x2000001c
 8000728:	20000014 	.word	0x20000014
 800072c:	20000124 	.word	0x20000124
 8000730:	40010c00 	.word	0x40010c00
			}else if(isButtonPressed(2)){
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fda5 	bl	8000284 <isButtonPressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d010      	beq.n	8000762 <fsm_traffic+0x336>
				green_time = temp[2];
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <fsm_traffic+0x384>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <fsm_traffic+0x388>)
 8000746:	6013      	str	r3, [r2, #0]
				setTimer(0, 0);
 8000748:	2100      	movs	r1, #0
 800074a:	2000      	movs	r0, #0
 800074c:	f000 fc5c 	bl	8001008 <setTimer>
				displayLed(GREEN);
 8000750:	f240 104d 	movw	r0, #333	; 0x14d
 8000754:	f7ff fd06 	bl	8000164 <displayLed>
				displayLed2(GREEN);
 8000758:	f240 104d 	movw	r0, #333	; 0x14d
 800075c:	f7ff fd48 	bl	80001f0 <displayLed2>
			break;
 8000760:	e022      	b.n	80007a8 <fsm_traffic+0x37c>
			else if(isTimerExpired(0)){
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fc70 	bl	8001048 <isTimerExpired>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d01c      	beq.n	80007a8 <fsm_traffic+0x37c>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800076e:	2110      	movs	r1, #16
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <fsm_traffic+0x38c>)
 8000772:	f001 fa3e 	bl	8001bf2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000776:	2108      	movs	r1, #8
 8000778:	480f      	ldr	r0, [pc, #60]	; (80007b8 <fsm_traffic+0x38c>)
 800077a:	f001 fa3a 	bl	8001bf2 <HAL_GPIO_TogglePin>
				setTimer(0, BLINK_TIME);
 800077e:	2132      	movs	r1, #50	; 0x32
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fc41 	bl	8001008 <setTimer>
			break;
 8000786:	e00f      	b.n	80007a8 <fsm_traffic+0x37c>

		default:
				break;
 8000788:	bf00      	nop
 800078a:	e00e      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 800078c:	bf00      	nop
 800078e:	e00c      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000790:	bf00      	nop
 8000792:	e00a      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000794:	bf00      	nop
 8000796:	e008      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 8000798:	bf00      	nop
 800079a:	e006      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 800079c:	bf00      	nop
 800079e:	e004      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a0:	bf00      	nop
 80007a2:	e002      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a4:	bf00      	nop
 80007a6:	e000      	b.n	80007aa <fsm_traffic+0x37e>
			break;
 80007a8:	bf00      	nop
		}
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000124 	.word	0x20000124
 80007b4:	20000018 	.word	0x20000018
 80007b8:	40010c00 	.word	0x40010c00

080007bc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f023 030f 	bic.w	r3, r3, #15
 80007cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f043 030c 	orr.w	r3, r3, #12
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	f043 030c 	orr.w	r3, r3, #12
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007fc:	f107 0208 	add.w	r2, r7, #8
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2304      	movs	r3, #4
 8000806:	214e      	movs	r1, #78	; 0x4e
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <lcd_send_cmd+0x5c>)
 800080a:	f001 fb71 	bl	8001ef0 <HAL_I2C_Master_Transmit>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000130 	.word	0x20000130

0800081c <lcd_send_data>:

void lcd_send_data (char data)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f023 030f 	bic.w	r3, r3, #15
 800082c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f043 030d 	orr.w	r3, r3, #13
 800083a:	b2db      	uxtb	r3, r3
 800083c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f043 0309 	orr.w	r3, r3, #9
 8000844:	b2db      	uxtb	r3, r3
 8000846:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	f043 030d 	orr.w	r3, r3, #13
 800084e:	b2db      	uxtb	r3, r3
 8000850:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	f043 0309 	orr.w	r3, r3, #9
 8000858:	b2db      	uxtb	r3, r3
 800085a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800085c:	f107 0208 	add.w	r2, r7, #8
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2304      	movs	r3, #4
 8000866:	214e      	movs	r1, #78	; 0x4e
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <lcd_send_data+0x5c>)
 800086a:	f001 fb41 	bl	8001ef0 <HAL_I2C_Master_Transmit>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000130 	.word	0x20000130

0800087c <lcd_clear>:

void lcd_clear (void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000882:	2080      	movs	r0, #128	; 0x80
 8000884:	f7ff ff9a 	bl	80007bc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	e005      	b.n	800089a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800088e:	2020      	movs	r0, #32
 8000890:	f7ff ffc4 	bl	800081c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b45      	cmp	r3, #69	; 0x45
 800089e:	ddf6      	ble.n	800088e <lcd_clear+0x12>
	}
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
    switch (row)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <lcd_put_cur+0x18>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d005      	beq.n	80008cc <lcd_put_cur+0x22>
 80008c0:	e009      	b.n	80008d6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	603b      	str	r3, [r7, #0]
            break;
 80008ca:	e004      	b.n	80008d6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008d2:	603b      	str	r3, [r7, #0]
            break;
 80008d4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff6e 	bl	80007bc <lcd_send_cmd>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <lcd_init>:


void lcd_init (void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f000 fde9 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008f2:	2030      	movs	r0, #48	; 0x30
 80008f4:	f7ff ff62 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008f8:	2005      	movs	r0, #5
 80008fa:	f000 fde3 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008fe:	2030      	movs	r0, #48	; 0x30
 8000900:	f7ff ff5c 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000904:	2001      	movs	r0, #1
 8000906:	f000 fddd 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800090a:	2030      	movs	r0, #48	; 0x30
 800090c:	f7ff ff56 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(10);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 fdd7 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000916:	2020      	movs	r0, #32
 8000918:	f7ff ff50 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(10);
 800091c:	200a      	movs	r0, #10
 800091e:	f000 fdd1 	bl	80014c4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f7ff ff4a 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 fdcb 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800092e:	2008      	movs	r0, #8
 8000930:	f7ff ff44 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fdc5 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff ff3e 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f000 fdbf 	bl	80014c4 <HAL_Delay>
	HAL_Delay(1);
 8000946:	2001      	movs	r0, #1
 8000948:	f000 fdbc 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800094c:	2006      	movs	r0, #6
 800094e:	f7ff ff35 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 fdb6 	bl	80014c4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000958:	200c      	movs	r0, #12
 800095a:	f7ff ff2f 	bl	80007bc <lcd_send_cmd>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}

08000962 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800096a:	e006      	b.n	800097a <lcd_send_string+0x18>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff51 	bl	800081c <lcd_send_data>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1f4      	bne.n	800096c <lcd_send_string+0xa>
}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <pppp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pppp() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
	char str[16];
	  uint8_t abc = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
	  uint8_t def = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	75bb      	strb	r3, [r7, #22]
	  lcd_clear();
 800099a:	f7ff ff6f 	bl	800087c <lcd_clear>
	  lcd_put_cur(0, 0);
 800099e:	2100      	movs	r1, #0
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff82 	bl	80008aa <lcd_put_cur>
	  sprintf(str, "CUR: %ds", abc);
 80009a6:	7dfa      	ldrb	r2, [r7, #23]
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <pppp+0x54>)
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fb5b 	bl	8004068 <siprintf>
	  lcd_send_string(str);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffd4 	bl	8000962 <lcd_send_string>
	  lcd_put_cur(1, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff ff74 	bl	80008aa <lcd_put_cur>
	sprintf(str, "ABC: %ds", def);
 80009c2:	7dba      	ldrb	r2, [r7, #22]
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4907      	ldr	r1, [pc, #28]	; (80009e4 <pppp+0x58>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fb4d 	bl	8004068 <siprintf>
	lcd_send_string(str);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffc6 	bl	8000962 <lcd_send_string>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	080048f4 	.word	0x080048f4
 80009e4:	08004900 	.word	0x08004900

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ec:	f000 fd08 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f836 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f000 f91a 	bl	8000c2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009f8:	f000 f8ee 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80009fc:	f000 f8a0 	bl	8000b40 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000a00:	f000 f870 	bl	8000ae4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <main+0x60>)
 8000a06:	f002 fa29 	bl	8002e5c <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000a0a:	f000 f9bf 	bl	8000d8c <SCH_Init>
  lcd_init();
 8000a0e:	f7ff ff6b 	bl	80008e8 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <main+0x64>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(getKeyInput, 0, 10);
 8000a18:	220a      	movs	r2, #10
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <main+0x68>)
 8000a1e:	f000 f9c5 	bl	8000dac <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 10);
 8000a22:	220a      	movs	r2, #10
 8000a24:	2100      	movs	r1, #0
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <main+0x6c>)
 8000a28:	f000 f9c0 	bl	8000dac <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic, 0, 10);
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <main+0x70>)
 8000a32:	f000 f9bb 	bl	8000dac <SCH_Add_Task>
  SCH_Add_Task(pppp, 0, 10);
 8000a36:	220a      	movs	r2, #10
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4808      	ldr	r0, [pc, #32]	; (8000a5c <main+0x74>)
 8000a3c:	f000 f9b6 	bl	8000dac <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000a40:	f000 fa5c 	bl	8000efc <SCH_Dispatch_Tasks>
 8000a44:	e7fc      	b.n	8000a40 <main+0x58>
 8000a46:	bf00      	nop
 8000a48:	20000184 	.word	0x20000184
 8000a4c:	200000ac 	.word	0x200000ac
 8000a50:	080002b9 	.word	0x080002b9
 8000a54:	0800107d 	.word	0x0800107d
 8000a58:	0800042d 	.word	0x0800042d
 8000a5c:	0800098d 	.word	0x0800098d

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 faf2 	bl	8004058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a96:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fd7d 	bl	80025a0 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000aac:	f000 f968 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 ffe8 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ad6:	f000 f953 	bl	8000d80 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3740      	adds	r7, #64	; 0x40
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f001 f8a1 	bl	8001c68 <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f000 f928 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000130 	.word	0x20000130
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b66:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b74:	2209      	movs	r2, #9
 8000b76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b86:	f002 f919 	bl	8002dbc <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b90:	f000 f8f6 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000ba2:	f002 fa9d 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bac:	f000 f8e8 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000bbe:	f002 fc7f 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f000 f8da 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000184 	.word	0x20000184

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART2_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f002 fcc6 	bl	80035a0 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f8b1 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001cc 	.word	0x200001cc
 8000c28:	40004400 	.word	0x40004400

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a44      	ldr	r2, [pc, #272]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c58:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a3e      	ldr	r2, [pc, #248]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a38      	ldr	r2, [pc, #224]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000ca6:	482d      	ldr	r0, [pc, #180]	; (8000d5c <MX_GPIO_Init+0x130>)
 8000ca8:	f000 ff8b 	bl	8001bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000cb2:	482b      	ldr	r0, [pc, #172]	; (8000d60 <MX_GPIO_Init+0x134>)
 8000cb4:	f000 ff85 	bl	8001bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_GPIO_Init+0x13c>)
 8000cce:	f000 fddd 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON4_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000cd2:	2313      	movs	r3, #19
 8000cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481d      	ldr	r0, [pc, #116]	; (8000d5c <MX_GPIO_Init+0x130>)
 8000ce6:	f000 fdd1 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|D7_Pin|D2_Pin;
 8000cea:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4816      	ldr	r0, [pc, #88]	; (8000d5c <MX_GPIO_Init+0x130>)
 8000d04:	f000 fdc2 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <MX_GPIO_Init+0x134>)
 8000d1c:	f000 fdb6 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000d20:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <MX_GPIO_Init+0x134>)
 8000d3a:	f000 fda7 	bl	800188c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2028      	movs	r0, #40	; 0x28
 8000d44:	f000 fcb9 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d48:	2028      	movs	r0, #40	; 0x28
 8000d4a:	f000 fcd2 	bl	80016f2 <HAL_NVIC_EnableIRQ>

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	10110000 	.word	0x10110000
 8000d68:	40011000 	.word	0x40011000

08000d6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000d74:	f000 f8b4 	bl	8000ee0 <SCH_Update>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
uint32_t global_timer = 0;

void SCH_Init(void) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
    current_index_task = 0;
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SCH_Init+0x18>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
    global_timer = 0;
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SCH_Init+0x1c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	200000b0 	.word	0x200000b0
 8000da8:	200000b4 	.word	0x200000b4

08000dac <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
    if (current_index_task < SCH_MAX_TASKS) {
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b27      	cmp	r3, #39	; 0x27
 8000dbe:	d84a      	bhi.n	8000e56 <SCH_Add_Task+0xaa>
        SCH_tasks_G[current_index_task].pTask = pFunction;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <SCH_Add_Task+0xb8>)
 8000dc8:	460b      	mov	r3, r1
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <SCH_Add_Task+0xbc>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	491f      	ldr	r1, [pc, #124]	; (8000e64 <SCH_Add_Task+0xb8>)
 8000de8:	4603      	mov	r3, r0
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4403      	add	r3, r0
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	3304      	adds	r3, #4
 8000df4:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <SCH_Add_Task+0xbc>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	4917      	ldr	r1, [pc, #92]	; (8000e64 <SCH_Add_Task+0xb8>)
 8000e08:	4603      	mov	r3, r0
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4403      	add	r3, r0
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	3308      	adds	r3, #8
 8000e14:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <SCH_Add_Task+0xb8>)
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	330c      	adds	r3, #12
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SCH_Add_Task+0xb8>)
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	3310      	adds	r3, #16
 8000e48:	6018      	str	r0, [r3, #0]

        ++current_index_task;
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <SCH_Add_Task+0xb4>)
 8000e54:	701a      	strb	r2, [r3, #0]
    }
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	200000b0 	.word	0x200000b0
 8000e64:	20000214 	.word	0x20000214
 8000e68:	cccccccd 	.word	0xcccccccd

08000e6c <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t ID) {
 8000e6c:	b4b0      	push	{r4, r5, r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    if (current_index_task > ID) {
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <SCH_Delete_Task+0x6c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d226      	bcs.n	8000ece <SCH_Delete_Task+0x62>
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	e017      	b.n	8000eb6 <SCH_Delete_Task+0x4a>
            SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	4814      	ldr	r0, [pc, #80]	; (8000edc <SCH_Delete_Task+0x70>)
 8000e8c:	68f9      	ldr	r1, [r7, #12]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4418      	add	r0, r3
 8000e98:	4910      	ldr	r1, [pc, #64]	; (8000edc <SCH_Delete_Task+0x70>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	461d      	mov	r5, r3
 8000ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	6023      	str	r3, [r4, #0]
        for (int i = ID; i < current_index_task - 1; ++i) {
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <SCH_Delete_Task+0x6c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dbe1      	blt.n	8000e86 <SCH_Delete_Task+0x1a>
        }
        --current_index_task;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SCH_Delete_Task+0x6c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <SCH_Delete_Task+0x6c>)
 8000ecc:	701a      	strb	r2, [r3, #0]
    }
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bcb0      	pop	{r4, r5, r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	200000b0 	.word	0x200000b0
 8000edc:	20000214 	.word	0x20000214

08000ee0 <SCH_Update>:

void SCH_Update(void) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
	++global_timer;
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SCH_Update+0x18>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <SCH_Update+0x18>)
 8000eec:	6013      	str	r3, [r2, #0]
    if (global_timer > UINT32_MAX) {
    	global_timer = 0;
    }
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200000b4 	.word	0x200000b4

08000efc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; ++i) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	e06e      	b.n	8000fe6 <SCH_Dispatch_Tasks+0xea>
        if (global_timer >= SCH_tasks_G[i].Delay) {//Check if task execute
 8000f08:	493c      	ldr	r1, [pc, #240]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	3304      	adds	r3, #4
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <SCH_Dispatch_Tasks+0x104>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d840      	bhi.n	8000fa4 <SCH_Dispatch_Tasks+0xa8>
            ++SCH_tasks_G[i].RunMe;
 8000f22:	4936      	ldr	r1, [pc, #216]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	330c      	adds	r3, #12
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2d8      	uxtb	r0, r3
 8000f38:	4930      	ldr	r1, [pc, #192]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	330c      	adds	r3, #12
 8000f48:	4602      	mov	r2, r0
 8000f4a:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period > 0) {
 8000f4c:	492b      	ldr	r1, [pc, #172]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01c      	beq.n	8000f9c <SCH_Dispatch_Tasks+0xa0>
            	if (global_timer + SCH_tasks_G[i].Period <= UINT32_MAX) {
            		SCH_tasks_G[i].Delay += SCH_tasks_G[i].Period;
 8000f62:	4926      	ldr	r1, [pc, #152]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3304      	adds	r3, #4
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	4821      	ldr	r0, [pc, #132]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4403      	add	r3, r0
 8000f82:	3308      	adds	r3, #8
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4419      	add	r1, r3
 8000f88:	481c      	ldr	r0, [pc, #112]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4403      	add	r3, r0
 8000f96:	3304      	adds	r3, #4
 8000f98:	6019      	str	r1, [r3, #0]
 8000f9a:	e003      	b.n	8000fa4 <SCH_Dispatch_Tasks+0xa8>
            		SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period - (UINT32_MAX - SCH_tasks_G[i].Delay);
            		--SCH_tasks_G[i].RunMe;
            	}
            }
            else {
                SCH_Delete_Task(i);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff64 	bl	8000e6c <SCH_Delete_Task>
            }
        }
        if (SCH_tasks_G[i].RunMe > 0) {
 8000fa4:	4915      	ldr	r1, [pc, #84]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d012      	beq.n	8000fe0 <SCH_Dispatch_Tasks+0xe4>
            SCH_tasks_G[i].RunMe = 0;
 8000fba:	4910      	ldr	r1, [pc, #64]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	330c      	adds	r3, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
            (*SCH_tasks_G[i].pTask)();
 8000fce:	490b      	ldr	r1, [pc, #44]	; (8000ffc <SCH_Dispatch_Tasks+0x100>)
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4798      	blx	r3
    for (int i = 0; i < current_index_task; ++i) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <SCH_Dispatch_Tasks+0x108>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	db8a      	blt.n	8000f08 <SCH_Dispatch_Tasks+0xc>
        }
    }
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000214 	.word	0x20000214
 8001000:	200000b4 	.word	0x200000b4
 8001004:	200000b0 	.word	0x200000b0

08001008 <setTimer>:
#include "global.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value/TICK;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <setTimer+0x34>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1092      	asrs	r2, r2, #2
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad2      	subs	r2, r2, r3
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <setTimer+0x38>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <setTimer+0x3c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2100      	movs	r1, #0
 800102e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	66666667 	.word	0x66666667
 8001040:	20000534 	.word	0x20000534
 8001044:	20000560 	.word	0x20000560

08001048 <isTimerExpired>:

int isTimerExpired(int index) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8001050:	4a09      	ldr	r2, [pc, #36]	; (8001078 <isTimerExpired+0x30>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <isTimerExpired+0x22>
		timer_flag[index] = 0;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <isTimerExpired+0x30>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2100      	movs	r1, #0
 8001062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <isTimerExpired+0x24>
	}
	return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000560 	.word	0x20000560

0800107c <timerRun>:

void timerRun() {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	e01c      	b.n	80010c2 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <timerRun+0x58>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	2b00      	cmp	r3, #0
 8001092:	dd13      	ble.n	80010bc <timerRun+0x40>
			--timer_counter[i];
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <timerRun+0x58>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <timerRun+0x58>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <timerRun+0x58>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dc04      	bgt.n	80010bc <timerRun+0x40>
				timer_flag[i] = 1;
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <timerRun+0x5c>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2101      	movs	r1, #1
 80010b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	dddf      	ble.n	8001088 <timerRun+0xc>
			}
		}
	}
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	20000534 	.word	0x20000534
 80010d8:	20000560 	.word	0x20000560

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_MspInit+0x5c>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_MspInit+0x5c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_MspInit+0x5c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_MspInit+0x5c>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_MspInit+0x5c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_MspInit+0x5c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_MspInit+0x60>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_MspInit+0x60>)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000

08001140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_I2C_MspInit+0x90>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d132      	bne.n	80011c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	2312      	movs	r3, #18
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <HAL_I2C_MspInit+0x98>)
 800118e:	f000 fb7d 	bl	800188c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_I2C_MspInit+0x9c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <HAL_I2C_MspInit+0x9c>)
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 80011b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40005400 	.word	0x40005400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	40010000 	.word	0x40010000

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f0:	d113      	bne.n	800121a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201c      	movs	r0, #28
 8001210:	f000 fa53 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001214:	201c      	movs	r0, #28
 8001216:	f000 fa6c 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <HAL_UART_MspInit+0x80>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d12b      	bne.n	80012a0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0x84>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	4a17      	ldr	r2, [pc, #92]	; (80012ac <HAL_UART_MspInit+0x84>)
 800124e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001252:	61d3      	str	r3, [r2, #28]
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_UART_MspInit+0x84>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_UART_MspInit+0x84>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x84>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_UART_MspInit+0x84>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001278:	230c      	movs	r3, #12
 800127a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2302      	movs	r3, #2
 8001282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <HAL_UART_MspInit+0x88>)
 800128c:	f000 fafe 	bl	800188c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2026      	movs	r0, #38	; 0x26
 8001296:	f000 fa10 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800129a:	2026      	movs	r0, #38	; 0x26
 800129c:	f000 fa29 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010800 	.word	0x40010800

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fa:	f000 f8c7 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM2_IRQHandler+0x10>)
 800130a:	f001 fdf9 	bl	8002f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000184 	.word	0x20000184

08001318 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <USART2_IRQHandler+0x10>)
 800131e:	f002 f98f 	bl	8003640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001cc 	.word	0x200001cc

0800132c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001330:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001334:	f000 fc76 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f002 fe4a 	bl	8004004 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20005000 	.word	0x20005000
 800139c:	00000400 	.word	0x00000400
 80013a0:	200000b8 	.word	0x200000b8
 80013a4:	200005a0 	.word	0x200005a0

080013a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <Reset_Handler>:
 80013b4:	f7ff fff8 	bl	80013a8 <SystemInit>
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <LoopFillZerobss+0xe>)
 80013ba:	490c      	ldr	r1, [pc, #48]	; (80013ec <LoopFillZerobss+0x12>)
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <LoopFillZerobss+0x16>)
 80013be:	2300      	movs	r3, #0
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:
 80013c2:	58d4      	ldr	r4, [r2, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:
 80013c8:	18c4      	adds	r4, r0, r3
 80013ca:	428c      	cmp	r4, r1
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <LoopFillZerobss+0x1a>)
 80013d0:	4c09      	ldr	r4, [pc, #36]	; (80013f8 <LoopFillZerobss+0x1e>)
 80013d2:	2300      	movs	r3, #0
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:
 80013da:	42a2      	cmp	r2, r4
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>
 80013de:	f002 fe17 	bl	8004010 <__libc_init_array>
 80013e2:	f7ff fb01 	bl	80009e8 <main>
 80013e6:	4770      	bx	lr
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000090 	.word	0x20000090
 80013f0:	08004974 	.word	0x08004974
 80013f4:	20000090 	.word	0x20000090
 80013f8:	200005a0 	.word	0x200005a0

080013fc <ADC1_2_IRQHandler>:
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f947 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fe5e 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f95f 	bl	800170e <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f927 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000020 	.word	0x20000020
 8001484:	20000028 	.word	0x20000028
 8001488:	20000024 	.word	0x20000024

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x1c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x20>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a03      	ldr	r2, [pc, #12]	; (80014ac <HAL_IncTick+0x20>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000028 	.word	0x20000028
 80014ac:	2000058c 	.word	0x2000058c

080014b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	2000058c 	.word	0x2000058c

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fff0 	bl	80014b0 <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ea:	bf00      	nop
 80014ec:	f7ff ffe0 	bl	80014b0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000028 	.word	0x20000028

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4906      	ldr	r1, [pc, #24]	; (80015a4 <__NVIC_EnableIRQ+0x34>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff90 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff2d 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff42 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff35 	bl	8001570 <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa2 	bl	8001660 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d008      	beq.n	8001750 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2204      	movs	r2, #4
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e020      	b.n	8001792 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 020e 	bic.w	r2, r2, #14
 800175e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001778:	2101      	movs	r1, #1
 800177a:	fa01 f202 	lsl.w	r2, r1, r2
 800177e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d005      	beq.n	80017c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e051      	b.n	8001864 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 020e 	bic.w	r2, r2, #14
 80017ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_DMA_Abort_IT+0xd4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d029      	beq.n	800183e <HAL_DMA_Abort_IT+0xa2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_DMA_Abort_IT+0xd8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <HAL_DMA_Abort_IT+0x9e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_DMA_Abort_IT+0xdc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01a      	beq.n	8001834 <HAL_DMA_Abort_IT+0x98>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <HAL_DMA_Abort_IT+0xe0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d012      	beq.n	800182e <HAL_DMA_Abort_IT+0x92>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_DMA_Abort_IT+0xe4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00a      	beq.n	8001828 <HAL_DMA_Abort_IT+0x8c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_DMA_Abort_IT+0xe8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d102      	bne.n	8001822 <HAL_DMA_Abort_IT+0x86>
 800181c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001820:	e00e      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 8001822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001826:	e00b      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 8001828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182c:	e008      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	e005      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 8001834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001838:	e002      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 800183a:	2310      	movs	r3, #16
 800183c:	e000      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 800183e:	2301      	movs	r3, #1
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_DMA_Abort_IT+0xec>)
 8001842:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
    } 
  }
  return status;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020008 	.word	0x40020008
 8001874:	4002001c 	.word	0x4002001c
 8001878:	40020030 	.word	0x40020030
 800187c:	40020044 	.word	0x40020044
 8001880:	40020058 	.word	0x40020058
 8001884:	4002006c 	.word	0x4002006c
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e169      	b.n	8001b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8158 	bne.w	8001b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a9a      	ldr	r2, [pc, #616]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018c8:	4a98      	ldr	r2, [pc, #608]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d875      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018ce:	4a98      	ldr	r2, [pc, #608]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d058      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018d4:	4a96      	ldr	r2, [pc, #600]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d86f      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018da:	4a96      	ldr	r2, [pc, #600]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d052      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018e0:	4a94      	ldr	r2, [pc, #592]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d869      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018e6:	4a94      	ldr	r2, [pc, #592]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04c      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018ec:	4a92      	ldr	r2, [pc, #584]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d863      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018f2:	4a92      	ldr	r2, [pc, #584]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d046      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018f8:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d85d      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d82a      	bhi.n	8001958 <HAL_GPIO_Init+0xcc>
 8001902:	2b12      	cmp	r3, #18
 8001904:	d859      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_GPIO_Init+0x80>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001987 	.word	0x08001987
 8001910:	08001961 	.word	0x08001961
 8001914:	08001973 	.word	0x08001973
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019bb 	.word	0x080019bb
 8001920:	080019bb 	.word	0x080019bb
 8001924:	080019bb 	.word	0x080019bb
 8001928:	080019bb 	.word	0x080019bb
 800192c:	080019bb 	.word	0x080019bb
 8001930:	080019bb 	.word	0x080019bb
 8001934:	080019bb 	.word	0x080019bb
 8001938:	080019bb 	.word	0x080019bb
 800193c:	080019bb 	.word	0x080019bb
 8001940:	080019bb 	.word	0x080019bb
 8001944:	080019bb 	.word	0x080019bb
 8001948:	080019bb 	.word	0x080019bb
 800194c:	080019bb 	.word	0x080019bb
 8001950:	08001969 	.word	0x08001969
 8001954:	0800197d 	.word	0x0800197d
 8001958:	4a79      	ldr	r2, [pc, #484]	; (8001b40 <HAL_GPIO_Init+0x2b4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e02c      	b.n	80019ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e029      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	3304      	adds	r3, #4
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e024      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	3308      	adds	r3, #8
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e01f      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	330c      	adds	r3, #12
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e01a      	b.n	80019bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198e:	2304      	movs	r3, #4
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e013      	b.n	80019bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	611a      	str	r2, [r3, #16]
          break;
 80019a6:	e009      	b.n	80019bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	615a      	str	r2, [r3, #20]
          break;
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x130>
          break;
 80019ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d801      	bhi.n	80019c6 <HAL_GPIO_Init+0x13a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_Init+0x13e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	; 0xff
 80019d0:	d802      	bhi.n	80019d8 <HAL_GPIO_Init+0x14c>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x152>
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	3b08      	subs	r3, #8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	210f      	movs	r1, #15
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	6a39      	ldr	r1, [r7, #32]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80b1 	beq.w	8001b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a24:	4a48      	ldr	r2, [pc, #288]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <HAL_GPIO_Init+0x1ec>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_GPIO_Init+0x2c4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1e8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3e      	ldr	r2, [pc, #248]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1e0>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e006      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a8a:	492f      	ldr	r1, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	492c      	ldr	r1, [pc, #176]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4928      	ldr	r1, [pc, #160]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	491e      	ldr	r1, [pc, #120]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4918      	ldr	r1, [pc, #96]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4914      	ldr	r1, [pc, #80]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d021      	beq.n	8001b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e021      	b.n	8001b6e <HAL_GPIO_Init+0x2e2>
 8001b2a:	bf00      	nop
 8001b2c:	10320000 	.word	0x10320000
 8001b30:	10310000 	.word	0x10310000
 8001b34:	10220000 	.word	0x10220000
 8001b38:	10210000 	.word	0x10210000
 8001b3c:	10120000 	.word	0x10120000
 8001b40:	10110000 	.word	0x10110000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4909      	ldr	r1, [pc, #36]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f ae8e 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	372c      	adds	r7, #44	; 0x2c
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd2:	787b      	ldrb	r3, [r7, #1]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd8:	887a      	ldrh	r2, [r7, #2]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bde:	e003      	b.n	8001be8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	041a      	lsls	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	041a      	lsls	r2, r3, #16
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	400b      	ands	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f806 	bl	8001c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e12b      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fa56 	bl	8001140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ccc:	f001 f830 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a81      	ldr	r2, [pc, #516]	; (8001edc <HAL_I2C_Init+0x274>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d807      	bhi.n	8001cec <HAL_I2C_Init+0x84>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a80      	ldr	r2, [pc, #512]	; (8001ee0 <HAL_I2C_Init+0x278>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf94      	ite	ls
 8001ce4:	2301      	movls	r3, #1
 8001ce6:	2300      	movhi	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e006      	b.n	8001cfa <HAL_I2C_Init+0x92>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a7d      	ldr	r2, [pc, #500]	; (8001ee4 <HAL_I2C_Init+0x27c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0e7      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a78      	ldr	r2, [pc, #480]	; (8001ee8 <HAL_I2C_Init+0x280>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_I2C_Init+0x274>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d802      	bhi.n	8001d3c <HAL_I2C_Init+0xd4>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	e009      	b.n	8001d50 <HAL_I2C_Init+0xe8>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a69      	ldr	r2, [pc, #420]	; (8001eec <HAL_I2C_Init+0x284>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	3301      	adds	r3, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	495c      	ldr	r1, [pc, #368]	; (8001edc <HAL_I2C_Init+0x274>)
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d819      	bhi.n	8001da4 <HAL_I2C_Init+0x13c>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e59      	subs	r1, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7e:	1c59      	adds	r1, r3, #1
 8001d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d84:	400b      	ands	r3, r1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_I2C_Init+0x138>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e59      	subs	r1, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	e051      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e04f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d111      	bne.n	8001dd0 <HAL_I2C_Init+0x168>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e012      	b.n	8001df6 <HAL_I2C_Init+0x18e>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1e58      	subs	r0, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	0099      	lsls	r1, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x196>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e022      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10e      	bne.n	8001e24 <HAL_I2C_Init+0x1bc>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1e58      	subs	r0, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6859      	ldr	r1, [r3, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	440b      	add	r3, r1
 8001e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e22:	e00f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	0099      	lsls	r1, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6809      	ldr	r1, [r1, #0]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6911      	ldr	r1, [r2, #16]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68d2      	ldr	r2, [r2, #12]
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	000186a0 	.word	0x000186a0
 8001ee0:	001e847f 	.word	0x001e847f
 8001ee4:	003d08ff 	.word	0x003d08ff
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	461a      	mov	r2, r3
 8001efc:	460b      	mov	r3, r1
 8001efe:	817b      	strh	r3, [r7, #10]
 8001f00:	4613      	mov	r3, r2
 8001f02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff fad4 	bl	80014b0 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	f040 80e0 	bne.w	80020d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2319      	movs	r3, #25
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4970      	ldr	r1, [pc, #448]	; (80020e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f964 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0d3      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2C_Master_Transmit+0x50>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e0cc      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d007      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2221      	movs	r2, #33	; 0x21
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2210      	movs	r2, #16
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	893a      	ldrh	r2, [r7, #8]
 8001f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	6a3a      	ldr	r2, [r7, #32]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f89c 	bl	80020ec <I2C_MasterRequestWrite>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08d      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fd4:	e066      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fa22 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d107      	bne.n	8001ffe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b04      	cmp	r3, #4
 800203e:	d11b      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x188>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d017      	beq.n	8002078 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fa19 	bl	80024b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	2b04      	cmp	r3, #4
 800208e:	d107      	bne.n	80020a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e01a      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d194      	bne.n	8001fd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	00100002 	.word	0x00100002
 80020e8:	ffff0000 	.word	0xffff0000

080020ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	460b      	mov	r3, r1
 80020fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d006      	beq.n	8002116 <I2C_MasterRequestWrite+0x2a>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d003      	beq.n	8002116 <I2C_MasterRequestWrite+0x2a>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002114:	d108      	bne.n	8002128 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00b      	b.n	8002140 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	2b12      	cmp	r3, #18
 800212e:	d107      	bne.n	8002140 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f84f 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002166:	d103      	bne.n	8002170 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e035      	b.n	80021e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800217c:	d108      	bne.n	8002190 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800217e:	897b      	ldrh	r3, [r7, #10]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	e01b      	b.n	80021c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	11db      	asrs	r3, r3, #7
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f003 0306 	and.w	r3, r3, #6
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f063 030f 	orn	r3, r3, #15
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	490e      	ldr	r1, [pc, #56]	; (80021e8 <I2C_MasterRequestWrite+0xfc>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f898 	bl	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e010      	b.n	80021e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <I2C_MasterRequestWrite+0x100>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f888 	bl	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	00010008 	.word	0x00010008
 80021ec:	00010002 	.word	0x00010002

080021f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002200:	e048      	b.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d044      	beq.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7ff f951 	bl	80014b0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d139      	bne.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10d      	bne.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x56>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	e00c      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	429a      	cmp	r2, r3
 8002264:	d116      	bne.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e023      	b.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10d      	bne.n	80022ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	e00c      	b.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	43da      	mvns	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d093      	beq.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f2:	e071      	b.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d123      	bne.n	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800231c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e067      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d041      	beq.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002354:	f7ff f8ac 	bl	80014b0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d302      	bcc.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d136      	bne.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10c      	bne.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e00b      	b.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e021      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10c      	bne.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e00b      	b.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f af6d 	bne.w	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002430:	e034      	b.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f886 	bl	8002544 <I2C_IsAcknowledgeFailed>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e034      	b.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d028      	beq.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f831 	bl	80014b0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11d      	bne.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d016      	beq.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e007      	b.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d1c3      	bne.n	8002432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024c0:	e034      	b.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f83e 	bl	8002544 <I2C_IsAcknowledgeFailed>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e034      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d028      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7fe ffe9 	bl	80014b0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11d      	bne.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d016      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d1c3      	bne.n	80024c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255a:	d11b      	bne.n	8002594 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002564:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e26c      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025cc:	4b8f      	ldr	r3, [pc, #572]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d112      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
 80025d8:	4b8c      	ldr	r3, [pc, #560]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b89      	ldr	r3, [pc, #548]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06c      	beq.n	80026cc <HAL_RCC_OscConfig+0x12c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d168      	bne.n	80026cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e246      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x76>
 8002608:	4b80      	ldr	r3, [pc, #512]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7f      	ldr	r2, [pc, #508]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 800261e:	4b7b      	ldr	r3, [pc, #492]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7a      	ldr	r2, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a77      	ldr	r2, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xbc>
 8002642:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a71      	ldr	r2, [pc, #452]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 800265c:	4b6b      	ldr	r3, [pc, #428]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6a      	ldr	r2, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe ff18 	bl	80014b0 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe ff14 	bl	80014b0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1fa      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe4>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe ff04 	bl	80014b0 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe ff00 	bl	80014b0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1e6      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x10c>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
 80026f2:	4b46      	ldr	r3, [pc, #280]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1ba      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4939      	ldr	r1, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe feb9 	bl	80014b0 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe feb5 	bl	80014b0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e19b      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4927      	ldr	r1, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fe98 	bl	80014b0 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe fe94 	bl	80014b0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e17a      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d03a      	beq.n	8002824 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d019      	beq.n	80027ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe fe78 	bl	80014b0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe fe74 	bl	80014b0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e15a      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f000 facc 	bl	8002d80 <RCC_Delay>
 80027e8:	e01c      	b.n	8002824 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fe5e 	bl	80014b0 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f6:	e00f      	b.n	8002818 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe fe5a 	bl	80014b0 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d908      	bls.n	8002818 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e140      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	42420000 	.word	0x42420000
 8002814:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b9e      	ldr	r3, [pc, #632]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e9      	bne.n	80027f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a6 	beq.w	800297e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b97      	ldr	r3, [pc, #604]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b94      	ldr	r3, [pc, #592]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a93      	ldr	r2, [pc, #588]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b91      	ldr	r3, [pc, #580]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b8b      	ldr	r3, [pc, #556]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a8a      	ldr	r2, [pc, #552]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fe1b 	bl	80014b0 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fe17 	bl	80014b0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0fd      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x312>
 80028a4:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a7a      	ldr	r2, [pc, #488]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e02d      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x334>
 80028ba:	4b76      	ldr	r3, [pc, #472]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a75      	ldr	r2, [pc, #468]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a72      	ldr	r2, [pc, #456]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	e01c      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x356>
 80028dc:	4b6d      	ldr	r3, [pc, #436]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a6c      	ldr	r2, [pc, #432]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a69      	ldr	r2, [pc, #420]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	e00b      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a66      	ldr	r2, [pc, #408]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a63      	ldr	r2, [pc, #396]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d015      	beq.n	8002942 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fdcb 	bl	80014b0 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fdc7 	bl	80014b0 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0ab      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b57      	ldr	r3, [pc, #348]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <HAL_RCC_OscConfig+0x37e>
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fdb5 	bl	80014b0 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fdb1 	bl	80014b0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e095      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a47      	ldr	r2, [pc, #284]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8081 	beq.w	8002a8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d061      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d146      	bne.n	8002a2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <HAL_RCC_OscConfig+0x4fc>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fd85 	bl	80014b0 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fd81 	bl	80014b0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e067      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029d2:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	492d      	ldr	r1, [pc, #180]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a19      	ldr	r1, [r3, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	430b      	orrs	r3, r1
 80029f6:	4927      	ldr	r1, [pc, #156]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x4fc>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fd55 	bl	80014b0 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7fe fd51 	bl	80014b0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e037      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x46a>
 8002a28:	e02f      	b.n	8002a8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <HAL_RCC_OscConfig+0x4fc>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fd3e 	bl	80014b0 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fd3a 	bl	80014b0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e020      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x498>
 8002a56:	e018      	b.n	8002a8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e013      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	42420060 	.word	0x42420060

08002aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d0      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	4965      	ldr	r1, [pc, #404]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	494d      	ldr	r1, [pc, #308]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d040      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d115      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e073      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4936      	ldr	r1, [pc, #216]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fc8e 	bl	80014b0 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fe fc8a 	bl	80014b0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e053      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d210      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 0207 	bic.w	r2, r3, #7
 8002bd6:	4922      	ldr	r1, [pc, #136]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c2e:	f000 f821 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	490a      	ldr	r1, [pc, #40]	; (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1cc>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fbec 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	0800490c 	.word	0x0800490c
 8002c6c:	20000020 	.word	0x20000020
 8002c70:	20000024 	.word	0x20000024

08002c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x30>
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d003      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x36>
 8002ca2:	e027      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	e027      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0c9b      	lsrs	r3, r3, #18
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0c5b      	lsrs	r3, r3, #17
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd6:	fb02 f203 	mul.w	r2, r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e004      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	613b      	str	r3, [r7, #16]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cf6:	613b      	str	r3, [r7, #16]
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	693b      	ldr	r3, [r7, #16]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	08004924 	.word	0x08004924
 8002d14:	08004934 	.word	0x08004934
 8002d18:	003d0900 	.word	0x003d0900

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	20000020 	.word	0x20000020

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff2 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	0800491c 	.word	0x0800491c

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffde 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0adb      	lsrs	r3, r3, #11
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	0800491c 	.word	0x0800491c

08002d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <RCC_Delay+0x34>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <RCC_Delay+0x38>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0a5b      	lsrs	r3, r3, #9
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d9c:	bf00      	nop
  }
  while (Delay --);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	60fa      	str	r2, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <RCC_Delay+0x1c>
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	20000020 	.word	0x20000020
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e041      	b.n	8002e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe f9fc 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f000 fa5c 	bl	80032b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e03a      	b.n	8002eea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_TIM_Base_Start_IT+0x98>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00e      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x58>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9e:	d009      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x58>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x58>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a13      	ldr	r2, [pc, #76]	; (8002efc <HAL_TIM_Base_Start_IT+0xa0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d111      	bne.n	8002ed8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d010      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0201 	orr.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed6:	e007      	b.n	8002ee8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800

08002f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d020      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0202 	mvn.w	r2, #2
 8002f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f998 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f98b 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f99a 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0204 	mvn.w	r2, #4
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f972 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f965 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f974 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0208 	mvn.w	r2, #8
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f94c 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f93f 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f94e 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0210 	mvn.w	r2, #16
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2208      	movs	r2, #8
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f926 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f919 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f928 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0201 	mvn.w	r2, #1
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fe80 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa7f 	bl	800358e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8f8 	bl	80032a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0220 	mvn.w	r2, #32
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa52 	bl	800357c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIM_ConfigClockSource+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0b4      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x186>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800311a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003134:	d03e      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313a:	f200 8087 	bhi.w	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003142:	f000 8086 	beq.w	8003252 <HAL_TIM_ConfigClockSource+0x172>
 8003146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314a:	d87f      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b70      	cmp	r3, #112	; 0x70
 800314e:	d01a      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0xa6>
 8003150:	2b70      	cmp	r3, #112	; 0x70
 8003152:	d87b      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b60      	cmp	r3, #96	; 0x60
 8003156:	d050      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x11a>
 8003158:	2b60      	cmp	r3, #96	; 0x60
 800315a:	d877      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b50      	cmp	r3, #80	; 0x50
 800315e:	d03c      	beq.n	80031da <HAL_TIM_ConfigClockSource+0xfa>
 8003160:	2b50      	cmp	r3, #80	; 0x50
 8003162:	d873      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d058      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x13a>
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d86f      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b30      	cmp	r3, #48	; 0x30
 800316e:	d064      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003170:	2b30      	cmp	r3, #48	; 0x30
 8003172:	d86b      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d060      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003178:	2b20      	cmp	r3, #32
 800317a:	d867      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d05c      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	2b10      	cmp	r3, #16
 8003182:	d05a      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003184:	e062      	b.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f000 f974 	bl	8003482 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	609a      	str	r2, [r3, #8]
      break;
 80031b2:	e04f      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f000 f95d 	bl	8003482 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d6:	609a      	str	r2, [r3, #8]
      break;
 80031d8:	e03c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 f8d4 	bl	8003394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2150      	movs	r1, #80	; 0x50
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f92b 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 80031f8:	e02c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 f8f2 	bl	80033f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2160      	movs	r1, #96	; 0x60
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f91b 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8003218:	e01c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	461a      	mov	r2, r3
 8003228:	f000 f8b4 	bl	8003394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2140      	movs	r1, #64	; 0x40
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f90b 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8003238:	e00c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f000 f902 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 800324a:	e003      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e000      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
	...

080032b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a2f      	ldr	r2, [pc, #188]	; (8003388 <TIM_Base_SetConfig+0xd0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <TIM_Base_SetConfig+0x30>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d007      	beq.n	80032e8 <TIM_Base_SetConfig+0x30>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a2c      	ldr	r2, [pc, #176]	; (800338c <TIM_Base_SetConfig+0xd4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_Base_SetConfig+0x30>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <TIM_Base_SetConfig+0xd8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d108      	bne.n	80032fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <TIM_Base_SetConfig+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00b      	beq.n	800331a <TIM_Base_SetConfig+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d007      	beq.n	800331a <TIM_Base_SetConfig+0x62>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1f      	ldr	r2, [pc, #124]	; (800338c <TIM_Base_SetConfig+0xd4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0x62>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <TIM_Base_SetConfig+0xd8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d108      	bne.n	800332c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <TIM_Base_SetConfig+0xd0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]
  }
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800

08003394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 030a 	bic.w	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800341a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	031b      	lsls	r3, r3, #12
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800342c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	f043 0307 	orr.w	r3, r3, #7
 8003470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e046      	b.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d009      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a10      	ldr	r2, [pc, #64]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10c      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800

0800357c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e042      	b.n	8003638 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd fe2e 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fc7f 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b0ba      	sub	sp, #232	; 0xe8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800367e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_UART_IRQHandler+0x66>
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fb63 	bl	8003d6a <UART_Receive_IT>
      return;
 80036a4:	e25b      	b.n	8003b5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80de 	beq.w	800386c <HAL_UART_IRQHandler+0x22c>
 80036b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80d1 	beq.w	800386c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0xae>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_UART_IRQHandler+0xd2>
 80036fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <HAL_UART_IRQHandler+0xf6>
 800371e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d011      	beq.n	8003766 <HAL_UART_IRQHandler+0x126>
 8003742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0208 	orr.w	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 81f2 	beq.w	8003b54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_UART_IRQHandler+0x14e>
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 faee 	bl	8003d6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_UART_IRQHandler+0x17a>
 80037b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d04f      	beq.n	800385a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f9f8 	bl	8003bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d041      	beq.n	8003852 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3314      	adds	r3, #20
 80037d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1d9      	bne.n	80037ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	4a7e      	ldr	r2, [pc, #504]	; (8003a20 <HAL_UART_IRQHandler+0x3e0>)
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd ffb4 	bl	800179c <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00e      	b.n	8003868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f99c 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00a      	b.n	8003868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f998 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e006      	b.n	8003868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f994 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003866:	e175      	b.n	8003b54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	bf00      	nop
    return;
 800386a:	e173      	b.n	8003b54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b01      	cmp	r3, #1
 8003872:	f040 814f 	bne.w	8003b14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8148 	beq.w	8003b14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8141 	beq.w	8003b14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80b6 	beq.w	8003a24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8145 	beq.w	8003b58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038d6:	429a      	cmp	r2, r3
 80038d8:	f080 813e 	bcs.w	8003b58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	f000 8088 	beq.w	8003a00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800390a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800391c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003920:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003928:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1d9      	bne.n	80038f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800394c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003960:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003964:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003968:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e1      	bne.n	800393c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3314      	adds	r3, #20
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800399c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800399e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e3      	bne.n	8003978 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d0:	f023 0310 	bic.w	r3, r3, #16
 80039d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80039e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e3      	bne.n	80039be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fe93 	bl	8001726 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8bf 	bl	8003b9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a1c:	e09c      	b.n	8003b58 <HAL_UART_IRQHandler+0x518>
 8003a1e:	bf00      	nop
 8003a20:	08003c75 	.word	0x08003c75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 808e 	beq.w	8003b5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8089 	beq.w	8003b5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a6e:	647a      	str	r2, [r7, #68]	; 0x44
 8003a70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e3      	bne.n	8003a4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3314      	adds	r3, #20
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	623b      	str	r3, [r7, #32]
   return(result);
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e3      	bne.n	8003a82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	330c      	adds	r3, #12
 8003ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0310 	bic.w	r3, r3, #16
 8003ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003aec:	61fa      	str	r2, [r7, #28]
 8003aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	617b      	str	r3, [r7, #20]
   return(result);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e3      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f844 	bl	8003b9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b12:	e023      	b.n	8003b5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_IRQHandler+0x4f4>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8b5 	bl	8003c9c <UART_Transmit_IT>
    return;
 8003b32:	e014      	b.n	8003b5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <HAL_UART_IRQHandler+0x51e>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8f4 	bl	8003d3a <UART_EndTransmit_IT>
    return;
 8003b52:	e004      	b.n	8003b5e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b54:	bf00      	nop
 8003b56:	e002      	b.n	8003b5e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b5c:	bf00      	nop
  }
}
 8003b5e:	37e8      	adds	r7, #232	; 0xe8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b095      	sub	sp, #84	; 0x54
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd8:	643a      	str	r2, [r7, #64]	; 0x40
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d119      	bne.n	8003c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c48:	61ba      	str	r2, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c6a:	bf00      	nop
 8003c6c:	3754      	adds	r7, #84	; 0x54
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff7a 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b21      	cmp	r3, #33	; 0x21
 8003cae:	d13e      	bne.n	8003d2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d114      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d110      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	e008      	b.n	8003cf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6211      	str	r1, [r2, #32]
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4619      	mov	r1, r3
 8003d04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff02 	bl	8003b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08c      	sub	sp, #48	; 0x30
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b22      	cmp	r3, #34	; 0x22
 8003d7c:	f040 80ae 	bne.w	8003edc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d117      	bne.n	8003dba <UART_Receive_IT+0x50>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d113      	bne.n	8003dba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	1c9a      	adds	r2, r3, #2
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
 8003db8:	e026      	b.n	8003e08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d007      	beq.n	8003dde <UART_Receive_IT+0x74>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <UART_Receive_IT+0x82>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e008      	b.n	8003dfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4619      	mov	r1, r3
 8003e16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d15d      	bne.n	8003ed8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0220 	bic.w	r2, r2, #32
 8003e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d135      	bne.n	8003ece <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	613b      	str	r3, [r7, #16]
   return(result);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	623a      	str	r2, [r7, #32]
 8003e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	69f9      	ldr	r1, [r7, #28]
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e5      	bne.n	8003e68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d10a      	bne.n	8003ec0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fe67 	bl	8003b9a <HAL_UARTEx_RxEventCallback>
 8003ecc:	e002      	b.n	8003ed4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fe51 	bl	8003b76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e002      	b.n	8003ede <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3730      	adds	r7, #48	; 0x30
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f22:	f023 030c 	bic.w	r3, r3, #12
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <UART_SetConfig+0x114>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d103      	bne.n	8003f58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe ff02 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	e002      	b.n	8003f5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe feea 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <UART_SetConfig+0x118>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	0119      	lsls	r1, r3, #4
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009a      	lsls	r2, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <UART_SetConfig+0x118>)
 8003f96:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2064      	movs	r0, #100	; 0x64
 8003f9e:	fb00 f303 	mul.w	r3, r0, r3
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	3332      	adds	r3, #50	; 0x32
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <UART_SetConfig+0x118>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb4:	4419      	add	r1, r3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <UART_SetConfig+0x118>)
 8003fce:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2064      	movs	r0, #100	; 0x64
 8003fd6:	fb00 f303 	mul.w	r3, r0, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <UART_SetConfig+0x118>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40013800 	.word	0x40013800
 8004000:	51eb851f 	.word	0x51eb851f

08004004 <__errno>:
 8004004:	4b01      	ldr	r3, [pc, #4]	; (800400c <__errno+0x8>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2000002c 	.word	0x2000002c

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	2600      	movs	r6, #0
 8004014:	4d0c      	ldr	r5, [pc, #48]	; (8004048 <__libc_init_array+0x38>)
 8004016:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004018:	1b64      	subs	r4, r4, r5
 800401a:	10a4      	asrs	r4, r4, #2
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	f000 fc5c 	bl	80048dc <_init>
 8004024:	2600      	movs	r6, #0
 8004026:	4d0a      	ldr	r5, [pc, #40]	; (8004050 <__libc_init_array+0x40>)
 8004028:	4c0a      	ldr	r4, [pc, #40]	; (8004054 <__libc_init_array+0x44>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	0800496c 	.word	0x0800496c
 800404c:	0800496c 	.word	0x0800496c
 8004050:	0800496c 	.word	0x0800496c
 8004054:	08004970 	.word	0x08004970

08004058 <memset>:
 8004058:	4603      	mov	r3, r0
 800405a:	4402      	add	r2, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	d100      	bne.n	8004062 <memset+0xa>
 8004060:	4770      	bx	lr
 8004062:	f803 1b01 	strb.w	r1, [r3], #1
 8004066:	e7f9      	b.n	800405c <memset+0x4>

08004068 <siprintf>:
 8004068:	b40e      	push	{r1, r2, r3}
 800406a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800406e:	b500      	push	{lr}
 8004070:	b09c      	sub	sp, #112	; 0x70
 8004072:	ab1d      	add	r3, sp, #116	; 0x74
 8004074:	9002      	str	r0, [sp, #8]
 8004076:	9006      	str	r0, [sp, #24]
 8004078:	9107      	str	r1, [sp, #28]
 800407a:	9104      	str	r1, [sp, #16]
 800407c:	4808      	ldr	r0, [pc, #32]	; (80040a0 <siprintf+0x38>)
 800407e:	4909      	ldr	r1, [pc, #36]	; (80040a4 <siprintf+0x3c>)
 8004080:	f853 2b04 	ldr.w	r2, [r3], #4
 8004084:	9105      	str	r1, [sp, #20]
 8004086:	6800      	ldr	r0, [r0, #0]
 8004088:	a902      	add	r1, sp, #8
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	f000 f868 	bl	8004160 <_svfiprintf_r>
 8004090:	2200      	movs	r2, #0
 8004092:	9b02      	ldr	r3, [sp, #8]
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	b01c      	add	sp, #112	; 0x70
 8004098:	f85d eb04 	ldr.w	lr, [sp], #4
 800409c:	b003      	add	sp, #12
 800409e:	4770      	bx	lr
 80040a0:	2000002c 	.word	0x2000002c
 80040a4:	ffff0208 	.word	0xffff0208

080040a8 <__ssputs_r>:
 80040a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ac:	688e      	ldr	r6, [r1, #8]
 80040ae:	4682      	mov	sl, r0
 80040b0:	429e      	cmp	r6, r3
 80040b2:	460c      	mov	r4, r1
 80040b4:	4690      	mov	r8, r2
 80040b6:	461f      	mov	r7, r3
 80040b8:	d838      	bhi.n	800412c <__ssputs_r+0x84>
 80040ba:	898a      	ldrh	r2, [r1, #12]
 80040bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040c0:	d032      	beq.n	8004128 <__ssputs_r+0x80>
 80040c2:	6825      	ldr	r5, [r4, #0]
 80040c4:	6909      	ldr	r1, [r1, #16]
 80040c6:	3301      	adds	r3, #1
 80040c8:	eba5 0901 	sub.w	r9, r5, r1
 80040cc:	6965      	ldr	r5, [r4, #20]
 80040ce:	444b      	add	r3, r9
 80040d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d8:	106d      	asrs	r5, r5, #1
 80040da:	429d      	cmp	r5, r3
 80040dc:	bf38      	it	cc
 80040de:	461d      	movcc	r5, r3
 80040e0:	0553      	lsls	r3, r2, #21
 80040e2:	d531      	bpl.n	8004148 <__ssputs_r+0xa0>
 80040e4:	4629      	mov	r1, r5
 80040e6:	f000 fb53 	bl	8004790 <_malloc_r>
 80040ea:	4606      	mov	r6, r0
 80040ec:	b950      	cbnz	r0, 8004104 <__ssputs_r+0x5c>
 80040ee:	230c      	movs	r3, #12
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	f8ca 3000 	str.w	r3, [sl]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004104:	464a      	mov	r2, r9
 8004106:	6921      	ldr	r1, [r4, #16]
 8004108:	f000 face 	bl	80046a8 <memcpy>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004116:	81a3      	strh	r3, [r4, #12]
 8004118:	6126      	str	r6, [r4, #16]
 800411a:	444e      	add	r6, r9
 800411c:	6026      	str	r6, [r4, #0]
 800411e:	463e      	mov	r6, r7
 8004120:	6165      	str	r5, [r4, #20]
 8004122:	eba5 0509 	sub.w	r5, r5, r9
 8004126:	60a5      	str	r5, [r4, #8]
 8004128:	42be      	cmp	r6, r7
 800412a:	d900      	bls.n	800412e <__ssputs_r+0x86>
 800412c:	463e      	mov	r6, r7
 800412e:	4632      	mov	r2, r6
 8004130:	4641      	mov	r1, r8
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	f000 fac6 	bl	80046c4 <memmove>
 8004138:	68a3      	ldr	r3, [r4, #8]
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	1b9b      	subs	r3, r3, r6
 800413e:	4432      	add	r2, r6
 8004140:	2000      	movs	r0, #0
 8004142:	60a3      	str	r3, [r4, #8]
 8004144:	6022      	str	r2, [r4, #0]
 8004146:	e7db      	b.n	8004100 <__ssputs_r+0x58>
 8004148:	462a      	mov	r2, r5
 800414a:	f000 fb7b 	bl	8004844 <_realloc_r>
 800414e:	4606      	mov	r6, r0
 8004150:	2800      	cmp	r0, #0
 8004152:	d1e1      	bne.n	8004118 <__ssputs_r+0x70>
 8004154:	4650      	mov	r0, sl
 8004156:	6921      	ldr	r1, [r4, #16]
 8004158:	f000 face 	bl	80046f8 <_free_r>
 800415c:	e7c7      	b.n	80040ee <__ssputs_r+0x46>
	...

08004160 <_svfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	4698      	mov	r8, r3
 8004166:	898b      	ldrh	r3, [r1, #12]
 8004168:	4607      	mov	r7, r0
 800416a:	061b      	lsls	r3, r3, #24
 800416c:	460d      	mov	r5, r1
 800416e:	4614      	mov	r4, r2
 8004170:	b09d      	sub	sp, #116	; 0x74
 8004172:	d50e      	bpl.n	8004192 <_svfiprintf_r+0x32>
 8004174:	690b      	ldr	r3, [r1, #16]
 8004176:	b963      	cbnz	r3, 8004192 <_svfiprintf_r+0x32>
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	f000 fb09 	bl	8004790 <_malloc_r>
 800417e:	6028      	str	r0, [r5, #0]
 8004180:	6128      	str	r0, [r5, #16]
 8004182:	b920      	cbnz	r0, 800418e <_svfiprintf_r+0x2e>
 8004184:	230c      	movs	r3, #12
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	e0d1      	b.n	8004332 <_svfiprintf_r+0x1d2>
 800418e:	2340      	movs	r3, #64	; 0x40
 8004190:	616b      	str	r3, [r5, #20]
 8004192:	2300      	movs	r3, #0
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
 8004196:	2320      	movs	r3, #32
 8004198:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800419c:	2330      	movs	r3, #48	; 0x30
 800419e:	f04f 0901 	mov.w	r9, #1
 80041a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800434c <_svfiprintf_r+0x1ec>
 80041aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ae:	4623      	mov	r3, r4
 80041b0:	469a      	mov	sl, r3
 80041b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b6:	b10a      	cbz	r2, 80041bc <_svfiprintf_r+0x5c>
 80041b8:	2a25      	cmp	r2, #37	; 0x25
 80041ba:	d1f9      	bne.n	80041b0 <_svfiprintf_r+0x50>
 80041bc:	ebba 0b04 	subs.w	fp, sl, r4
 80041c0:	d00b      	beq.n	80041da <_svfiprintf_r+0x7a>
 80041c2:	465b      	mov	r3, fp
 80041c4:	4622      	mov	r2, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	4638      	mov	r0, r7
 80041ca:	f7ff ff6d 	bl	80040a8 <__ssputs_r>
 80041ce:	3001      	adds	r0, #1
 80041d0:	f000 80aa 	beq.w	8004328 <_svfiprintf_r+0x1c8>
 80041d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041d6:	445a      	add	r2, fp
 80041d8:	9209      	str	r2, [sp, #36]	; 0x24
 80041da:	f89a 3000 	ldrb.w	r3, [sl]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80a2 	beq.w	8004328 <_svfiprintf_r+0x1c8>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ee:	f10a 0a01 	add.w	sl, sl, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	9307      	str	r3, [sp, #28]
 80041f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041fa:	931a      	str	r3, [sp, #104]	; 0x68
 80041fc:	4654      	mov	r4, sl
 80041fe:	2205      	movs	r2, #5
 8004200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004204:	4851      	ldr	r0, [pc, #324]	; (800434c <_svfiprintf_r+0x1ec>)
 8004206:	f000 fa41 	bl	800468c <memchr>
 800420a:	9a04      	ldr	r2, [sp, #16]
 800420c:	b9d8      	cbnz	r0, 8004246 <_svfiprintf_r+0xe6>
 800420e:	06d0      	lsls	r0, r2, #27
 8004210:	bf44      	itt	mi
 8004212:	2320      	movmi	r3, #32
 8004214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004218:	0711      	lsls	r1, r2, #28
 800421a:	bf44      	itt	mi
 800421c:	232b      	movmi	r3, #43	; 0x2b
 800421e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	2b2a      	cmp	r3, #42	; 0x2a
 8004228:	d015      	beq.n	8004256 <_svfiprintf_r+0xf6>
 800422a:	4654      	mov	r4, sl
 800422c:	2000      	movs	r0, #0
 800422e:	f04f 0c0a 	mov.w	ip, #10
 8004232:	9a07      	ldr	r2, [sp, #28]
 8004234:	4621      	mov	r1, r4
 8004236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423a:	3b30      	subs	r3, #48	; 0x30
 800423c:	2b09      	cmp	r3, #9
 800423e:	d94e      	bls.n	80042de <_svfiprintf_r+0x17e>
 8004240:	b1b0      	cbz	r0, 8004270 <_svfiprintf_r+0x110>
 8004242:	9207      	str	r2, [sp, #28]
 8004244:	e014      	b.n	8004270 <_svfiprintf_r+0x110>
 8004246:	eba0 0308 	sub.w	r3, r0, r8
 800424a:	fa09 f303 	lsl.w	r3, r9, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	46a2      	mov	sl, r4
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	e7d2      	b.n	80041fc <_svfiprintf_r+0x9c>
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	1d19      	adds	r1, r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	9103      	str	r1, [sp, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbb      	ittet	lt
 8004262:	425b      	neglt	r3, r3
 8004264:	f042 0202 	orrlt.w	r2, r2, #2
 8004268:	9307      	strge	r3, [sp, #28]
 800426a:	9307      	strlt	r3, [sp, #28]
 800426c:	bfb8      	it	lt
 800426e:	9204      	strlt	r2, [sp, #16]
 8004270:	7823      	ldrb	r3, [r4, #0]
 8004272:	2b2e      	cmp	r3, #46	; 0x2e
 8004274:	d10c      	bne.n	8004290 <_svfiprintf_r+0x130>
 8004276:	7863      	ldrb	r3, [r4, #1]
 8004278:	2b2a      	cmp	r3, #42	; 0x2a
 800427a:	d135      	bne.n	80042e8 <_svfiprintf_r+0x188>
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	3402      	adds	r4, #2
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	9203      	str	r2, [sp, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	bfb8      	it	lt
 800428a:	f04f 33ff 	movlt.w	r3, #4294967295
 800428e:	9305      	str	r3, [sp, #20]
 8004290:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800435c <_svfiprintf_r+0x1fc>
 8004294:	2203      	movs	r2, #3
 8004296:	4650      	mov	r0, sl
 8004298:	7821      	ldrb	r1, [r4, #0]
 800429a:	f000 f9f7 	bl	800468c <memchr>
 800429e:	b140      	cbz	r0, 80042b2 <_svfiprintf_r+0x152>
 80042a0:	2340      	movs	r3, #64	; 0x40
 80042a2:	eba0 000a 	sub.w	r0, r0, sl
 80042a6:	fa03 f000 	lsl.w	r0, r3, r0
 80042aa:	9b04      	ldr	r3, [sp, #16]
 80042ac:	3401      	adds	r4, #1
 80042ae:	4303      	orrs	r3, r0
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b6:	2206      	movs	r2, #6
 80042b8:	4825      	ldr	r0, [pc, #148]	; (8004350 <_svfiprintf_r+0x1f0>)
 80042ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042be:	f000 f9e5 	bl	800468c <memchr>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d038      	beq.n	8004338 <_svfiprintf_r+0x1d8>
 80042c6:	4b23      	ldr	r3, [pc, #140]	; (8004354 <_svfiprintf_r+0x1f4>)
 80042c8:	bb1b      	cbnz	r3, 8004312 <_svfiprintf_r+0x1b2>
 80042ca:	9b03      	ldr	r3, [sp, #12]
 80042cc:	3307      	adds	r3, #7
 80042ce:	f023 0307 	bic.w	r3, r3, #7
 80042d2:	3308      	adds	r3, #8
 80042d4:	9303      	str	r3, [sp, #12]
 80042d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d8:	4433      	add	r3, r6
 80042da:	9309      	str	r3, [sp, #36]	; 0x24
 80042dc:	e767      	b.n	80041ae <_svfiprintf_r+0x4e>
 80042de:	460c      	mov	r4, r1
 80042e0:	2001      	movs	r0, #1
 80042e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80042e6:	e7a5      	b.n	8004234 <_svfiprintf_r+0xd4>
 80042e8:	2300      	movs	r3, #0
 80042ea:	f04f 0c0a 	mov.w	ip, #10
 80042ee:	4619      	mov	r1, r3
 80042f0:	3401      	adds	r4, #1
 80042f2:	9305      	str	r3, [sp, #20]
 80042f4:	4620      	mov	r0, r4
 80042f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042fa:	3a30      	subs	r2, #48	; 0x30
 80042fc:	2a09      	cmp	r2, #9
 80042fe:	d903      	bls.n	8004308 <_svfiprintf_r+0x1a8>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0c5      	beq.n	8004290 <_svfiprintf_r+0x130>
 8004304:	9105      	str	r1, [sp, #20]
 8004306:	e7c3      	b.n	8004290 <_svfiprintf_r+0x130>
 8004308:	4604      	mov	r4, r0
 800430a:	2301      	movs	r3, #1
 800430c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004310:	e7f0      	b.n	80042f4 <_svfiprintf_r+0x194>
 8004312:	ab03      	add	r3, sp, #12
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	462a      	mov	r2, r5
 8004318:	4638      	mov	r0, r7
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <_svfiprintf_r+0x1f8>)
 800431c:	a904      	add	r1, sp, #16
 800431e:	f3af 8000 	nop.w
 8004322:	1c42      	adds	r2, r0, #1
 8004324:	4606      	mov	r6, r0
 8004326:	d1d6      	bne.n	80042d6 <_svfiprintf_r+0x176>
 8004328:	89ab      	ldrh	r3, [r5, #12]
 800432a:	065b      	lsls	r3, r3, #25
 800432c:	f53f af2c 	bmi.w	8004188 <_svfiprintf_r+0x28>
 8004330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004332:	b01d      	add	sp, #116	; 0x74
 8004334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004338:	ab03      	add	r3, sp, #12
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	462a      	mov	r2, r5
 800433e:	4638      	mov	r0, r7
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <_svfiprintf_r+0x1f8>)
 8004342:	a904      	add	r1, sp, #16
 8004344:	f000 f87c 	bl	8004440 <_printf_i>
 8004348:	e7eb      	b.n	8004322 <_svfiprintf_r+0x1c2>
 800434a:	bf00      	nop
 800434c:	08004936 	.word	0x08004936
 8004350:	08004940 	.word	0x08004940
 8004354:	00000000 	.word	0x00000000
 8004358:	080040a9 	.word	0x080040a9
 800435c:	0800493c 	.word	0x0800493c

08004360 <_printf_common>:
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	4616      	mov	r6, r2
 8004366:	4699      	mov	r9, r3
 8004368:	688a      	ldr	r2, [r1, #8]
 800436a:	690b      	ldr	r3, [r1, #16]
 800436c:	4607      	mov	r7, r0
 800436e:	4293      	cmp	r3, r2
 8004370:	bfb8      	it	lt
 8004372:	4613      	movlt	r3, r2
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800437a:	460c      	mov	r4, r1
 800437c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004380:	b10a      	cbz	r2, 8004386 <_printf_common+0x26>
 8004382:	3301      	adds	r3, #1
 8004384:	6033      	str	r3, [r6, #0]
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	0699      	lsls	r1, r3, #26
 800438a:	bf42      	ittt	mi
 800438c:	6833      	ldrmi	r3, [r6, #0]
 800438e:	3302      	addmi	r3, #2
 8004390:	6033      	strmi	r3, [r6, #0]
 8004392:	6825      	ldr	r5, [r4, #0]
 8004394:	f015 0506 	ands.w	r5, r5, #6
 8004398:	d106      	bne.n	80043a8 <_printf_common+0x48>
 800439a:	f104 0a19 	add.w	sl, r4, #25
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	6832      	ldr	r2, [r6, #0]
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	42ab      	cmp	r3, r5
 80043a6:	dc28      	bgt.n	80043fa <_printf_common+0x9a>
 80043a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043ac:	1e13      	subs	r3, r2, #0
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	bf18      	it	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	0692      	lsls	r2, r2, #26
 80043b6:	d42d      	bmi.n	8004414 <_printf_common+0xb4>
 80043b8:	4649      	mov	r1, r9
 80043ba:	4638      	mov	r0, r7
 80043bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c0:	47c0      	blx	r8
 80043c2:	3001      	adds	r0, #1
 80043c4:	d020      	beq.n	8004408 <_printf_common+0xa8>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	68e5      	ldr	r5, [r4, #12]
 80043ca:	f003 0306 	and.w	r3, r3, #6
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	bf18      	it	ne
 80043d2:	2500      	movne	r5, #0
 80043d4:	6832      	ldr	r2, [r6, #0]
 80043d6:	f04f 0600 	mov.w	r6, #0
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	bf08      	it	eq
 80043de:	1aad      	subeq	r5, r5, r2
 80043e0:	6922      	ldr	r2, [r4, #16]
 80043e2:	bf08      	it	eq
 80043e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfc4      	itt	gt
 80043ec:	1a9b      	subgt	r3, r3, r2
 80043ee:	18ed      	addgt	r5, r5, r3
 80043f0:	341a      	adds	r4, #26
 80043f2:	42b5      	cmp	r5, r6
 80043f4:	d11a      	bne.n	800442c <_printf_common+0xcc>
 80043f6:	2000      	movs	r0, #0
 80043f8:	e008      	b.n	800440c <_printf_common+0xac>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4652      	mov	r2, sl
 80043fe:	4649      	mov	r1, r9
 8004400:	4638      	mov	r0, r7
 8004402:	47c0      	blx	r8
 8004404:	3001      	adds	r0, #1
 8004406:	d103      	bne.n	8004410 <_printf_common+0xb0>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004410:	3501      	adds	r5, #1
 8004412:	e7c4      	b.n	800439e <_printf_common+0x3e>
 8004414:	2030      	movs	r0, #48	; 0x30
 8004416:	18e1      	adds	r1, r4, r3
 8004418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004422:	4422      	add	r2, r4
 8004424:	3302      	adds	r3, #2
 8004426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800442a:	e7c5      	b.n	80043b8 <_printf_common+0x58>
 800442c:	2301      	movs	r3, #1
 800442e:	4622      	mov	r2, r4
 8004430:	4649      	mov	r1, r9
 8004432:	4638      	mov	r0, r7
 8004434:	47c0      	blx	r8
 8004436:	3001      	adds	r0, #1
 8004438:	d0e6      	beq.n	8004408 <_printf_common+0xa8>
 800443a:	3601      	adds	r6, #1
 800443c:	e7d9      	b.n	80043f2 <_printf_common+0x92>
	...

08004440 <_printf_i>:
 8004440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	460c      	mov	r4, r1
 8004446:	7e27      	ldrb	r7, [r4, #24]
 8004448:	4691      	mov	r9, r2
 800444a:	2f78      	cmp	r7, #120	; 0x78
 800444c:	4680      	mov	r8, r0
 800444e:	469a      	mov	sl, r3
 8004450:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004456:	d807      	bhi.n	8004468 <_printf_i+0x28>
 8004458:	2f62      	cmp	r7, #98	; 0x62
 800445a:	d80a      	bhi.n	8004472 <_printf_i+0x32>
 800445c:	2f00      	cmp	r7, #0
 800445e:	f000 80d9 	beq.w	8004614 <_printf_i+0x1d4>
 8004462:	2f58      	cmp	r7, #88	; 0x58
 8004464:	f000 80a4 	beq.w	80045b0 <_printf_i+0x170>
 8004468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800446c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004470:	e03a      	b.n	80044e8 <_printf_i+0xa8>
 8004472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004476:	2b15      	cmp	r3, #21
 8004478:	d8f6      	bhi.n	8004468 <_printf_i+0x28>
 800447a:	a001      	add	r0, pc, #4	; (adr r0, 8004480 <_printf_i+0x40>)
 800447c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044ed 	.word	0x080044ed
 8004488:	08004469 	.word	0x08004469
 800448c:	08004469 	.word	0x08004469
 8004490:	08004469 	.word	0x08004469
 8004494:	08004469 	.word	0x08004469
 8004498:	080044ed 	.word	0x080044ed
 800449c:	08004469 	.word	0x08004469
 80044a0:	08004469 	.word	0x08004469
 80044a4:	08004469 	.word	0x08004469
 80044a8:	08004469 	.word	0x08004469
 80044ac:	080045fb 	.word	0x080045fb
 80044b0:	0800451d 	.word	0x0800451d
 80044b4:	080045dd 	.word	0x080045dd
 80044b8:	08004469 	.word	0x08004469
 80044bc:	08004469 	.word	0x08004469
 80044c0:	0800461d 	.word	0x0800461d
 80044c4:	08004469 	.word	0x08004469
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004469 	.word	0x08004469
 80044d0:	08004469 	.word	0x08004469
 80044d4:	080045e5 	.word	0x080045e5
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	600a      	str	r2, [r1, #0]
 80044e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0a4      	b.n	8004636 <_printf_i+0x1f6>
 80044ec:	6825      	ldr	r5, [r4, #0]
 80044ee:	6808      	ldr	r0, [r1, #0]
 80044f0:	062e      	lsls	r6, r5, #24
 80044f2:	f100 0304 	add.w	r3, r0, #4
 80044f6:	d50a      	bpl.n	800450e <_printf_i+0xce>
 80044f8:	6805      	ldr	r5, [r0, #0]
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	da03      	bge.n	8004508 <_printf_i+0xc8>
 8004500:	232d      	movs	r3, #45	; 0x2d
 8004502:	426d      	negs	r5, r5
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004508:	230a      	movs	r3, #10
 800450a:	485e      	ldr	r0, [pc, #376]	; (8004684 <_printf_i+0x244>)
 800450c:	e019      	b.n	8004542 <_printf_i+0x102>
 800450e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004512:	6805      	ldr	r5, [r0, #0]
 8004514:	600b      	str	r3, [r1, #0]
 8004516:	bf18      	it	ne
 8004518:	b22d      	sxthne	r5, r5
 800451a:	e7ef      	b.n	80044fc <_printf_i+0xbc>
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	6825      	ldr	r5, [r4, #0]
 8004520:	1d18      	adds	r0, r3, #4
 8004522:	6008      	str	r0, [r1, #0]
 8004524:	0628      	lsls	r0, r5, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0xec>
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	e002      	b.n	8004532 <_printf_i+0xf2>
 800452c:	0669      	lsls	r1, r5, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0xe8>
 8004530:	881d      	ldrh	r5, [r3, #0]
 8004532:	2f6f      	cmp	r7, #111	; 0x6f
 8004534:	bf0c      	ite	eq
 8004536:	2308      	moveq	r3, #8
 8004538:	230a      	movne	r3, #10
 800453a:	4852      	ldr	r0, [pc, #328]	; (8004684 <_printf_i+0x244>)
 800453c:	2100      	movs	r1, #0
 800453e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004542:	6866      	ldr	r6, [r4, #4]
 8004544:	2e00      	cmp	r6, #0
 8004546:	bfa8      	it	ge
 8004548:	6821      	ldrge	r1, [r4, #0]
 800454a:	60a6      	str	r6, [r4, #8]
 800454c:	bfa4      	itt	ge
 800454e:	f021 0104 	bicge.w	r1, r1, #4
 8004552:	6021      	strge	r1, [r4, #0]
 8004554:	b90d      	cbnz	r5, 800455a <_printf_i+0x11a>
 8004556:	2e00      	cmp	r6, #0
 8004558:	d04d      	beq.n	80045f6 <_printf_i+0x1b6>
 800455a:	4616      	mov	r6, r2
 800455c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004560:	fb03 5711 	mls	r7, r3, r1, r5
 8004564:	5dc7      	ldrb	r7, [r0, r7]
 8004566:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800456a:	462f      	mov	r7, r5
 800456c:	42bb      	cmp	r3, r7
 800456e:	460d      	mov	r5, r1
 8004570:	d9f4      	bls.n	800455c <_printf_i+0x11c>
 8004572:	2b08      	cmp	r3, #8
 8004574:	d10b      	bne.n	800458e <_printf_i+0x14e>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	07df      	lsls	r7, r3, #31
 800457a:	d508      	bpl.n	800458e <_printf_i+0x14e>
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	6861      	ldr	r1, [r4, #4]
 8004580:	4299      	cmp	r1, r3
 8004582:	bfde      	ittt	le
 8004584:	2330      	movle	r3, #48	; 0x30
 8004586:	f806 3c01 	strble.w	r3, [r6, #-1]
 800458a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800458e:	1b92      	subs	r2, r2, r6
 8004590:	6122      	str	r2, [r4, #16]
 8004592:	464b      	mov	r3, r9
 8004594:	4621      	mov	r1, r4
 8004596:	4640      	mov	r0, r8
 8004598:	f8cd a000 	str.w	sl, [sp]
 800459c:	aa03      	add	r2, sp, #12
 800459e:	f7ff fedf 	bl	8004360 <_printf_common>
 80045a2:	3001      	adds	r0, #1
 80045a4:	d14c      	bne.n	8004640 <_printf_i+0x200>
 80045a6:	f04f 30ff 	mov.w	r0, #4294967295
 80045aa:	b004      	add	sp, #16
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	4834      	ldr	r0, [pc, #208]	; (8004684 <_printf_i+0x244>)
 80045b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045b6:	680e      	ldr	r6, [r1, #0]
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80045be:	061f      	lsls	r7, r3, #24
 80045c0:	600e      	str	r6, [r1, #0]
 80045c2:	d514      	bpl.n	80045ee <_printf_i+0x1ae>
 80045c4:	07d9      	lsls	r1, r3, #31
 80045c6:	bf44      	itt	mi
 80045c8:	f043 0320 	orrmi.w	r3, r3, #32
 80045cc:	6023      	strmi	r3, [r4, #0]
 80045ce:	b91d      	cbnz	r5, 80045d8 <_printf_i+0x198>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	f023 0320 	bic.w	r3, r3, #32
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	2310      	movs	r3, #16
 80045da:	e7af      	b.n	800453c <_printf_i+0xfc>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	f043 0320 	orr.w	r3, r3, #32
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	2378      	movs	r3, #120	; 0x78
 80045e6:	4828      	ldr	r0, [pc, #160]	; (8004688 <_printf_i+0x248>)
 80045e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ec:	e7e3      	b.n	80045b6 <_printf_i+0x176>
 80045ee:	065e      	lsls	r6, r3, #25
 80045f0:	bf48      	it	mi
 80045f2:	b2ad      	uxthmi	r5, r5
 80045f4:	e7e6      	b.n	80045c4 <_printf_i+0x184>
 80045f6:	4616      	mov	r6, r2
 80045f8:	e7bb      	b.n	8004572 <_printf_i+0x132>
 80045fa:	680b      	ldr	r3, [r1, #0]
 80045fc:	6826      	ldr	r6, [r4, #0]
 80045fe:	1d1d      	adds	r5, r3, #4
 8004600:	6960      	ldr	r0, [r4, #20]
 8004602:	600d      	str	r5, [r1, #0]
 8004604:	0635      	lsls	r5, r6, #24
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	d501      	bpl.n	800460e <_printf_i+0x1ce>
 800460a:	6018      	str	r0, [r3, #0]
 800460c:	e002      	b.n	8004614 <_printf_i+0x1d4>
 800460e:	0671      	lsls	r1, r6, #25
 8004610:	d5fb      	bpl.n	800460a <_printf_i+0x1ca>
 8004612:	8018      	strh	r0, [r3, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	4616      	mov	r6, r2
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	e7ba      	b.n	8004592 <_printf_i+0x152>
 800461c:	680b      	ldr	r3, [r1, #0]
 800461e:	1d1a      	adds	r2, r3, #4
 8004620:	600a      	str	r2, [r1, #0]
 8004622:	681e      	ldr	r6, [r3, #0]
 8004624:	2100      	movs	r1, #0
 8004626:	4630      	mov	r0, r6
 8004628:	6862      	ldr	r2, [r4, #4]
 800462a:	f000 f82f 	bl	800468c <memchr>
 800462e:	b108      	cbz	r0, 8004634 <_printf_i+0x1f4>
 8004630:	1b80      	subs	r0, r0, r6
 8004632:	6060      	str	r0, [r4, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	6123      	str	r3, [r4, #16]
 8004638:	2300      	movs	r3, #0
 800463a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800463e:	e7a8      	b.n	8004592 <_printf_i+0x152>
 8004640:	4632      	mov	r2, r6
 8004642:	4649      	mov	r1, r9
 8004644:	4640      	mov	r0, r8
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	47d0      	blx	sl
 800464a:	3001      	adds	r0, #1
 800464c:	d0ab      	beq.n	80045a6 <_printf_i+0x166>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	079b      	lsls	r3, r3, #30
 8004652:	d413      	bmi.n	800467c <_printf_i+0x23c>
 8004654:	68e0      	ldr	r0, [r4, #12]
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	4298      	cmp	r0, r3
 800465a:	bfb8      	it	lt
 800465c:	4618      	movlt	r0, r3
 800465e:	e7a4      	b.n	80045aa <_printf_i+0x16a>
 8004660:	2301      	movs	r3, #1
 8004662:	4632      	mov	r2, r6
 8004664:	4649      	mov	r1, r9
 8004666:	4640      	mov	r0, r8
 8004668:	47d0      	blx	sl
 800466a:	3001      	adds	r0, #1
 800466c:	d09b      	beq.n	80045a6 <_printf_i+0x166>
 800466e:	3501      	adds	r5, #1
 8004670:	68e3      	ldr	r3, [r4, #12]
 8004672:	9903      	ldr	r1, [sp, #12]
 8004674:	1a5b      	subs	r3, r3, r1
 8004676:	42ab      	cmp	r3, r5
 8004678:	dcf2      	bgt.n	8004660 <_printf_i+0x220>
 800467a:	e7eb      	b.n	8004654 <_printf_i+0x214>
 800467c:	2500      	movs	r5, #0
 800467e:	f104 0619 	add.w	r6, r4, #25
 8004682:	e7f5      	b.n	8004670 <_printf_i+0x230>
 8004684:	08004947 	.word	0x08004947
 8004688:	08004958 	.word	0x08004958

0800468c <memchr>:
 800468c:	4603      	mov	r3, r0
 800468e:	b510      	push	{r4, lr}
 8004690:	b2c9      	uxtb	r1, r1
 8004692:	4402      	add	r2, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	4618      	mov	r0, r3
 8004698:	d101      	bne.n	800469e <memchr+0x12>
 800469a:	2000      	movs	r0, #0
 800469c:	e003      	b.n	80046a6 <memchr+0x1a>
 800469e:	7804      	ldrb	r4, [r0, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	428c      	cmp	r4, r1
 80046a4:	d1f6      	bne.n	8004694 <memchr+0x8>
 80046a6:	bd10      	pop	{r4, pc}

080046a8 <memcpy>:
 80046a8:	440a      	add	r2, r1
 80046aa:	4291      	cmp	r1, r2
 80046ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b0:	d100      	bne.n	80046b4 <memcpy+0xc>
 80046b2:	4770      	bx	lr
 80046b4:	b510      	push	{r4, lr}
 80046b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ba:	4291      	cmp	r1, r2
 80046bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046c0:	d1f9      	bne.n	80046b6 <memcpy+0xe>
 80046c2:	bd10      	pop	{r4, pc}

080046c4 <memmove>:
 80046c4:	4288      	cmp	r0, r1
 80046c6:	b510      	push	{r4, lr}
 80046c8:	eb01 0402 	add.w	r4, r1, r2
 80046cc:	d902      	bls.n	80046d4 <memmove+0x10>
 80046ce:	4284      	cmp	r4, r0
 80046d0:	4623      	mov	r3, r4
 80046d2:	d807      	bhi.n	80046e4 <memmove+0x20>
 80046d4:	1e43      	subs	r3, r0, #1
 80046d6:	42a1      	cmp	r1, r4
 80046d8:	d008      	beq.n	80046ec <memmove+0x28>
 80046da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046e2:	e7f8      	b.n	80046d6 <memmove+0x12>
 80046e4:	4601      	mov	r1, r0
 80046e6:	4402      	add	r2, r0
 80046e8:	428a      	cmp	r2, r1
 80046ea:	d100      	bne.n	80046ee <memmove+0x2a>
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046f6:	e7f7      	b.n	80046e8 <memmove+0x24>

080046f8 <_free_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4605      	mov	r5, r0
 80046fc:	2900      	cmp	r1, #0
 80046fe:	d043      	beq.n	8004788 <_free_r+0x90>
 8004700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004704:	1f0c      	subs	r4, r1, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfb8      	it	lt
 800470a:	18e4      	addlt	r4, r4, r3
 800470c:	f000 f8d0 	bl	80048b0 <__malloc_lock>
 8004710:	4a1e      	ldr	r2, [pc, #120]	; (800478c <_free_r+0x94>)
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	4610      	mov	r0, r2
 8004716:	b933      	cbnz	r3, 8004726 <_free_r+0x2e>
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	6014      	str	r4, [r2, #0]
 800471c:	4628      	mov	r0, r5
 800471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004722:	f000 b8cb 	b.w	80048bc <__malloc_unlock>
 8004726:	42a3      	cmp	r3, r4
 8004728:	d90a      	bls.n	8004740 <_free_r+0x48>
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	1862      	adds	r2, r4, r1
 800472e:	4293      	cmp	r3, r2
 8004730:	bf01      	itttt	eq
 8004732:	681a      	ldreq	r2, [r3, #0]
 8004734:	685b      	ldreq	r3, [r3, #4]
 8004736:	1852      	addeq	r2, r2, r1
 8004738:	6022      	streq	r2, [r4, #0]
 800473a:	6063      	str	r3, [r4, #4]
 800473c:	6004      	str	r4, [r0, #0]
 800473e:	e7ed      	b.n	800471c <_free_r+0x24>
 8004740:	461a      	mov	r2, r3
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b10b      	cbz	r3, 800474a <_free_r+0x52>
 8004746:	42a3      	cmp	r3, r4
 8004748:	d9fa      	bls.n	8004740 <_free_r+0x48>
 800474a:	6811      	ldr	r1, [r2, #0]
 800474c:	1850      	adds	r0, r2, r1
 800474e:	42a0      	cmp	r0, r4
 8004750:	d10b      	bne.n	800476a <_free_r+0x72>
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	4401      	add	r1, r0
 8004756:	1850      	adds	r0, r2, r1
 8004758:	4283      	cmp	r3, r0
 800475a:	6011      	str	r1, [r2, #0]
 800475c:	d1de      	bne.n	800471c <_free_r+0x24>
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4401      	add	r1, r0
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	6053      	str	r3, [r2, #4]
 8004768:	e7d8      	b.n	800471c <_free_r+0x24>
 800476a:	d902      	bls.n	8004772 <_free_r+0x7a>
 800476c:	230c      	movs	r3, #12
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	e7d4      	b.n	800471c <_free_r+0x24>
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1821      	adds	r1, r4, r0
 8004776:	428b      	cmp	r3, r1
 8004778:	bf01      	itttt	eq
 800477a:	6819      	ldreq	r1, [r3, #0]
 800477c:	685b      	ldreq	r3, [r3, #4]
 800477e:	1809      	addeq	r1, r1, r0
 8004780:	6021      	streq	r1, [r4, #0]
 8004782:	6063      	str	r3, [r4, #4]
 8004784:	6054      	str	r4, [r2, #4]
 8004786:	e7c9      	b.n	800471c <_free_r+0x24>
 8004788:	bd38      	pop	{r3, r4, r5, pc}
 800478a:	bf00      	nop
 800478c:	200000bc 	.word	0x200000bc

08004790 <_malloc_r>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	1ccd      	adds	r5, r1, #3
 8004794:	f025 0503 	bic.w	r5, r5, #3
 8004798:	3508      	adds	r5, #8
 800479a:	2d0c      	cmp	r5, #12
 800479c:	bf38      	it	cc
 800479e:	250c      	movcc	r5, #12
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	4606      	mov	r6, r0
 80047a4:	db01      	blt.n	80047aa <_malloc_r+0x1a>
 80047a6:	42a9      	cmp	r1, r5
 80047a8:	d903      	bls.n	80047b2 <_malloc_r+0x22>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	2000      	movs	r0, #0
 80047b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b2:	f000 f87d 	bl	80048b0 <__malloc_lock>
 80047b6:	4921      	ldr	r1, [pc, #132]	; (800483c <_malloc_r+0xac>)
 80047b8:	680a      	ldr	r2, [r1, #0]
 80047ba:	4614      	mov	r4, r2
 80047bc:	b99c      	cbnz	r4, 80047e6 <_malloc_r+0x56>
 80047be:	4f20      	ldr	r7, [pc, #128]	; (8004840 <_malloc_r+0xb0>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b923      	cbnz	r3, 80047ce <_malloc_r+0x3e>
 80047c4:	4621      	mov	r1, r4
 80047c6:	4630      	mov	r0, r6
 80047c8:	f000 f862 	bl	8004890 <_sbrk_r>
 80047cc:	6038      	str	r0, [r7, #0]
 80047ce:	4629      	mov	r1, r5
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f85d 	bl	8004890 <_sbrk_r>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d123      	bne.n	8004822 <_malloc_r+0x92>
 80047da:	230c      	movs	r3, #12
 80047dc:	4630      	mov	r0, r6
 80047de:	6033      	str	r3, [r6, #0]
 80047e0:	f000 f86c 	bl	80048bc <__malloc_unlock>
 80047e4:	e7e3      	b.n	80047ae <_malloc_r+0x1e>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	1b5b      	subs	r3, r3, r5
 80047ea:	d417      	bmi.n	800481c <_malloc_r+0x8c>
 80047ec:	2b0b      	cmp	r3, #11
 80047ee:	d903      	bls.n	80047f8 <_malloc_r+0x68>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	441c      	add	r4, r3
 80047f4:	6025      	str	r5, [r4, #0]
 80047f6:	e004      	b.n	8004802 <_malloc_r+0x72>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	42a2      	cmp	r2, r4
 80047fc:	bf0c      	ite	eq
 80047fe:	600b      	streq	r3, [r1, #0]
 8004800:	6053      	strne	r3, [r2, #4]
 8004802:	4630      	mov	r0, r6
 8004804:	f000 f85a 	bl	80048bc <__malloc_unlock>
 8004808:	f104 000b 	add.w	r0, r4, #11
 800480c:	1d23      	adds	r3, r4, #4
 800480e:	f020 0007 	bic.w	r0, r0, #7
 8004812:	1ac2      	subs	r2, r0, r3
 8004814:	d0cc      	beq.n	80047b0 <_malloc_r+0x20>
 8004816:	1a1b      	subs	r3, r3, r0
 8004818:	50a3      	str	r3, [r4, r2]
 800481a:	e7c9      	b.n	80047b0 <_malloc_r+0x20>
 800481c:	4622      	mov	r2, r4
 800481e:	6864      	ldr	r4, [r4, #4]
 8004820:	e7cc      	b.n	80047bc <_malloc_r+0x2c>
 8004822:	1cc4      	adds	r4, r0, #3
 8004824:	f024 0403 	bic.w	r4, r4, #3
 8004828:	42a0      	cmp	r0, r4
 800482a:	d0e3      	beq.n	80047f4 <_malloc_r+0x64>
 800482c:	1a21      	subs	r1, r4, r0
 800482e:	4630      	mov	r0, r6
 8004830:	f000 f82e 	bl	8004890 <_sbrk_r>
 8004834:	3001      	adds	r0, #1
 8004836:	d1dd      	bne.n	80047f4 <_malloc_r+0x64>
 8004838:	e7cf      	b.n	80047da <_malloc_r+0x4a>
 800483a:	bf00      	nop
 800483c:	200000bc 	.word	0x200000bc
 8004840:	200000c0 	.word	0x200000c0

08004844 <_realloc_r>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	4607      	mov	r7, r0
 8004848:	4614      	mov	r4, r2
 800484a:	460e      	mov	r6, r1
 800484c:	b921      	cbnz	r1, 8004858 <_realloc_r+0x14>
 800484e:	4611      	mov	r1, r2
 8004850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004854:	f7ff bf9c 	b.w	8004790 <_malloc_r>
 8004858:	b922      	cbnz	r2, 8004864 <_realloc_r+0x20>
 800485a:	f7ff ff4d 	bl	80046f8 <_free_r>
 800485e:	4625      	mov	r5, r4
 8004860:	4628      	mov	r0, r5
 8004862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004864:	f000 f830 	bl	80048c8 <_malloc_usable_size_r>
 8004868:	42a0      	cmp	r0, r4
 800486a:	d20f      	bcs.n	800488c <_realloc_r+0x48>
 800486c:	4621      	mov	r1, r4
 800486e:	4638      	mov	r0, r7
 8004870:	f7ff ff8e 	bl	8004790 <_malloc_r>
 8004874:	4605      	mov	r5, r0
 8004876:	2800      	cmp	r0, #0
 8004878:	d0f2      	beq.n	8004860 <_realloc_r+0x1c>
 800487a:	4631      	mov	r1, r6
 800487c:	4622      	mov	r2, r4
 800487e:	f7ff ff13 	bl	80046a8 <memcpy>
 8004882:	4631      	mov	r1, r6
 8004884:	4638      	mov	r0, r7
 8004886:	f7ff ff37 	bl	80046f8 <_free_r>
 800488a:	e7e9      	b.n	8004860 <_realloc_r+0x1c>
 800488c:	4635      	mov	r5, r6
 800488e:	e7e7      	b.n	8004860 <_realloc_r+0x1c>

08004890 <_sbrk_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	2300      	movs	r3, #0
 8004894:	4d05      	ldr	r5, [pc, #20]	; (80048ac <_sbrk_r+0x1c>)
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	f7fc fd4e 	bl	800133c <_sbrk>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_sbrk_r+0x1a>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_sbrk_r+0x1a>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	20000590 	.word	0x20000590

080048b0 <__malloc_lock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	; (80048b8 <__malloc_lock+0x8>)
 80048b2:	f000 b811 	b.w	80048d8 <__retarget_lock_acquire_recursive>
 80048b6:	bf00      	nop
 80048b8:	20000598 	.word	0x20000598

080048bc <__malloc_unlock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <__malloc_unlock+0x8>)
 80048be:	f000 b80c 	b.w	80048da <__retarget_lock_release_recursive>
 80048c2:	bf00      	nop
 80048c4:	20000598 	.word	0x20000598

080048c8 <_malloc_usable_size_r>:
 80048c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048cc:	1f18      	subs	r0, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bfbc      	itt	lt
 80048d2:	580b      	ldrlt	r3, [r1, r0]
 80048d4:	18c0      	addlt	r0, r0, r3
 80048d6:	4770      	bx	lr

080048d8 <__retarget_lock_acquire_recursive>:
 80048d8:	4770      	bx	lr

080048da <__retarget_lock_release_recursive>:
 80048da:	4770      	bx	lr

080048dc <_init>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr

080048e8 <_fini>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	bf00      	nop
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr
